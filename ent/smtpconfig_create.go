// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/smtpconfig"
)

// SMTPConfigCreate is the builder for creating a SMTPConfig entity.
type SMTPConfigCreate struct {
	config
	mutation *SMTPConfigMutation
	hooks    []Hook
}

// SetSMTPServer sets the "smtp_server" field.
func (scc *SMTPConfigCreate) SetSMTPServer(s string) *SMTPConfigCreate {
	scc.mutation.SetSMTPServer(s)
	return scc
}

// SetNillableSMTPServer sets the "smtp_server" field if the given value is not nil.
func (scc *SMTPConfigCreate) SetNillableSMTPServer(s *string) *SMTPConfigCreate {
	if s != nil {
		scc.SetSMTPServer(*s)
	}
	return scc
}

// SetSMTPPort sets the "smtp_port" field.
func (scc *SMTPConfigCreate) SetSMTPPort(i int) *SMTPConfigCreate {
	scc.mutation.SetSMTPPort(i)
	return scc
}

// SetNillableSMTPPort sets the "smtp_port" field if the given value is not nil.
func (scc *SMTPConfigCreate) SetNillableSMTPPort(i *int) *SMTPConfigCreate {
	if i != nil {
		scc.SetSMTPPort(*i)
	}
	return scc
}

// SetSMTPUsername sets the "smtp_username" field.
func (scc *SMTPConfigCreate) SetSMTPUsername(s string) *SMTPConfigCreate {
	scc.mutation.SetSMTPUsername(s)
	return scc
}

// SetNillableSMTPUsername sets the "smtp_username" field if the given value is not nil.
func (scc *SMTPConfigCreate) SetNillableSMTPUsername(s *string) *SMTPConfigCreate {
	if s != nil {
		scc.SetSMTPUsername(*s)
	}
	return scc
}

// SetSMTPPassword sets the "smtp_password" field.
func (scc *SMTPConfigCreate) SetSMTPPassword(s string) *SMTPConfigCreate {
	scc.mutation.SetSMTPPassword(s)
	return scc
}

// SetNillableSMTPPassword sets the "smtp_password" field if the given value is not nil.
func (scc *SMTPConfigCreate) SetNillableSMTPPassword(s *string) *SMTPConfigCreate {
	if s != nil {
		scc.SetSMTPPassword(*s)
	}
	return scc
}

// SetSMTPSender sets the "smtp_sender" field.
func (scc *SMTPConfigCreate) SetSMTPSender(s string) *SMTPConfigCreate {
	scc.mutation.SetSMTPSender(s)
	return scc
}

// SetNillableSMTPSender sets the "smtp_sender" field if the given value is not nil.
func (scc *SMTPConfigCreate) SetNillableSMTPSender(s *string) *SMTPConfigCreate {
	if s != nil {
		scc.SetSMTPSender(*s)
	}
	return scc
}

// SetSMTPTLS sets the "smtp_tls" field.
func (scc *SMTPConfigCreate) SetSMTPTLS(b bool) *SMTPConfigCreate {
	scc.mutation.SetSMTPTLS(b)
	return scc
}

// SetNillableSMTPTLS sets the "smtp_tls" field if the given value is not nil.
func (scc *SMTPConfigCreate) SetNillableSMTPTLS(b *bool) *SMTPConfigCreate {
	if b != nil {
		scc.SetSMTPTLS(*b)
	}
	return scc
}

// Mutation returns the SMTPConfigMutation object of the builder.
func (scc *SMTPConfigCreate) Mutation() *SMTPConfigMutation {
	return scc.mutation
}

// Save creates the SMTPConfig in the database.
func (scc *SMTPConfigCreate) Save(ctx context.Context) (*SMTPConfig, error) {
	scc.defaults()
	return withHooks(ctx, scc.sqlSave, scc.mutation, scc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (scc *SMTPConfigCreate) SaveX(ctx context.Context) *SMTPConfig {
	v, err := scc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scc *SMTPConfigCreate) Exec(ctx context.Context) error {
	_, err := scc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scc *SMTPConfigCreate) ExecX(ctx context.Context) {
	if err := scc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (scc *SMTPConfigCreate) defaults() {
	if _, ok := scc.mutation.SMTPServer(); !ok {
		v := smtpconfig.DefaultSMTPServer
		scc.mutation.SetSMTPServer(v)
	}
	if _, ok := scc.mutation.SMTPPort(); !ok {
		v := smtpconfig.DefaultSMTPPort
		scc.mutation.SetSMTPPort(v)
	}
	if _, ok := scc.mutation.SMTPUsername(); !ok {
		v := smtpconfig.DefaultSMTPUsername
		scc.mutation.SetSMTPUsername(v)
	}
	if _, ok := scc.mutation.SMTPPassword(); !ok {
		v := smtpconfig.DefaultSMTPPassword
		scc.mutation.SetSMTPPassword(v)
	}
	if _, ok := scc.mutation.SMTPSender(); !ok {
		v := smtpconfig.DefaultSMTPSender
		scc.mutation.SetSMTPSender(v)
	}
	if _, ok := scc.mutation.SMTPTLS(); !ok {
		v := smtpconfig.DefaultSMTPTLS
		scc.mutation.SetSMTPTLS(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (scc *SMTPConfigCreate) check() error {
	if _, ok := scc.mutation.SMTPServer(); !ok {
		return &ValidationError{Name: "smtp_server", err: errors.New(`ent: missing required field "SMTPConfig.smtp_server"`)}
	}
	if _, ok := scc.mutation.SMTPPort(); !ok {
		return &ValidationError{Name: "smtp_port", err: errors.New(`ent: missing required field "SMTPConfig.smtp_port"`)}
	}
	if _, ok := scc.mutation.SMTPUsername(); !ok {
		return &ValidationError{Name: "smtp_username", err: errors.New(`ent: missing required field "SMTPConfig.smtp_username"`)}
	}
	if _, ok := scc.mutation.SMTPPassword(); !ok {
		return &ValidationError{Name: "smtp_password", err: errors.New(`ent: missing required field "SMTPConfig.smtp_password"`)}
	}
	if _, ok := scc.mutation.SMTPSender(); !ok {
		return &ValidationError{Name: "smtp_sender", err: errors.New(`ent: missing required field "SMTPConfig.smtp_sender"`)}
	}
	if _, ok := scc.mutation.SMTPTLS(); !ok {
		return &ValidationError{Name: "smtp_tls", err: errors.New(`ent: missing required field "SMTPConfig.smtp_tls"`)}
	}
	return nil
}

func (scc *SMTPConfigCreate) sqlSave(ctx context.Context) (*SMTPConfig, error) {
	if err := scc.check(); err != nil {
		return nil, err
	}
	_node, _spec := scc.createSpec()
	if err := sqlgraph.CreateNode(ctx, scc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	scc.mutation.id = &_node.ID
	scc.mutation.done = true
	return _node, nil
}

func (scc *SMTPConfigCreate) createSpec() (*SMTPConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &SMTPConfig{config: scc.config}
		_spec = sqlgraph.NewCreateSpec(smtpconfig.Table, sqlgraph.NewFieldSpec(smtpconfig.FieldID, field.TypeInt))
	)
	if value, ok := scc.mutation.SMTPServer(); ok {
		_spec.SetField(smtpconfig.FieldSMTPServer, field.TypeString, value)
		_node.SMTPServer = value
	}
	if value, ok := scc.mutation.SMTPPort(); ok {
		_spec.SetField(smtpconfig.FieldSMTPPort, field.TypeInt, value)
		_node.SMTPPort = value
	}
	if value, ok := scc.mutation.SMTPUsername(); ok {
		_spec.SetField(smtpconfig.FieldSMTPUsername, field.TypeString, value)
		_node.SMTPUsername = value
	}
	if value, ok := scc.mutation.SMTPPassword(); ok {
		_spec.SetField(smtpconfig.FieldSMTPPassword, field.TypeString, value)
		_node.SMTPPassword = value
	}
	if value, ok := scc.mutation.SMTPSender(); ok {
		_spec.SetField(smtpconfig.FieldSMTPSender, field.TypeString, value)
		_node.SMTPSender = value
	}
	if value, ok := scc.mutation.SMTPTLS(); ok {
		_spec.SetField(smtpconfig.FieldSMTPTLS, field.TypeBool, value)
		_node.SMTPTLS = value
	}
	return _node, _spec
}

// SMTPConfigCreateBulk is the builder for creating many SMTPConfig entities in bulk.
type SMTPConfigCreateBulk struct {
	config
	err      error
	builders []*SMTPConfigCreate
}

// Save creates the SMTPConfig entities in the database.
func (sccb *SMTPConfigCreateBulk) Save(ctx context.Context) ([]*SMTPConfig, error) {
	if sccb.err != nil {
		return nil, sccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sccb.builders))
	nodes := make([]*SMTPConfig, len(sccb.builders))
	mutators := make([]Mutator, len(sccb.builders))
	for i := range sccb.builders {
		func(i int, root context.Context) {
			builder := sccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SMTPConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sccb *SMTPConfigCreateBulk) SaveX(ctx context.Context) []*SMTPConfig {
	v, err := sccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sccb *SMTPConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := sccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sccb *SMTPConfigCreateBulk) ExecX(ctx context.Context) {
	if err := sccb.Exec(ctx); err != nil {
		panic(err)
	}
}
