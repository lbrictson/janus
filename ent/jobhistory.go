// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// JobHistory is the model entity for the JobHistory schema.
type JobHistory struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// WasSuccessful holds the value of the "was_successful" field.
	WasSuccessful bool `json:"was_successful,omitempty"`
	// DurationMs holds the value of the "duration_ms" field.
	DurationMs int64 `json:"duration_ms,omitempty"`
	// Parameters holds the value of the "parameters" field.
	Parameters []schema.Parameter `json:"parameters,omitempty"`
	// Output holds the value of the "output" field.
	Output string `json:"output,omitempty"`
	// ExitCode holds the value of the "exit_code" field.
	ExitCode int `json:"exit_code,omitempty"`
	// TriggeredByEmail holds the value of the "triggered_by_email" field.
	TriggeredByEmail string `json:"triggered_by_email,omitempty"`
	// TriggeredByID holds the value of the "triggered_by_id" field.
	TriggeredByID int `json:"triggered_by_id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Status holds the value of the "status" field.
	Status string `json:"status,omitempty"`
	// Trigger holds the value of the "trigger" field.
	Trigger string `json:"trigger,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobHistoryQuery when eager-loading is set.
	Edges           JobHistoryEdges `json:"edges"`
	job_history     *int
	project_history *int
	selectValues    sql.SelectValues
}

// JobHistoryEdges holds the relations/edges for other nodes in the graph.
type JobHistoryEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobHistoryEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobHistoryEdges) JobOrErr() (*Job, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobHistory) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobhistory.FieldParameters:
			values[i] = new([]byte)
		case jobhistory.FieldWasSuccessful:
			values[i] = new(sql.NullBool)
		case jobhistory.FieldID, jobhistory.FieldDurationMs, jobhistory.FieldExitCode, jobhistory.FieldTriggeredByID:
			values[i] = new(sql.NullInt64)
		case jobhistory.FieldOutput, jobhistory.FieldTriggeredByEmail, jobhistory.FieldStatus, jobhistory.FieldTrigger:
			values[i] = new(sql.NullString)
		case jobhistory.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case jobhistory.ForeignKeys[0]: // job_history
			values[i] = new(sql.NullInt64)
		case jobhistory.ForeignKeys[1]: // project_history
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobHistory fields.
func (jh *JobHistory) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobhistory.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jh.ID = int(value.Int64)
		case jobhistory.FieldWasSuccessful:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field was_successful", values[i])
			} else if value.Valid {
				jh.WasSuccessful = value.Bool
			}
		case jobhistory.FieldDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field duration_ms", values[i])
			} else if value.Valid {
				jh.DurationMs = value.Int64
			}
		case jobhistory.FieldParameters:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field parameters", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &jh.Parameters); err != nil {
					return fmt.Errorf("unmarshal field parameters: %w", err)
				}
			}
		case jobhistory.FieldOutput:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field output", values[i])
			} else if value.Valid {
				jh.Output = value.String
			}
		case jobhistory.FieldExitCode:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field exit_code", values[i])
			} else if value.Valid {
				jh.ExitCode = int(value.Int64)
			}
		case jobhistory.FieldTriggeredByEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field triggered_by_email", values[i])
			} else if value.Valid {
				jh.TriggeredByEmail = value.String
			}
		case jobhistory.FieldTriggeredByID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field triggered_by_id", values[i])
			} else if value.Valid {
				jh.TriggeredByID = int(value.Int64)
			}
		case jobhistory.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				jh.CreatedAt = value.Time
			}
		case jobhistory.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				jh.Status = value.String
			}
		case jobhistory.FieldTrigger:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field trigger", values[i])
			} else if value.Valid {
				jh.Trigger = value.String
			}
		case jobhistory.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_history", value)
			} else if value.Valid {
				jh.job_history = new(int)
				*jh.job_history = int(value.Int64)
			}
		case jobhistory.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_history", value)
			} else if value.Valid {
				jh.project_history = new(int)
				*jh.project_history = int(value.Int64)
			}
		default:
			jh.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobHistory.
// This includes values selected through modifiers, order, etc.
func (jh *JobHistory) Value(name string) (ent.Value, error) {
	return jh.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the JobHistory entity.
func (jh *JobHistory) QueryProject() *ProjectQuery {
	return NewJobHistoryClient(jh.config).QueryProject(jh)
}

// QueryJob queries the "job" edge of the JobHistory entity.
func (jh *JobHistory) QueryJob() *JobQuery {
	return NewJobHistoryClient(jh.config).QueryJob(jh)
}

// Update returns a builder for updating this JobHistory.
// Note that you need to call JobHistory.Unwrap() before calling this method if this JobHistory
// was returned from a transaction, and the transaction was committed or rolled back.
func (jh *JobHistory) Update() *JobHistoryUpdateOne {
	return NewJobHistoryClient(jh.config).UpdateOne(jh)
}

// Unwrap unwraps the JobHistory entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jh *JobHistory) Unwrap() *JobHistory {
	_tx, ok := jh.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobHistory is not a transactional entity")
	}
	jh.config.driver = _tx.drv
	return jh
}

// String implements the fmt.Stringer.
func (jh *JobHistory) String() string {
	var builder strings.Builder
	builder.WriteString("JobHistory(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jh.ID))
	builder.WriteString("was_successful=")
	builder.WriteString(fmt.Sprintf("%v", jh.WasSuccessful))
	builder.WriteString(", ")
	builder.WriteString("duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", jh.DurationMs))
	builder.WriteString(", ")
	builder.WriteString("parameters=")
	builder.WriteString(fmt.Sprintf("%v", jh.Parameters))
	builder.WriteString(", ")
	builder.WriteString("output=")
	builder.WriteString(jh.Output)
	builder.WriteString(", ")
	builder.WriteString("exit_code=")
	builder.WriteString(fmt.Sprintf("%v", jh.ExitCode))
	builder.WriteString(", ")
	builder.WriteString("triggered_by_email=")
	builder.WriteString(jh.TriggeredByEmail)
	builder.WriteString(", ")
	builder.WriteString("triggered_by_id=")
	builder.WriteString(fmt.Sprintf("%v", jh.TriggeredByID))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(jh.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(jh.Status)
	builder.WriteString(", ")
	builder.WriteString("trigger=")
	builder.WriteString(jh.Trigger)
	builder.WriteByte(')')
	return builder.String()
}

// JobHistories is a parsable slice of JobHistory.
type JobHistories []*JobHistory
