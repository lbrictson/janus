// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/schema"
)

// JobVersion is the model entity for the JobVersion schema.
type JobVersion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Script holds the value of the "script" field.
	Script string `json:"script,omitempty"`
	// CronSchedule holds the value of the "cron_schedule" field.
	CronSchedule string `json:"cron_schedule,omitempty"`
	// ScheduleEnabled holds the value of the "schedule_enabled" field.
	ScheduleEnabled bool `json:"schedule_enabled,omitempty"`
	// AllowConcurrentRuns holds the value of the "allow_concurrent_runs" field.
	AllowConcurrentRuns bool `json:"allow_concurrent_runs,omitempty"`
	// Arguments holds the value of the "arguments" field.
	Arguments []schema.JobArgument `json:"arguments,omitempty"`
	// RequiresFileUpload holds the value of the "requires_file_upload" field.
	RequiresFileUpload bool `json:"requires_file_upload,omitempty"`
	// ChangedByEmail holds the value of the "changed_by_email" field.
	ChangedByEmail string `json:"changed_by_email,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobVersionQuery when eager-loading is set.
	Edges        JobVersionEdges `json:"edges"`
	job_versions *int
	selectValues sql.SelectValues
}

// JobVersionEdges holds the relations/edges for other nodes in the graph.
type JobVersionEdges struct {
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobVersionEdges) JobOrErr() (*Job, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobVersion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobversion.FieldArguments:
			values[i] = new([]byte)
		case jobversion.FieldScheduleEnabled, jobversion.FieldAllowConcurrentRuns, jobversion.FieldRequiresFileUpload:
			values[i] = new(sql.NullBool)
		case jobversion.FieldID:
			values[i] = new(sql.NullInt64)
		case jobversion.FieldName, jobversion.FieldDescription, jobversion.FieldScript, jobversion.FieldCronSchedule, jobversion.FieldChangedByEmail:
			values[i] = new(sql.NullString)
		case jobversion.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case jobversion.ForeignKeys[0]: // job_versions
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobVersion fields.
func (_m *JobVersion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobversion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case jobversion.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case jobversion.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				_m.Name = value.String
			}
		case jobversion.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				_m.Description = value.String
			}
		case jobversion.FieldScript:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value.Valid {
				_m.Script = value.String
			}
		case jobversion.FieldCronSchedule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cron_schedule", values[i])
			} else if value.Valid {
				_m.CronSchedule = value.String
			}
		case jobversion.FieldScheduleEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_enabled", values[i])
			} else if value.Valid {
				_m.ScheduleEnabled = value.Bool
			}
		case jobversion.FieldAllowConcurrentRuns:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_concurrent_runs", values[i])
			} else if value.Valid {
				_m.AllowConcurrentRuns = value.Bool
			}
		case jobversion.FieldArguments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field arguments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &_m.Arguments); err != nil {
					return fmt.Errorf("unmarshal field arguments: %w", err)
				}
			}
		case jobversion.FieldRequiresFileUpload:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_file_upload", values[i])
			} else if value.Valid {
				_m.RequiresFileUpload = value.Bool
			}
		case jobversion.FieldChangedByEmail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field changed_by_email", values[i])
			} else if value.Valid {
				_m.ChangedByEmail = value.String
			}
		case jobversion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field job_versions", value)
			} else if value.Valid {
				_m.job_versions = new(int)
				*_m.job_versions = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobVersion.
// This includes values selected through modifiers, order, etc.
func (_m *JobVersion) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the JobVersion entity.
func (_m *JobVersion) QueryJob() *JobQuery {
	return NewJobVersionClient(_m.config).QueryJob(_m)
}

// Update returns a builder for updating this JobVersion.
// Note that you need to call JobVersion.Unwrap() before calling this method if this JobVersion
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *JobVersion) Update() *JobVersionUpdateOne {
	return NewJobVersionClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the JobVersion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *JobVersion) Unwrap() *JobVersion {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobVersion is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *JobVersion) String() string {
	var builder strings.Builder
	builder.WriteString("JobVersion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(_m.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(_m.Description)
	builder.WriteString(", ")
	builder.WriteString("script=")
	builder.WriteString(_m.Script)
	builder.WriteString(", ")
	builder.WriteString("cron_schedule=")
	builder.WriteString(_m.CronSchedule)
	builder.WriteString(", ")
	builder.WriteString("schedule_enabled=")
	builder.WriteString(fmt.Sprintf("%v", _m.ScheduleEnabled))
	builder.WriteString(", ")
	builder.WriteString("allow_concurrent_runs=")
	builder.WriteString(fmt.Sprintf("%v", _m.AllowConcurrentRuns))
	builder.WriteString(", ")
	builder.WriteString("arguments=")
	builder.WriteString(fmt.Sprintf("%v", _m.Arguments))
	builder.WriteString(", ")
	builder.WriteString("requires_file_upload=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequiresFileUpload))
	builder.WriteString(", ")
	builder.WriteString("changed_by_email=")
	builder.WriteString(_m.ChangedByEmail)
	builder.WriteByte(')')
	return builder.String()
}

// JobVersions is a parsable slice of JobVersion.
type JobVersions []*JobVersion
