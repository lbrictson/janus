// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/jobconfig"
)

// JobConfig is the model entity for the JobConfig schema.
type JobConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// MaxConcurrentJobs holds the value of the "max_concurrent_jobs" field.
	MaxConcurrentJobs int `json:"max_concurrent_jobs,omitempty"`
	// DefaultTimeoutSeconds holds the value of the "default_timeout_seconds" field.
	DefaultTimeoutSeconds int `json:"default_timeout_seconds,omitempty"`
	selectValues          sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*JobConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case jobconfig.FieldID, jobconfig.FieldMaxConcurrentJobs, jobconfig.FieldDefaultTimeoutSeconds:
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the JobConfig fields.
func (jc *JobConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case jobconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			jc.ID = int(value.Int64)
		case jobconfig.FieldMaxConcurrentJobs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field max_concurrent_jobs", values[i])
			} else if value.Valid {
				jc.MaxConcurrentJobs = int(value.Int64)
			}
		case jobconfig.FieldDefaultTimeoutSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field default_timeout_seconds", values[i])
			} else if value.Valid {
				jc.DefaultTimeoutSeconds = int(value.Int64)
			}
		default:
			jc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the JobConfig.
// This includes values selected through modifiers, order, etc.
func (jc *JobConfig) Value(name string) (ent.Value, error) {
	return jc.selectValues.Get(name)
}

// Update returns a builder for updating this JobConfig.
// Note that you need to call JobConfig.Unwrap() before calling this method if this JobConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (jc *JobConfig) Update() *JobConfigUpdateOne {
	return NewJobConfigClient(jc.config).UpdateOne(jc)
}

// Unwrap unwraps the JobConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (jc *JobConfig) Unwrap() *JobConfig {
	_tx, ok := jc.config.driver.(*txDriver)
	if !ok {
		panic("ent: JobConfig is not a transactional entity")
	}
	jc.config.driver = _tx.drv
	return jc
}

// String implements the fmt.Stringer.
func (jc *JobConfig) String() string {
	var builder strings.Builder
	builder.WriteString("JobConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", jc.ID))
	builder.WriteString("max_concurrent_jobs=")
	builder.WriteString(fmt.Sprintf("%v", jc.MaxConcurrentJobs))
	builder.WriteString(", ")
	builder.WriteString("default_timeout_seconds=")
	builder.WriteString(fmt.Sprintf("%v", jc.DefaultTimeoutSeconds))
	builder.WriteByte(')')
	return builder.String()
}

// JobConfigs is a parsable slice of JobConfig.
type JobConfigs []*JobConfig
