// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// JobCreate is the builder for creating a Job entity.
type JobCreate struct {
	config
	mutation *JobMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *JobCreate) SetName(v string) *JobCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *JobCreate) SetDescription(v string) *JobCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *JobCreate) SetNillableDescription(v *string) *JobCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetCronSchedule sets the "cron_schedule" field.
func (_c *JobCreate) SetCronSchedule(v string) *JobCreate {
	_c.mutation.SetCronSchedule(v)
	return _c
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (_c *JobCreate) SetNillableCronSchedule(v *string) *JobCreate {
	if v != nil {
		_c.SetCronSchedule(*v)
	}
	return _c
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (_c *JobCreate) SetScheduleEnabled(v bool) *JobCreate {
	_c.mutation.SetScheduleEnabled(v)
	return _c
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (_c *JobCreate) SetNillableScheduleEnabled(v *bool) *JobCreate {
	if v != nil {
		_c.SetScheduleEnabled(*v)
	}
	return _c
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (_c *JobCreate) SetAllowConcurrentRuns(v bool) *JobCreate {
	_c.mutation.SetAllowConcurrentRuns(v)
	return _c
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (_c *JobCreate) SetNillableAllowConcurrentRuns(v *bool) *JobCreate {
	if v != nil {
		_c.SetAllowConcurrentRuns(*v)
	}
	return _c
}

// SetArguments sets the "arguments" field.
func (_c *JobCreate) SetArguments(v []schema.JobArgument) *JobCreate {
	_c.mutation.SetArguments(v)
	return _c
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (_c *JobCreate) SetRequiresFileUpload(v bool) *JobCreate {
	_c.mutation.SetRequiresFileUpload(v)
	return _c
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (_c *JobCreate) SetNillableRequiresFileUpload(v *bool) *JobCreate {
	if v != nil {
		_c.SetRequiresFileUpload(*v)
	}
	return _c
}

// SetAverageDurationMs sets the "average_duration_ms" field.
func (_c *JobCreate) SetAverageDurationMs(v int64) *JobCreate {
	_c.mutation.SetAverageDurationMs(v)
	return _c
}

// SetNillableAverageDurationMs sets the "average_duration_ms" field if the given value is not nil.
func (_c *JobCreate) SetNillableAverageDurationMs(v *int64) *JobCreate {
	if v != nil {
		_c.SetAverageDurationMs(*v)
	}
	return _c
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (_c *JobCreate) SetTimeoutSeconds(v int) *JobCreate {
	_c.mutation.SetTimeoutSeconds(v)
	return _c
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (_c *JobCreate) SetNillableTimeoutSeconds(v *int) *JobCreate {
	if v != nil {
		_c.SetTimeoutSeconds(*v)
	}
	return _c
}

// SetLastEditTime sets the "last_edit_time" field.
func (_c *JobCreate) SetLastEditTime(v time.Time) *JobCreate {
	_c.mutation.SetLastEditTime(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *JobCreate) SetCreatedAt(v time.Time) *JobCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *JobCreate) SetNillableCreatedAt(v *time.Time) *JobCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetNotifyOnStartChannelIds sets the "notify_on_start_channel_ids" field.
func (_c *JobCreate) SetNotifyOnStartChannelIds(v []int) *JobCreate {
	_c.mutation.SetNotifyOnStartChannelIds(v)
	return _c
}

// SetNotifyOnSuccessChannelIds sets the "notify_on_success_channel_ids" field.
func (_c *JobCreate) SetNotifyOnSuccessChannelIds(v []int) *JobCreate {
	_c.mutation.SetNotifyOnSuccessChannelIds(v)
	return _c
}

// SetNotifyOnFailureChannelIds sets the "notify_on_failure_channel_ids" field.
func (_c *JobCreate) SetNotifyOnFailureChannelIds(v []int) *JobCreate {
	_c.mutation.SetNotifyOnFailureChannelIds(v)
	return _c
}

// SetLastRunTime sets the "last_run_time" field.
func (_c *JobCreate) SetLastRunTime(v time.Time) *JobCreate {
	_c.mutation.SetLastRunTime(v)
	return _c
}

// SetNextCronRunTime sets the "next_cron_run_time" field.
func (_c *JobCreate) SetNextCronRunTime(v time.Time) *JobCreate {
	_c.mutation.SetNextCronRunTime(v)
	return _c
}

// SetScript sets the "script" field.
func (_c *JobCreate) SetScript(v string) *JobCreate {
	_c.mutation.SetScript(v)
	return _c
}

// SetLastRunSuccess sets the "last_run_success" field.
func (_c *JobCreate) SetLastRunSuccess(v bool) *JobCreate {
	_c.mutation.SetLastRunSuccess(v)
	return _c
}

// SetNillableLastRunSuccess sets the "last_run_success" field if the given value is not nil.
func (_c *JobCreate) SetNillableLastRunSuccess(v *bool) *JobCreate {
	if v != nil {
		_c.SetLastRunSuccess(*v)
	}
	return _c
}

// SetCreatedByAPI sets the "created_by_api" field.
func (_c *JobCreate) SetCreatedByAPI(v bool) *JobCreate {
	_c.mutation.SetCreatedByAPI(v)
	return _c
}

// SetNillableCreatedByAPI sets the "created_by_api" field if the given value is not nil.
func (_c *JobCreate) SetNillableCreatedByAPI(v *bool) *JobCreate {
	if v != nil {
		_c.SetCreatedByAPI(*v)
	}
	return _c
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_c *JobCreate) SetProjectID(id int) *JobCreate {
	_c.mutation.SetProjectID(id)
	return _c
}

// SetProject sets the "project" edge to the Project entity.
func (_c *JobCreate) SetProject(v *Project) *JobCreate {
	return _c.SetProjectID(v.ID)
}

// AddHistoryIDs adds the "history" edge to the JobHistory entity by IDs.
func (_c *JobCreate) AddHistoryIDs(ids ...int) *JobCreate {
	_c.mutation.AddHistoryIDs(ids...)
	return _c
}

// AddHistory adds the "history" edges to the JobHistory entity.
func (_c *JobCreate) AddHistory(v ...*JobHistory) *JobCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddHistoryIDs(ids...)
}

// AddVersionIDs adds the "versions" edge to the JobVersion entity by IDs.
func (_c *JobCreate) AddVersionIDs(ids ...int) *JobCreate {
	_c.mutation.AddVersionIDs(ids...)
	return _c
}

// AddVersions adds the "versions" edges to the JobVersion entity.
func (_c *JobCreate) AddVersions(v ...*JobVersion) *JobCreate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddVersionIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (_c *JobCreate) Mutation() *JobMutation {
	return _c.mutation
}

// Save creates the Job in the database.
func (_c *JobCreate) Save(ctx context.Context) (*Job, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *JobCreate) SaveX(ctx context.Context) *Job {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *JobCreate) defaults() {
	if _, ok := _c.mutation.ScheduleEnabled(); !ok {
		v := job.DefaultScheduleEnabled
		_c.mutation.SetScheduleEnabled(v)
	}
	if _, ok := _c.mutation.AllowConcurrentRuns(); !ok {
		v := job.DefaultAllowConcurrentRuns
		_c.mutation.SetAllowConcurrentRuns(v)
	}
	if _, ok := _c.mutation.RequiresFileUpload(); !ok {
		v := job.DefaultRequiresFileUpload
		_c.mutation.SetRequiresFileUpload(v)
	}
	if _, ok := _c.mutation.AverageDurationMs(); !ok {
		v := job.DefaultAverageDurationMs
		_c.mutation.SetAverageDurationMs(v)
	}
	if _, ok := _c.mutation.TimeoutSeconds(); !ok {
		v := job.DefaultTimeoutSeconds
		_c.mutation.SetTimeoutSeconds(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := job.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.LastRunSuccess(); !ok {
		v := job.DefaultLastRunSuccess
		_c.mutation.SetLastRunSuccess(v)
	}
	if _, ok := _c.mutation.CreatedByAPI(); !ok {
		v := job.DefaultCreatedByAPI
		_c.mutation.SetCreatedByAPI(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *JobCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Job.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.ScheduleEnabled(); !ok {
		return &ValidationError{Name: "schedule_enabled", err: errors.New(`ent: missing required field "Job.schedule_enabled"`)}
	}
	if _, ok := _c.mutation.AllowConcurrentRuns(); !ok {
		return &ValidationError{Name: "allow_concurrent_runs", err: errors.New(`ent: missing required field "Job.allow_concurrent_runs"`)}
	}
	if _, ok := _c.mutation.RequiresFileUpload(); !ok {
		return &ValidationError{Name: "requires_file_upload", err: errors.New(`ent: missing required field "Job.requires_file_upload"`)}
	}
	if _, ok := _c.mutation.LastEditTime(); !ok {
		return &ValidationError{Name: "last_edit_time", err: errors.New(`ent: missing required field "Job.last_edit_time"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Job.created_at"`)}
	}
	if _, ok := _c.mutation.LastRunTime(); !ok {
		return &ValidationError{Name: "last_run_time", err: errors.New(`ent: missing required field "Job.last_run_time"`)}
	}
	if _, ok := _c.mutation.NextCronRunTime(); !ok {
		return &ValidationError{Name: "next_cron_run_time", err: errors.New(`ent: missing required field "Job.next_cron_run_time"`)}
	}
	if _, ok := _c.mutation.Script(); !ok {
		return &ValidationError{Name: "script", err: errors.New(`ent: missing required field "Job.script"`)}
	}
	if _, ok := _c.mutation.LastRunSuccess(); !ok {
		return &ValidationError{Name: "last_run_success", err: errors.New(`ent: missing required field "Job.last_run_success"`)}
	}
	if _, ok := _c.mutation.CreatedByAPI(); !ok {
		return &ValidationError{Name: "created_by_api", err: errors.New(`ent: missing required field "Job.created_by_api"`)}
	}
	if len(_c.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "Job.project"`)}
	}
	return nil
}

func (_c *JobCreate) sqlSave(ctx context.Context) (*Job, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *JobCreate) createSpec() (*Job, *sqlgraph.CreateSpec) {
	var (
		_node = &Job{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(job.Table, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.CronSchedule(); ok {
		_spec.SetField(job.FieldCronSchedule, field.TypeString, value)
		_node.CronSchedule = value
	}
	if value, ok := _c.mutation.ScheduleEnabled(); ok {
		_spec.SetField(job.FieldScheduleEnabled, field.TypeBool, value)
		_node.ScheduleEnabled = value
	}
	if value, ok := _c.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(job.FieldAllowConcurrentRuns, field.TypeBool, value)
		_node.AllowConcurrentRuns = value
	}
	if value, ok := _c.mutation.Arguments(); ok {
		_spec.SetField(job.FieldArguments, field.TypeJSON, value)
		_node.Arguments = value
	}
	if value, ok := _c.mutation.RequiresFileUpload(); ok {
		_spec.SetField(job.FieldRequiresFileUpload, field.TypeBool, value)
		_node.RequiresFileUpload = value
	}
	if value, ok := _c.mutation.AverageDurationMs(); ok {
		_spec.SetField(job.FieldAverageDurationMs, field.TypeInt64, value)
		_node.AverageDurationMs = value
	}
	if value, ok := _c.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt, value)
		_node.TimeoutSeconds = value
	}
	if value, ok := _c.mutation.LastEditTime(); ok {
		_spec.SetField(job.FieldLastEditTime, field.TypeTime, value)
		_node.LastEditTime = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(job.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.NotifyOnStartChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnStartChannelIds, field.TypeJSON, value)
		_node.NotifyOnStartChannelIds = value
	}
	if value, ok := _c.mutation.NotifyOnSuccessChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON, value)
		_node.NotifyOnSuccessChannelIds = value
	}
	if value, ok := _c.mutation.NotifyOnFailureChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON, value)
		_node.NotifyOnFailureChannelIds = value
	}
	if value, ok := _c.mutation.LastRunTime(); ok {
		_spec.SetField(job.FieldLastRunTime, field.TypeTime, value)
		_node.LastRunTime = value
	}
	if value, ok := _c.mutation.NextCronRunTime(); ok {
		_spec.SetField(job.FieldNextCronRunTime, field.TypeTime, value)
		_node.NextCronRunTime = value
	}
	if value, ok := _c.mutation.Script(); ok {
		_spec.SetField(job.FieldScript, field.TypeString, value)
		_node.Script = value
	}
	if value, ok := _c.mutation.LastRunSuccess(); ok {
		_spec.SetField(job.FieldLastRunSuccess, field.TypeBool, value)
		_node.LastRunSuccess = value
	}
	if value, ok := _c.mutation.CreatedByAPI(); ok {
		_spec.SetField(job.FieldCreatedByAPI, field.TypeBool, value)
		_node.CreatedByAPI = value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobCreateBulk is the builder for creating many Job entities in bulk.
type JobCreateBulk struct {
	config
	err      error
	builders []*JobCreate
}

// Save creates the Job entities in the database.
func (_c *JobCreateBulk) Save(ctx context.Context) ([]*Job, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Job, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *JobCreateBulk) SaveX(ctx context.Context) []*Job {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
