// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/inboundwebhook"
	"github.com/lbrictson/janus/ent/job"
)

// InboundWebhook is the model entity for the InboundWebhook schema.
type InboundWebhook struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// CreatedBy holds the value of the "created_by" field.
	CreatedBy string `json:"created_by,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// RequireAPIKey holds the value of the "require_api_key" field.
	RequireAPIKey bool `json:"require_api_key,omitempty"`
	// APIKey holds the value of the "api_key" field.
	APIKey *string `json:"api_key,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the InboundWebhookQuery when eager-loading is set.
	Edges               InboundWebhookEdges `json:"edges"`
	inbound_webhook_job *int
	selectValues        sql.SelectValues
}

// InboundWebhookEdges holds the relations/edges for other nodes in the graph.
type InboundWebhookEdges struct {
	// Job holds the value of the job edge.
	Job *Job `json:"job,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// JobOrErr returns the Job value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e InboundWebhookEdges) JobOrErr() (*Job, error) {
	if e.Job != nil {
		return e.Job, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: job.Label}
	}
	return nil, &NotLoadedError{edge: "job"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*InboundWebhook) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case inboundwebhook.FieldRequireAPIKey:
			values[i] = new(sql.NullBool)
		case inboundwebhook.FieldID:
			values[i] = new(sql.NullInt64)
		case inboundwebhook.FieldKey, inboundwebhook.FieldCreatedBy, inboundwebhook.FieldAPIKey:
			values[i] = new(sql.NullString)
		case inboundwebhook.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case inboundwebhook.ForeignKeys[0]: // inbound_webhook_job
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the InboundWebhook fields.
func (_m *InboundWebhook) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case inboundwebhook.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case inboundwebhook.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				_m.Key = value.String
			}
		case inboundwebhook.FieldCreatedBy:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field created_by", values[i])
			} else if value.Valid {
				_m.CreatedBy = value.String
			}
		case inboundwebhook.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case inboundwebhook.FieldRequireAPIKey:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field require_api_key", values[i])
			} else if value.Valid {
				_m.RequireAPIKey = value.Bool
			}
		case inboundwebhook.FieldAPIKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_key", values[i])
			} else if value.Valid {
				_m.APIKey = new(string)
				*_m.APIKey = value.String
			}
		case inboundwebhook.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field inbound_webhook_job", value)
			} else if value.Valid {
				_m.inbound_webhook_job = new(int)
				*_m.inbound_webhook_job = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the InboundWebhook.
// This includes values selected through modifiers, order, etc.
func (_m *InboundWebhook) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryJob queries the "job" edge of the InboundWebhook entity.
func (_m *InboundWebhook) QueryJob() *JobQuery {
	return NewInboundWebhookClient(_m.config).QueryJob(_m)
}

// Update returns a builder for updating this InboundWebhook.
// Note that you need to call InboundWebhook.Unwrap() before calling this method if this InboundWebhook
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *InboundWebhook) Update() *InboundWebhookUpdateOne {
	return NewInboundWebhookClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the InboundWebhook entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *InboundWebhook) Unwrap() *InboundWebhook {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: InboundWebhook is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *InboundWebhook) String() string {
	var builder strings.Builder
	builder.WriteString("InboundWebhook(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("key=")
	builder.WriteString(_m.Key)
	builder.WriteString(", ")
	builder.WriteString("created_by=")
	builder.WriteString(_m.CreatedBy)
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("require_api_key=")
	builder.WriteString(fmt.Sprintf("%v", _m.RequireAPIKey))
	builder.WriteString(", ")
	if v := _m.APIKey; v != nil {
		builder.WriteString("api_key=")
		builder.WriteString(*v)
	}
	builder.WriteByte(')')
	return builder.String()
}

// InboundWebhooks is a parsable slice of InboundWebhook.
type InboundWebhooks []*InboundWebhook
