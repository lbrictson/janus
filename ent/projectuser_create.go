// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/projectuser"
	"github.com/lbrictson/janus/ent/user"
)

// ProjectUserCreate is the builder for creating a ProjectUser entity.
type ProjectUserCreate struct {
	config
	mutation *ProjectUserMutation
	hooks    []Hook
}

// SetCanEdit sets the "can_edit" field.
func (puc *ProjectUserCreate) SetCanEdit(b bool) *ProjectUserCreate {
	puc.mutation.SetCanEdit(b)
	return puc
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (puc *ProjectUserCreate) SetNillableCanEdit(b *bool) *ProjectUserCreate {
	if b != nil {
		puc.SetCanEdit(*b)
	}
	return puc
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (puc *ProjectUserCreate) SetProjectID(id int) *ProjectUserCreate {
	puc.mutation.SetProjectID(id)
	return puc
}

// SetProject sets the "project" edge to the Project entity.
func (puc *ProjectUserCreate) SetProject(p *Project) *ProjectUserCreate {
	return puc.SetProjectID(p.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (puc *ProjectUserCreate) SetUserID(id int) *ProjectUserCreate {
	puc.mutation.SetUserID(id)
	return puc
}

// SetUser sets the "user" edge to the User entity.
func (puc *ProjectUserCreate) SetUser(u *User) *ProjectUserCreate {
	return puc.SetUserID(u.ID)
}

// Mutation returns the ProjectUserMutation object of the builder.
func (puc *ProjectUserCreate) Mutation() *ProjectUserMutation {
	return puc.mutation
}

// Save creates the ProjectUser in the database.
func (puc *ProjectUserCreate) Save(ctx context.Context) (*ProjectUser, error) {
	puc.defaults()
	return withHooks(ctx, puc.sqlSave, puc.mutation, puc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (puc *ProjectUserCreate) SaveX(ctx context.Context) *ProjectUser {
	v, err := puc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (puc *ProjectUserCreate) Exec(ctx context.Context) error {
	_, err := puc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puc *ProjectUserCreate) ExecX(ctx context.Context) {
	if err := puc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (puc *ProjectUserCreate) defaults() {
	if _, ok := puc.mutation.CanEdit(); !ok {
		v := projectuser.DefaultCanEdit
		puc.mutation.SetCanEdit(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puc *ProjectUserCreate) check() error {
	if _, ok := puc.mutation.CanEdit(); !ok {
		return &ValidationError{Name: "can_edit", err: errors.New(`ent: missing required field "ProjectUser.can_edit"`)}
	}
	if len(puc.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "ProjectUser.project"`)}
	}
	if len(puc.mutation.UserIDs()) == 0 {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "ProjectUser.user"`)}
	}
	return nil
}

func (puc *ProjectUserCreate) sqlSave(ctx context.Context) (*ProjectUser, error) {
	if err := puc.check(); err != nil {
		return nil, err
	}
	_node, _spec := puc.createSpec()
	if err := sqlgraph.CreateNode(ctx, puc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	puc.mutation.id = &_node.ID
	puc.mutation.done = true
	return _node, nil
}

func (puc *ProjectUserCreate) createSpec() (*ProjectUser, *sqlgraph.CreateSpec) {
	var (
		_node = &ProjectUser{config: puc.config}
		_spec = sqlgraph.NewCreateSpec(projectuser.Table, sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt))
	)
	if value, ok := puc.mutation.CanEdit(); ok {
		_spec.SetField(projectuser.FieldCanEdit, field.TypeBool, value)
		_node.CanEdit = value
	}
	if nodes := puc.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.ProjectTable,
			Columns: []string{projectuser.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_project_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := puc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.UserTable,
			Columns: []string{projectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_project_users = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// ProjectUserCreateBulk is the builder for creating many ProjectUser entities in bulk.
type ProjectUserCreateBulk struct {
	config
	err      error
	builders []*ProjectUserCreate
}

// Save creates the ProjectUser entities in the database.
func (pucb *ProjectUserCreateBulk) Save(ctx context.Context) ([]*ProjectUser, error) {
	if pucb.err != nil {
		return nil, pucb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pucb.builders))
	nodes := make([]*ProjectUser, len(pucb.builders))
	mutators := make([]Mutator, len(pucb.builders))
	for i := range pucb.builders {
		func(i int, root context.Context) {
			builder := pucb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProjectUserMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pucb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pucb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pucb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pucb *ProjectUserCreateBulk) SaveX(ctx context.Context) []*ProjectUser {
	v, err := pucb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pucb *ProjectUserCreateBulk) Exec(ctx context.Context) error {
	_, err := pucb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pucb *ProjectUserCreateBulk) ExecX(ctx context.Context) {
	if err := pucb.Exec(ctx); err != nil {
		panic(err)
	}
}
