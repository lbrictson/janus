// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/lbrictson/janus/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lbrictson/janus/ent/audit"
	"github.com/lbrictson/janus/ent/authconfig"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/notificationchannel"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/projectuser"
	"github.com/lbrictson/janus/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Audit is the client for interacting with the Audit builders.
	Audit *AuditClient
	// AuthConfig is the client for interacting with the AuthConfig builders.
	AuthConfig *AuthConfigClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// JobHistory is the client for interacting with the JobHistory builders.
	JobHistory *JobHistoryClient
	// NotificationChannel is the client for interacting with the NotificationChannel builders.
	NotificationChannel *NotificationChannelClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectUser is the client for interacting with the ProjectUser builders.
	ProjectUser *ProjectUserClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Audit = NewAuditClient(c.config)
	c.AuthConfig = NewAuthConfigClient(c.config)
	c.Job = NewJobClient(c.config)
	c.JobHistory = NewJobHistoryClient(c.config)
	c.NotificationChannel = NewNotificationChannelClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectUser = NewProjectUserClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Audit:               NewAuditClient(cfg),
		AuthConfig:          NewAuthConfigClient(cfg),
		Job:                 NewJobClient(cfg),
		JobHistory:          NewJobHistoryClient(cfg),
		NotificationChannel: NewNotificationChannelClient(cfg),
		Project:             NewProjectClient(cfg),
		ProjectUser:         NewProjectUserClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Audit:               NewAuditClient(cfg),
		AuthConfig:          NewAuthConfigClient(cfg),
		Job:                 NewJobClient(cfg),
		JobHistory:          NewJobHistoryClient(cfg),
		NotificationChannel: NewNotificationChannelClient(cfg),
		Project:             NewProjectClient(cfg),
		ProjectUser:         NewProjectUserClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Audit.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Audit, c.AuthConfig, c.Job, c.JobHistory, c.NotificationChannel, c.Project,
		c.ProjectUser, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Audit, c.AuthConfig, c.Job, c.JobHistory, c.NotificationChannel, c.Project,
		c.ProjectUser, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuditMutation:
		return c.Audit.mutate(ctx, m)
	case *AuthConfigMutation:
		return c.AuthConfig.mutate(ctx, m)
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *JobHistoryMutation:
		return c.JobHistory.mutate(ctx, m)
	case *NotificationChannelMutation:
		return c.NotificationChannel.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ProjectUserMutation:
		return c.ProjectUser.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuditClient is a client for the Audit schema.
type AuditClient struct {
	config
}

// NewAuditClient returns a client for the Audit from the given config.
func NewAuditClient(c config) *AuditClient {
	return &AuditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audit.Hooks(f(g(h())))`.
func (c *AuditClient) Use(hooks ...Hook) {
	c.hooks.Audit = append(c.hooks.Audit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `audit.Intercept(f(g(h())))`.
func (c *AuditClient) Intercept(interceptors ...Interceptor) {
	c.inters.Audit = append(c.inters.Audit, interceptors...)
}

// Create returns a builder for creating a Audit entity.
func (c *AuditClient) Create() *AuditCreate {
	mutation := newAuditMutation(c.config, OpCreate)
	return &AuditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Audit entities.
func (c *AuditClient) CreateBulk(builders ...*AuditCreate) *AuditCreateBulk {
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditClient) MapCreateBulk(slice any, setFunc func(*AuditCreate, int)) *AuditCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditCreateBulk{err: fmt.Errorf("calling to AuditClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Audit.
func (c *AuditClient) Update() *AuditUpdate {
	mutation := newAuditMutation(c.config, OpUpdate)
	return &AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditClient) UpdateOne(a *Audit) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAudit(a))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditClient) UpdateOneID(id int) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAuditID(id))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Audit.
func (c *AuditClient) Delete() *AuditDelete {
	mutation := newAuditMutation(c.config, OpDelete)
	return &AuditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditClient) DeleteOne(a *Audit) *AuditDeleteOne {
	return c.DeleteOneID(a.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditClient) DeleteOneID(id int) *AuditDeleteOne {
	builder := c.Delete().Where(audit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditDeleteOne{builder}
}

// Query returns a query builder for Audit.
func (c *AuditClient) Query() *AuditQuery {
	return &AuditQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAudit},
		inters: c.Interceptors(),
	}
}

// Get returns a Audit entity by its id.
func (c *AuditClient) Get(ctx context.Context, id int) (*Audit, error) {
	return c.Query().Where(audit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditClient) GetX(ctx context.Context, id int) *Audit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditClient) Hooks() []Hook {
	return c.hooks.Audit
}

// Interceptors returns the client interceptors.
func (c *AuditClient) Interceptors() []Interceptor {
	return c.inters.Audit
}

func (c *AuditClient) mutate(ctx context.Context, m *AuditMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Audit mutation op: %q", m.Op())
	}
}

// AuthConfigClient is a client for the AuthConfig schema.
type AuthConfigClient struct {
	config
}

// NewAuthConfigClient returns a client for the AuthConfig from the given config.
func NewAuthConfigClient(c config) *AuthConfigClient {
	return &AuthConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authconfig.Hooks(f(g(h())))`.
func (c *AuthConfigClient) Use(hooks ...Hook) {
	c.hooks.AuthConfig = append(c.hooks.AuthConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authconfig.Intercept(f(g(h())))`.
func (c *AuthConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthConfig = append(c.inters.AuthConfig, interceptors...)
}

// Create returns a builder for creating a AuthConfig entity.
func (c *AuthConfigClient) Create() *AuthConfigCreate {
	mutation := newAuthConfigMutation(c.config, OpCreate)
	return &AuthConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthConfig entities.
func (c *AuthConfigClient) CreateBulk(builders ...*AuthConfigCreate) *AuthConfigCreateBulk {
	return &AuthConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthConfigClient) MapCreateBulk(slice any, setFunc func(*AuthConfigCreate, int)) *AuthConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthConfigCreateBulk{err: fmt.Errorf("calling to AuthConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthConfig.
func (c *AuthConfigClient) Update() *AuthConfigUpdate {
	mutation := newAuthConfigMutation(c.config, OpUpdate)
	return &AuthConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthConfigClient) UpdateOne(ac *AuthConfig) *AuthConfigUpdateOne {
	mutation := newAuthConfigMutation(c.config, OpUpdateOne, withAuthConfig(ac))
	return &AuthConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthConfigClient) UpdateOneID(id int) *AuthConfigUpdateOne {
	mutation := newAuthConfigMutation(c.config, OpUpdateOne, withAuthConfigID(id))
	return &AuthConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthConfig.
func (c *AuthConfigClient) Delete() *AuthConfigDelete {
	mutation := newAuthConfigMutation(c.config, OpDelete)
	return &AuthConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthConfigClient) DeleteOne(ac *AuthConfig) *AuthConfigDeleteOne {
	return c.DeleteOneID(ac.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthConfigClient) DeleteOneID(id int) *AuthConfigDeleteOne {
	builder := c.Delete().Where(authconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthConfigDeleteOne{builder}
}

// Query returns a query builder for AuthConfig.
func (c *AuthConfigClient) Query() *AuthConfigQuery {
	return &AuthConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthConfig entity by its id.
func (c *AuthConfigClient) Get(ctx context.Context, id int) (*AuthConfig, error) {
	return c.Query().Where(authconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthConfigClient) GetX(ctx context.Context, id int) *AuthConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthConfigClient) Hooks() []Hook {
	return c.hooks.AuthConfig
}

// Interceptors returns the client interceptors.
func (c *AuthConfigClient) Interceptors() []Interceptor {
	return c.inters.AuthConfig
}

func (c *AuthConfigClient) mutate(ctx context.Context, m *AuthConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthConfig mutation op: %q", m.Op())
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobClient) MapCreateBulk(slice any, setFunc func(*JobCreate, int)) *JobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobCreateBulk{err: fmt.Errorf("calling to JobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(j *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(j))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id int) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(j *Job) *JobDeleteOne {
	return c.DeleteOneID(j.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id int) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id int) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id int) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Job.
func (c *JobClient) QueryProject(j *Job) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.ProjectTable, job.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistory queries the history edge of a Job.
func (c *JobClient) QueryHistory(j *Job) *JobHistoryQuery {
	query := (&JobHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := j.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobhistory.Table, jobhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.HistoryTable, job.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(j.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// JobHistoryClient is a client for the JobHistory schema.
type JobHistoryClient struct {
	config
}

// NewJobHistoryClient returns a client for the JobHistory from the given config.
func NewJobHistoryClient(c config) *JobHistoryClient {
	return &JobHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobhistory.Hooks(f(g(h())))`.
func (c *JobHistoryClient) Use(hooks ...Hook) {
	c.hooks.JobHistory = append(c.hooks.JobHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobhistory.Intercept(f(g(h())))`.
func (c *JobHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobHistory = append(c.inters.JobHistory, interceptors...)
}

// Create returns a builder for creating a JobHistory entity.
func (c *JobHistoryClient) Create() *JobHistoryCreate {
	mutation := newJobHistoryMutation(c.config, OpCreate)
	return &JobHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobHistory entities.
func (c *JobHistoryClient) CreateBulk(builders ...*JobHistoryCreate) *JobHistoryCreateBulk {
	return &JobHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobHistoryClient) MapCreateBulk(slice any, setFunc func(*JobHistoryCreate, int)) *JobHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobHistoryCreateBulk{err: fmt.Errorf("calling to JobHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobHistory.
func (c *JobHistoryClient) Update() *JobHistoryUpdate {
	mutation := newJobHistoryMutation(c.config, OpUpdate)
	return &JobHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobHistoryClient) UpdateOne(jh *JobHistory) *JobHistoryUpdateOne {
	mutation := newJobHistoryMutation(c.config, OpUpdateOne, withJobHistory(jh))
	return &JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobHistoryClient) UpdateOneID(id int) *JobHistoryUpdateOne {
	mutation := newJobHistoryMutation(c.config, OpUpdateOne, withJobHistoryID(id))
	return &JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobHistory.
func (c *JobHistoryClient) Delete() *JobHistoryDelete {
	mutation := newJobHistoryMutation(c.config, OpDelete)
	return &JobHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobHistoryClient) DeleteOne(jh *JobHistory) *JobHistoryDeleteOne {
	return c.DeleteOneID(jh.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobHistoryClient) DeleteOneID(id int) *JobHistoryDeleteOne {
	builder := c.Delete().Where(jobhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobHistoryDeleteOne{builder}
}

// Query returns a query builder for JobHistory.
func (c *JobHistoryClient) Query() *JobHistoryQuery {
	return &JobHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a JobHistory entity by its id.
func (c *JobHistoryClient) Get(ctx context.Context, id int) (*JobHistory, error) {
	return c.Query().Where(jobhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobHistoryClient) GetX(ctx context.Context, id int) *JobHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a JobHistory.
func (c *JobHistoryClient) QueryProject(jh *JobHistory) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobhistory.Table, jobhistory.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobhistory.ProjectTable, jobhistory.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(jh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJob queries the job edge of a JobHistory.
func (c *JobHistoryClient) QueryJob(jh *JobHistory) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := jh.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobhistory.Table, jobhistory.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobhistory.JobTable, jobhistory.JobColumn),
		)
		fromV = sqlgraph.Neighbors(jh.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobHistoryClient) Hooks() []Hook {
	return c.hooks.JobHistory
}

// Interceptors returns the client interceptors.
func (c *JobHistoryClient) Interceptors() []Interceptor {
	return c.inters.JobHistory
}

func (c *JobHistoryClient) mutate(ctx context.Context, m *JobHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobHistory mutation op: %q", m.Op())
	}
}

// NotificationChannelClient is a client for the NotificationChannel schema.
type NotificationChannelClient struct {
	config
}

// NewNotificationChannelClient returns a client for the NotificationChannel from the given config.
func NewNotificationChannelClient(c config) *NotificationChannelClient {
	return &NotificationChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationchannel.Hooks(f(g(h())))`.
func (c *NotificationChannelClient) Use(hooks ...Hook) {
	c.hooks.NotificationChannel = append(c.hooks.NotificationChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationchannel.Intercept(f(g(h())))`.
func (c *NotificationChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationChannel = append(c.inters.NotificationChannel, interceptors...)
}

// Create returns a builder for creating a NotificationChannel entity.
func (c *NotificationChannelClient) Create() *NotificationChannelCreate {
	mutation := newNotificationChannelMutation(c.config, OpCreate)
	return &NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationChannel entities.
func (c *NotificationChannelClient) CreateBulk(builders ...*NotificationChannelCreate) *NotificationChannelCreateBulk {
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationChannelClient) MapCreateBulk(slice any, setFunc func(*NotificationChannelCreate, int)) *NotificationChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationChannelCreateBulk{err: fmt.Errorf("calling to NotificationChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationChannel.
func (c *NotificationChannelClient) Update() *NotificationChannelUpdate {
	mutation := newNotificationChannelMutation(c.config, OpUpdate)
	return &NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationChannelClient) UpdateOne(nc *NotificationChannel) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannel(nc))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationChannelClient) UpdateOneID(id int) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannelID(id))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationChannel.
func (c *NotificationChannelClient) Delete() *NotificationChannelDelete {
	mutation := newNotificationChannelMutation(c.config, OpDelete)
	return &NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationChannelClient) DeleteOne(nc *NotificationChannel) *NotificationChannelDeleteOne {
	return c.DeleteOneID(nc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationChannelClient) DeleteOneID(id int) *NotificationChannelDeleteOne {
	builder := c.Delete().Where(notificationchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationChannelDeleteOne{builder}
}

// Query returns a query builder for NotificationChannel.
func (c *NotificationChannelClient) Query() *NotificationChannelQuery {
	return &NotificationChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationChannel entity by its id.
func (c *NotificationChannelClient) Get(ctx context.Context, id int) (*NotificationChannel, error) {
	return c.Query().Where(notificationchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationChannelClient) GetX(ctx context.Context, id int) *NotificationChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationChannelClient) Hooks() []Hook {
	return c.hooks.NotificationChannel
}

// Interceptors returns the client interceptors.
func (c *NotificationChannelClient) Interceptors() []Interceptor {
	return c.inters.NotificationChannel
}

func (c *NotificationChannelClient) mutate(ctx context.Context, m *NotificationChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationChannel mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(pr *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(pr))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(pr *Project) *ProjectDeleteOne {
	return c.DeleteOneID(pr.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectUsers queries the projectUsers edge of a Project.
func (c *ProjectClient) QueryProjectUsers(pr *Project) *ProjectUserQuery {
	query := (&ProjectUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectuser.Table, projectuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectUsersTable, project.ProjectUsersColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a Project.
func (c *ProjectClient) QueryJobs(pr *Project) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.JobsTable, project.JobsColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistory queries the history edge of a Project.
func (c *ProjectClient) QueryHistory(pr *Project) *JobHistoryQuery {
	query := (&JobHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pr.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(jobhistory.Table, jobhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.HistoryTable, project.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(pr.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ProjectUserClient is a client for the ProjectUser schema.
type ProjectUserClient struct {
	config
}

// NewProjectUserClient returns a client for the ProjectUser from the given config.
func NewProjectUserClient(c config) *ProjectUserClient {
	return &ProjectUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectuser.Hooks(f(g(h())))`.
func (c *ProjectUserClient) Use(hooks ...Hook) {
	c.hooks.ProjectUser = append(c.hooks.ProjectUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectuser.Intercept(f(g(h())))`.
func (c *ProjectUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectUser = append(c.inters.ProjectUser, interceptors...)
}

// Create returns a builder for creating a ProjectUser entity.
func (c *ProjectUserClient) Create() *ProjectUserCreate {
	mutation := newProjectUserMutation(c.config, OpCreate)
	return &ProjectUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectUser entities.
func (c *ProjectUserClient) CreateBulk(builders ...*ProjectUserCreate) *ProjectUserCreateBulk {
	return &ProjectUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectUserClient) MapCreateBulk(slice any, setFunc func(*ProjectUserCreate, int)) *ProjectUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectUserCreateBulk{err: fmt.Errorf("calling to ProjectUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectUser.
func (c *ProjectUserClient) Update() *ProjectUserUpdate {
	mutation := newProjectUserMutation(c.config, OpUpdate)
	return &ProjectUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectUserClient) UpdateOne(pu *ProjectUser) *ProjectUserUpdateOne {
	mutation := newProjectUserMutation(c.config, OpUpdateOne, withProjectUser(pu))
	return &ProjectUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectUserClient) UpdateOneID(id int) *ProjectUserUpdateOne {
	mutation := newProjectUserMutation(c.config, OpUpdateOne, withProjectUserID(id))
	return &ProjectUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectUser.
func (c *ProjectUserClient) Delete() *ProjectUserDelete {
	mutation := newProjectUserMutation(c.config, OpDelete)
	return &ProjectUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectUserClient) DeleteOne(pu *ProjectUser) *ProjectUserDeleteOne {
	return c.DeleteOneID(pu.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectUserClient) DeleteOneID(id int) *ProjectUserDeleteOne {
	builder := c.Delete().Where(projectuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectUserDeleteOne{builder}
}

// Query returns a query builder for ProjectUser.
func (c *ProjectUserClient) Query() *ProjectUserQuery {
	return &ProjectUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectUser},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectUser entity by its id.
func (c *ProjectUserClient) Get(ctx context.Context, id int) (*ProjectUser, error) {
	return c.Query().Where(projectuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectUserClient) GetX(ctx context.Context, id int) *ProjectUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectUser.
func (c *ProjectUserClient) QueryProject(pu *ProjectUser) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectuser.Table, projectuser.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectuser.ProjectTable, projectuser.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ProjectUser.
func (c *ProjectUserClient) QueryUser(pu *ProjectUser) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := pu.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectuser.Table, projectuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectuser.UserTable, projectuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(pu.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectUserClient) Hooks() []Hook {
	return c.hooks.ProjectUser
}

// Interceptors returns the client interceptors.
func (c *ProjectUserClient) Interceptors() []Interceptor {
	return c.inters.ProjectUser
}

func (c *ProjectUserClient) mutate(ctx context.Context, m *ProjectUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectUser mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectUsers queries the projectUsers edge of a User.
func (c *UserClient) QueryProjectUsers(u *User) *ProjectUserQuery {
	query := (&ProjectUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(projectuser.Table, projectuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProjectUsersTable, user.ProjectUsersColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Audit, AuthConfig, Job, JobHistory, NotificationChannel, Project, ProjectUser,
		User []ent.Hook
	}
	inters struct {
		Audit, AuthConfig, Job, JobHistory, NotificationChannel, Project, ProjectUser,
		User []ent.Interceptor
	}
)
