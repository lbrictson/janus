// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/lbrictson/janus/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lbrictson/janus/ent/audit"
	"github.com/lbrictson/janus/ent/authconfig"
	"github.com/lbrictson/janus/ent/dataconfig"
	"github.com/lbrictson/janus/ent/inboundwebhook"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobconfig"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/notificationchannel"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/projectuser"
	"github.com/lbrictson/janus/ent/secret"
	"github.com/lbrictson/janus/ent/smtpconfig"
	"github.com/lbrictson/janus/ent/user"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Audit is the client for interacting with the Audit builders.
	Audit *AuditClient
	// AuthConfig is the client for interacting with the AuthConfig builders.
	AuthConfig *AuthConfigClient
	// DataConfig is the client for interacting with the DataConfig builders.
	DataConfig *DataConfigClient
	// InboundWebhook is the client for interacting with the InboundWebhook builders.
	InboundWebhook *InboundWebhookClient
	// Job is the client for interacting with the Job builders.
	Job *JobClient
	// JobConfig is the client for interacting with the JobConfig builders.
	JobConfig *JobConfigClient
	// JobHistory is the client for interacting with the JobHistory builders.
	JobHistory *JobHistoryClient
	// JobVersion is the client for interacting with the JobVersion builders.
	JobVersion *JobVersionClient
	// NotificationChannel is the client for interacting with the NotificationChannel builders.
	NotificationChannel *NotificationChannelClient
	// Project is the client for interacting with the Project builders.
	Project *ProjectClient
	// ProjectUser is the client for interacting with the ProjectUser builders.
	ProjectUser *ProjectUserClient
	// SMTPConfig is the client for interacting with the SMTPConfig builders.
	SMTPConfig *SMTPConfigClient
	// Secret is the client for interacting with the Secret builders.
	Secret *SecretClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Audit = NewAuditClient(c.config)
	c.AuthConfig = NewAuthConfigClient(c.config)
	c.DataConfig = NewDataConfigClient(c.config)
	c.InboundWebhook = NewInboundWebhookClient(c.config)
	c.Job = NewJobClient(c.config)
	c.JobConfig = NewJobConfigClient(c.config)
	c.JobHistory = NewJobHistoryClient(c.config)
	c.JobVersion = NewJobVersionClient(c.config)
	c.NotificationChannel = NewNotificationChannelClient(c.config)
	c.Project = NewProjectClient(c.config)
	c.ProjectUser = NewProjectUserClient(c.config)
	c.SMTPConfig = NewSMTPConfigClient(c.config)
	c.Secret = NewSecretClient(c.config)
	c.User = NewUserClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Audit:               NewAuditClient(cfg),
		AuthConfig:          NewAuthConfigClient(cfg),
		DataConfig:          NewDataConfigClient(cfg),
		InboundWebhook:      NewInboundWebhookClient(cfg),
		Job:                 NewJobClient(cfg),
		JobConfig:           NewJobConfigClient(cfg),
		JobHistory:          NewJobHistoryClient(cfg),
		JobVersion:          NewJobVersionClient(cfg),
		NotificationChannel: NewNotificationChannelClient(cfg),
		Project:             NewProjectClient(cfg),
		ProjectUser:         NewProjectUserClient(cfg),
		SMTPConfig:          NewSMTPConfigClient(cfg),
		Secret:              NewSecretClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:                 ctx,
		config:              cfg,
		Audit:               NewAuditClient(cfg),
		AuthConfig:          NewAuthConfigClient(cfg),
		DataConfig:          NewDataConfigClient(cfg),
		InboundWebhook:      NewInboundWebhookClient(cfg),
		Job:                 NewJobClient(cfg),
		JobConfig:           NewJobConfigClient(cfg),
		JobHistory:          NewJobHistoryClient(cfg),
		JobVersion:          NewJobVersionClient(cfg),
		NotificationChannel: NewNotificationChannelClient(cfg),
		Project:             NewProjectClient(cfg),
		ProjectUser:         NewProjectUserClient(cfg),
		SMTPConfig:          NewSMTPConfigClient(cfg),
		Secret:              NewSecretClient(cfg),
		User:                NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Audit.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	for _, n := range []interface{ Use(...Hook) }{
		c.Audit, c.AuthConfig, c.DataConfig, c.InboundWebhook, c.Job, c.JobConfig,
		c.JobHistory, c.JobVersion, c.NotificationChannel, c.Project, c.ProjectUser,
		c.SMTPConfig, c.Secret, c.User,
	} {
		n.Use(hooks...)
	}
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	for _, n := range []interface{ Intercept(...Interceptor) }{
		c.Audit, c.AuthConfig, c.DataConfig, c.InboundWebhook, c.Job, c.JobConfig,
		c.JobHistory, c.JobVersion, c.NotificationChannel, c.Project, c.ProjectUser,
		c.SMTPConfig, c.Secret, c.User,
	} {
		n.Intercept(interceptors...)
	}
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *AuditMutation:
		return c.Audit.mutate(ctx, m)
	case *AuthConfigMutation:
		return c.AuthConfig.mutate(ctx, m)
	case *DataConfigMutation:
		return c.DataConfig.mutate(ctx, m)
	case *InboundWebhookMutation:
		return c.InboundWebhook.mutate(ctx, m)
	case *JobMutation:
		return c.Job.mutate(ctx, m)
	case *JobConfigMutation:
		return c.JobConfig.mutate(ctx, m)
	case *JobHistoryMutation:
		return c.JobHistory.mutate(ctx, m)
	case *JobVersionMutation:
		return c.JobVersion.mutate(ctx, m)
	case *NotificationChannelMutation:
		return c.NotificationChannel.mutate(ctx, m)
	case *ProjectMutation:
		return c.Project.mutate(ctx, m)
	case *ProjectUserMutation:
		return c.ProjectUser.mutate(ctx, m)
	case *SMTPConfigMutation:
		return c.SMTPConfig.mutate(ctx, m)
	case *SecretMutation:
		return c.Secret.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// AuditClient is a client for the Audit schema.
type AuditClient struct {
	config
}

// NewAuditClient returns a client for the Audit from the given config.
func NewAuditClient(c config) *AuditClient {
	return &AuditClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `audit.Hooks(f(g(h())))`.
func (c *AuditClient) Use(hooks ...Hook) {
	c.hooks.Audit = append(c.hooks.Audit, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `audit.Intercept(f(g(h())))`.
func (c *AuditClient) Intercept(interceptors ...Interceptor) {
	c.inters.Audit = append(c.inters.Audit, interceptors...)
}

// Create returns a builder for creating a Audit entity.
func (c *AuditClient) Create() *AuditCreate {
	mutation := newAuditMutation(c.config, OpCreate)
	return &AuditCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Audit entities.
func (c *AuditClient) CreateBulk(builders ...*AuditCreate) *AuditCreateBulk {
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuditClient) MapCreateBulk(slice any, setFunc func(*AuditCreate, int)) *AuditCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuditCreateBulk{err: fmt.Errorf("calling to AuditClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuditCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuditCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Audit.
func (c *AuditClient) Update() *AuditUpdate {
	mutation := newAuditMutation(c.config, OpUpdate)
	return &AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuditClient) UpdateOne(_m *Audit) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAudit(_m))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuditClient) UpdateOneID(id int) *AuditUpdateOne {
	mutation := newAuditMutation(c.config, OpUpdateOne, withAuditID(id))
	return &AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Audit.
func (c *AuditClient) Delete() *AuditDelete {
	mutation := newAuditMutation(c.config, OpDelete)
	return &AuditDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuditClient) DeleteOne(_m *Audit) *AuditDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuditClient) DeleteOneID(id int) *AuditDeleteOne {
	builder := c.Delete().Where(audit.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuditDeleteOne{builder}
}

// Query returns a query builder for Audit.
func (c *AuditClient) Query() *AuditQuery {
	return &AuditQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAudit},
		inters: c.Interceptors(),
	}
}

// Get returns a Audit entity by its id.
func (c *AuditClient) Get(ctx context.Context, id int) (*Audit, error) {
	return c.Query().Where(audit.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuditClient) GetX(ctx context.Context, id int) *Audit {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuditClient) Hooks() []Hook {
	return c.hooks.Audit
}

// Interceptors returns the client interceptors.
func (c *AuditClient) Interceptors() []Interceptor {
	return c.inters.Audit
}

func (c *AuditClient) mutate(ctx context.Context, m *AuditMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuditCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuditUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuditUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuditDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Audit mutation op: %q", m.Op())
	}
}

// AuthConfigClient is a client for the AuthConfig schema.
type AuthConfigClient struct {
	config
}

// NewAuthConfigClient returns a client for the AuthConfig from the given config.
func NewAuthConfigClient(c config) *AuthConfigClient {
	return &AuthConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `authconfig.Hooks(f(g(h())))`.
func (c *AuthConfigClient) Use(hooks ...Hook) {
	c.hooks.AuthConfig = append(c.hooks.AuthConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `authconfig.Intercept(f(g(h())))`.
func (c *AuthConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.AuthConfig = append(c.inters.AuthConfig, interceptors...)
}

// Create returns a builder for creating a AuthConfig entity.
func (c *AuthConfigClient) Create() *AuthConfigCreate {
	mutation := newAuthConfigMutation(c.config, OpCreate)
	return &AuthConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of AuthConfig entities.
func (c *AuthConfigClient) CreateBulk(builders ...*AuthConfigCreate) *AuthConfigCreateBulk {
	return &AuthConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *AuthConfigClient) MapCreateBulk(slice any, setFunc func(*AuthConfigCreate, int)) *AuthConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &AuthConfigCreateBulk{err: fmt.Errorf("calling to AuthConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*AuthConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &AuthConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for AuthConfig.
func (c *AuthConfigClient) Update() *AuthConfigUpdate {
	mutation := newAuthConfigMutation(c.config, OpUpdate)
	return &AuthConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *AuthConfigClient) UpdateOne(_m *AuthConfig) *AuthConfigUpdateOne {
	mutation := newAuthConfigMutation(c.config, OpUpdateOne, withAuthConfig(_m))
	return &AuthConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *AuthConfigClient) UpdateOneID(id int) *AuthConfigUpdateOne {
	mutation := newAuthConfigMutation(c.config, OpUpdateOne, withAuthConfigID(id))
	return &AuthConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for AuthConfig.
func (c *AuthConfigClient) Delete() *AuthConfigDelete {
	mutation := newAuthConfigMutation(c.config, OpDelete)
	return &AuthConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *AuthConfigClient) DeleteOne(_m *AuthConfig) *AuthConfigDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *AuthConfigClient) DeleteOneID(id int) *AuthConfigDeleteOne {
	builder := c.Delete().Where(authconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &AuthConfigDeleteOne{builder}
}

// Query returns a query builder for AuthConfig.
func (c *AuthConfigClient) Query() *AuthConfigQuery {
	return &AuthConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeAuthConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a AuthConfig entity by its id.
func (c *AuthConfigClient) Get(ctx context.Context, id int) (*AuthConfig, error) {
	return c.Query().Where(authconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *AuthConfigClient) GetX(ctx context.Context, id int) *AuthConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *AuthConfigClient) Hooks() []Hook {
	return c.hooks.AuthConfig
}

// Interceptors returns the client interceptors.
func (c *AuthConfigClient) Interceptors() []Interceptor {
	return c.inters.AuthConfig
}

func (c *AuthConfigClient) mutate(ctx context.Context, m *AuthConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&AuthConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&AuthConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&AuthConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&AuthConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown AuthConfig mutation op: %q", m.Op())
	}
}

// DataConfigClient is a client for the DataConfig schema.
type DataConfigClient struct {
	config
}

// NewDataConfigClient returns a client for the DataConfig from the given config.
func NewDataConfigClient(c config) *DataConfigClient {
	return &DataConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `dataconfig.Hooks(f(g(h())))`.
func (c *DataConfigClient) Use(hooks ...Hook) {
	c.hooks.DataConfig = append(c.hooks.DataConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `dataconfig.Intercept(f(g(h())))`.
func (c *DataConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.DataConfig = append(c.inters.DataConfig, interceptors...)
}

// Create returns a builder for creating a DataConfig entity.
func (c *DataConfigClient) Create() *DataConfigCreate {
	mutation := newDataConfigMutation(c.config, OpCreate)
	return &DataConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of DataConfig entities.
func (c *DataConfigClient) CreateBulk(builders ...*DataConfigCreate) *DataConfigCreateBulk {
	return &DataConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *DataConfigClient) MapCreateBulk(slice any, setFunc func(*DataConfigCreate, int)) *DataConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &DataConfigCreateBulk{err: fmt.Errorf("calling to DataConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*DataConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &DataConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for DataConfig.
func (c *DataConfigClient) Update() *DataConfigUpdate {
	mutation := newDataConfigMutation(c.config, OpUpdate)
	return &DataConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *DataConfigClient) UpdateOne(_m *DataConfig) *DataConfigUpdateOne {
	mutation := newDataConfigMutation(c.config, OpUpdateOne, withDataConfig(_m))
	return &DataConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *DataConfigClient) UpdateOneID(id int) *DataConfigUpdateOne {
	mutation := newDataConfigMutation(c.config, OpUpdateOne, withDataConfigID(id))
	return &DataConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for DataConfig.
func (c *DataConfigClient) Delete() *DataConfigDelete {
	mutation := newDataConfigMutation(c.config, OpDelete)
	return &DataConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *DataConfigClient) DeleteOne(_m *DataConfig) *DataConfigDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *DataConfigClient) DeleteOneID(id int) *DataConfigDeleteOne {
	builder := c.Delete().Where(dataconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &DataConfigDeleteOne{builder}
}

// Query returns a query builder for DataConfig.
func (c *DataConfigClient) Query() *DataConfigQuery {
	return &DataConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeDataConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a DataConfig entity by its id.
func (c *DataConfigClient) Get(ctx context.Context, id int) (*DataConfig, error) {
	return c.Query().Where(dataconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *DataConfigClient) GetX(ctx context.Context, id int) *DataConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *DataConfigClient) Hooks() []Hook {
	return c.hooks.DataConfig
}

// Interceptors returns the client interceptors.
func (c *DataConfigClient) Interceptors() []Interceptor {
	return c.inters.DataConfig
}

func (c *DataConfigClient) mutate(ctx context.Context, m *DataConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&DataConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&DataConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&DataConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&DataConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown DataConfig mutation op: %q", m.Op())
	}
}

// InboundWebhookClient is a client for the InboundWebhook schema.
type InboundWebhookClient struct {
	config
}

// NewInboundWebhookClient returns a client for the InboundWebhook from the given config.
func NewInboundWebhookClient(c config) *InboundWebhookClient {
	return &InboundWebhookClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `inboundwebhook.Hooks(f(g(h())))`.
func (c *InboundWebhookClient) Use(hooks ...Hook) {
	c.hooks.InboundWebhook = append(c.hooks.InboundWebhook, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `inboundwebhook.Intercept(f(g(h())))`.
func (c *InboundWebhookClient) Intercept(interceptors ...Interceptor) {
	c.inters.InboundWebhook = append(c.inters.InboundWebhook, interceptors...)
}

// Create returns a builder for creating a InboundWebhook entity.
func (c *InboundWebhookClient) Create() *InboundWebhookCreate {
	mutation := newInboundWebhookMutation(c.config, OpCreate)
	return &InboundWebhookCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of InboundWebhook entities.
func (c *InboundWebhookClient) CreateBulk(builders ...*InboundWebhookCreate) *InboundWebhookCreateBulk {
	return &InboundWebhookCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *InboundWebhookClient) MapCreateBulk(slice any, setFunc func(*InboundWebhookCreate, int)) *InboundWebhookCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &InboundWebhookCreateBulk{err: fmt.Errorf("calling to InboundWebhookClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*InboundWebhookCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &InboundWebhookCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for InboundWebhook.
func (c *InboundWebhookClient) Update() *InboundWebhookUpdate {
	mutation := newInboundWebhookMutation(c.config, OpUpdate)
	return &InboundWebhookUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *InboundWebhookClient) UpdateOne(_m *InboundWebhook) *InboundWebhookUpdateOne {
	mutation := newInboundWebhookMutation(c.config, OpUpdateOne, withInboundWebhook(_m))
	return &InboundWebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *InboundWebhookClient) UpdateOneID(id int) *InboundWebhookUpdateOne {
	mutation := newInboundWebhookMutation(c.config, OpUpdateOne, withInboundWebhookID(id))
	return &InboundWebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for InboundWebhook.
func (c *InboundWebhookClient) Delete() *InboundWebhookDelete {
	mutation := newInboundWebhookMutation(c.config, OpDelete)
	return &InboundWebhookDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *InboundWebhookClient) DeleteOne(_m *InboundWebhook) *InboundWebhookDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *InboundWebhookClient) DeleteOneID(id int) *InboundWebhookDeleteOne {
	builder := c.Delete().Where(inboundwebhook.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &InboundWebhookDeleteOne{builder}
}

// Query returns a query builder for InboundWebhook.
func (c *InboundWebhookClient) Query() *InboundWebhookQuery {
	return &InboundWebhookQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeInboundWebhook},
		inters: c.Interceptors(),
	}
}

// Get returns a InboundWebhook entity by its id.
func (c *InboundWebhookClient) Get(ctx context.Context, id int) (*InboundWebhook, error) {
	return c.Query().Where(inboundwebhook.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *InboundWebhookClient) GetX(ctx context.Context, id int) *InboundWebhook {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a InboundWebhook.
func (c *InboundWebhookClient) QueryJob(_m *InboundWebhook) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(inboundwebhook.Table, inboundwebhook.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, inboundwebhook.JobTable, inboundwebhook.JobColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *InboundWebhookClient) Hooks() []Hook {
	return c.hooks.InboundWebhook
}

// Interceptors returns the client interceptors.
func (c *InboundWebhookClient) Interceptors() []Interceptor {
	return c.inters.InboundWebhook
}

func (c *InboundWebhookClient) mutate(ctx context.Context, m *InboundWebhookMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&InboundWebhookCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&InboundWebhookUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&InboundWebhookUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&InboundWebhookDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown InboundWebhook mutation op: %q", m.Op())
	}
}

// JobClient is a client for the Job schema.
type JobClient struct {
	config
}

// NewJobClient returns a client for the Job from the given config.
func NewJobClient(c config) *JobClient {
	return &JobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `job.Hooks(f(g(h())))`.
func (c *JobClient) Use(hooks ...Hook) {
	c.hooks.Job = append(c.hooks.Job, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `job.Intercept(f(g(h())))`.
func (c *JobClient) Intercept(interceptors ...Interceptor) {
	c.inters.Job = append(c.inters.Job, interceptors...)
}

// Create returns a builder for creating a Job entity.
func (c *JobClient) Create() *JobCreate {
	mutation := newJobMutation(c.config, OpCreate)
	return &JobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Job entities.
func (c *JobClient) CreateBulk(builders ...*JobCreate) *JobCreateBulk {
	return &JobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobClient) MapCreateBulk(slice any, setFunc func(*JobCreate, int)) *JobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobCreateBulk{err: fmt.Errorf("calling to JobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Job.
func (c *JobClient) Update() *JobUpdate {
	mutation := newJobMutation(c.config, OpUpdate)
	return &JobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobClient) UpdateOne(_m *Job) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJob(_m))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobClient) UpdateOneID(id int) *JobUpdateOne {
	mutation := newJobMutation(c.config, OpUpdateOne, withJobID(id))
	return &JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Job.
func (c *JobClient) Delete() *JobDelete {
	mutation := newJobMutation(c.config, OpDelete)
	return &JobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobClient) DeleteOne(_m *Job) *JobDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobClient) DeleteOneID(id int) *JobDeleteOne {
	builder := c.Delete().Where(job.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobDeleteOne{builder}
}

// Query returns a query builder for Job.
func (c *JobClient) Query() *JobQuery {
	return &JobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJob},
		inters: c.Interceptors(),
	}
}

// Get returns a Job entity by its id.
func (c *JobClient) Get(ctx context.Context, id int) (*Job, error) {
	return c.Query().Where(job.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobClient) GetX(ctx context.Context, id int) *Job {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Job.
func (c *JobClient) QueryProject(_m *Job) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, job.ProjectTable, job.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistory queries the history edge of a Job.
func (c *JobClient) QueryHistory(_m *Job) *JobHistoryQuery {
	query := (&JobHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobhistory.Table, jobhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.HistoryTable, job.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryVersions queries the versions edge of a Job.
func (c *JobClient) QueryVersions(_m *Job) *JobVersionQuery {
	query := (&JobVersionClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(job.Table, job.FieldID, id),
			sqlgraph.To(jobversion.Table, jobversion.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, job.VersionsTable, job.VersionsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobClient) Hooks() []Hook {
	return c.hooks.Job
}

// Interceptors returns the client interceptors.
func (c *JobClient) Interceptors() []Interceptor {
	return c.inters.Job
}

func (c *JobClient) mutate(ctx context.Context, m *JobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Job mutation op: %q", m.Op())
	}
}

// JobConfigClient is a client for the JobConfig schema.
type JobConfigClient struct {
	config
}

// NewJobConfigClient returns a client for the JobConfig from the given config.
func NewJobConfigClient(c config) *JobConfigClient {
	return &JobConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobconfig.Hooks(f(g(h())))`.
func (c *JobConfigClient) Use(hooks ...Hook) {
	c.hooks.JobConfig = append(c.hooks.JobConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobconfig.Intercept(f(g(h())))`.
func (c *JobConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobConfig = append(c.inters.JobConfig, interceptors...)
}

// Create returns a builder for creating a JobConfig entity.
func (c *JobConfigClient) Create() *JobConfigCreate {
	mutation := newJobConfigMutation(c.config, OpCreate)
	return &JobConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobConfig entities.
func (c *JobConfigClient) CreateBulk(builders ...*JobConfigCreate) *JobConfigCreateBulk {
	return &JobConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobConfigClient) MapCreateBulk(slice any, setFunc func(*JobConfigCreate, int)) *JobConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobConfigCreateBulk{err: fmt.Errorf("calling to JobConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobConfig.
func (c *JobConfigClient) Update() *JobConfigUpdate {
	mutation := newJobConfigMutation(c.config, OpUpdate)
	return &JobConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobConfigClient) UpdateOne(_m *JobConfig) *JobConfigUpdateOne {
	mutation := newJobConfigMutation(c.config, OpUpdateOne, withJobConfig(_m))
	return &JobConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobConfigClient) UpdateOneID(id int) *JobConfigUpdateOne {
	mutation := newJobConfigMutation(c.config, OpUpdateOne, withJobConfigID(id))
	return &JobConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobConfig.
func (c *JobConfigClient) Delete() *JobConfigDelete {
	mutation := newJobConfigMutation(c.config, OpDelete)
	return &JobConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobConfigClient) DeleteOne(_m *JobConfig) *JobConfigDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobConfigClient) DeleteOneID(id int) *JobConfigDeleteOne {
	builder := c.Delete().Where(jobconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobConfigDeleteOne{builder}
}

// Query returns a query builder for JobConfig.
func (c *JobConfigClient) Query() *JobConfigQuery {
	return &JobConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a JobConfig entity by its id.
func (c *JobConfigClient) Get(ctx context.Context, id int) (*JobConfig, error) {
	return c.Query().Where(jobconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobConfigClient) GetX(ctx context.Context, id int) *JobConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *JobConfigClient) Hooks() []Hook {
	return c.hooks.JobConfig
}

// Interceptors returns the client interceptors.
func (c *JobConfigClient) Interceptors() []Interceptor {
	return c.inters.JobConfig
}

func (c *JobConfigClient) mutate(ctx context.Context, m *JobConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobConfig mutation op: %q", m.Op())
	}
}

// JobHistoryClient is a client for the JobHistory schema.
type JobHistoryClient struct {
	config
}

// NewJobHistoryClient returns a client for the JobHistory from the given config.
func NewJobHistoryClient(c config) *JobHistoryClient {
	return &JobHistoryClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobhistory.Hooks(f(g(h())))`.
func (c *JobHistoryClient) Use(hooks ...Hook) {
	c.hooks.JobHistory = append(c.hooks.JobHistory, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobhistory.Intercept(f(g(h())))`.
func (c *JobHistoryClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobHistory = append(c.inters.JobHistory, interceptors...)
}

// Create returns a builder for creating a JobHistory entity.
func (c *JobHistoryClient) Create() *JobHistoryCreate {
	mutation := newJobHistoryMutation(c.config, OpCreate)
	return &JobHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobHistory entities.
func (c *JobHistoryClient) CreateBulk(builders ...*JobHistoryCreate) *JobHistoryCreateBulk {
	return &JobHistoryCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobHistoryClient) MapCreateBulk(slice any, setFunc func(*JobHistoryCreate, int)) *JobHistoryCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobHistoryCreateBulk{err: fmt.Errorf("calling to JobHistoryClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobHistoryCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobHistoryCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobHistory.
func (c *JobHistoryClient) Update() *JobHistoryUpdate {
	mutation := newJobHistoryMutation(c.config, OpUpdate)
	return &JobHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobHistoryClient) UpdateOne(_m *JobHistory) *JobHistoryUpdateOne {
	mutation := newJobHistoryMutation(c.config, OpUpdateOne, withJobHistory(_m))
	return &JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobHistoryClient) UpdateOneID(id int) *JobHistoryUpdateOne {
	mutation := newJobHistoryMutation(c.config, OpUpdateOne, withJobHistoryID(id))
	return &JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobHistory.
func (c *JobHistoryClient) Delete() *JobHistoryDelete {
	mutation := newJobHistoryMutation(c.config, OpDelete)
	return &JobHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobHistoryClient) DeleteOne(_m *JobHistory) *JobHistoryDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobHistoryClient) DeleteOneID(id int) *JobHistoryDeleteOne {
	builder := c.Delete().Where(jobhistory.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobHistoryDeleteOne{builder}
}

// Query returns a query builder for JobHistory.
func (c *JobHistoryClient) Query() *JobHistoryQuery {
	return &JobHistoryQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobHistory},
		inters: c.Interceptors(),
	}
}

// Get returns a JobHistory entity by its id.
func (c *JobHistoryClient) Get(ctx context.Context, id int) (*JobHistory, error) {
	return c.Query().Where(jobhistory.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobHistoryClient) GetX(ctx context.Context, id int) *JobHistory {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a JobHistory.
func (c *JobHistoryClient) QueryProject(_m *JobHistory) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobhistory.Table, jobhistory.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobhistory.ProjectTable, jobhistory.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJob queries the job edge of a JobHistory.
func (c *JobHistoryClient) QueryJob(_m *JobHistory) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobhistory.Table, jobhistory.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobhistory.JobTable, jobhistory.JobColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobHistoryClient) Hooks() []Hook {
	return c.hooks.JobHistory
}

// Interceptors returns the client interceptors.
func (c *JobHistoryClient) Interceptors() []Interceptor {
	return c.inters.JobHistory
}

func (c *JobHistoryClient) mutate(ctx context.Context, m *JobHistoryMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobHistoryCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobHistoryUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobHistoryUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobHistoryDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobHistory mutation op: %q", m.Op())
	}
}

// JobVersionClient is a client for the JobVersion schema.
type JobVersionClient struct {
	config
}

// NewJobVersionClient returns a client for the JobVersion from the given config.
func NewJobVersionClient(c config) *JobVersionClient {
	return &JobVersionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `jobversion.Hooks(f(g(h())))`.
func (c *JobVersionClient) Use(hooks ...Hook) {
	c.hooks.JobVersion = append(c.hooks.JobVersion, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `jobversion.Intercept(f(g(h())))`.
func (c *JobVersionClient) Intercept(interceptors ...Interceptor) {
	c.inters.JobVersion = append(c.inters.JobVersion, interceptors...)
}

// Create returns a builder for creating a JobVersion entity.
func (c *JobVersionClient) Create() *JobVersionCreate {
	mutation := newJobVersionMutation(c.config, OpCreate)
	return &JobVersionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of JobVersion entities.
func (c *JobVersionClient) CreateBulk(builders ...*JobVersionCreate) *JobVersionCreateBulk {
	return &JobVersionCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *JobVersionClient) MapCreateBulk(slice any, setFunc func(*JobVersionCreate, int)) *JobVersionCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &JobVersionCreateBulk{err: fmt.Errorf("calling to JobVersionClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*JobVersionCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &JobVersionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for JobVersion.
func (c *JobVersionClient) Update() *JobVersionUpdate {
	mutation := newJobVersionMutation(c.config, OpUpdate)
	return &JobVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *JobVersionClient) UpdateOne(_m *JobVersion) *JobVersionUpdateOne {
	mutation := newJobVersionMutation(c.config, OpUpdateOne, withJobVersion(_m))
	return &JobVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *JobVersionClient) UpdateOneID(id int) *JobVersionUpdateOne {
	mutation := newJobVersionMutation(c.config, OpUpdateOne, withJobVersionID(id))
	return &JobVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for JobVersion.
func (c *JobVersionClient) Delete() *JobVersionDelete {
	mutation := newJobVersionMutation(c.config, OpDelete)
	return &JobVersionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *JobVersionClient) DeleteOne(_m *JobVersion) *JobVersionDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *JobVersionClient) DeleteOneID(id int) *JobVersionDeleteOne {
	builder := c.Delete().Where(jobversion.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &JobVersionDeleteOne{builder}
}

// Query returns a query builder for JobVersion.
func (c *JobVersionClient) Query() *JobVersionQuery {
	return &JobVersionQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeJobVersion},
		inters: c.Interceptors(),
	}
}

// Get returns a JobVersion entity by its id.
func (c *JobVersionClient) Get(ctx context.Context, id int) (*JobVersion, error) {
	return c.Query().Where(jobversion.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *JobVersionClient) GetX(ctx context.Context, id int) *JobVersion {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryJob queries the job edge of a JobVersion.
func (c *JobVersionClient) QueryJob(_m *JobVersion) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(jobversion.Table, jobversion.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, jobversion.JobTable, jobversion.JobColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *JobVersionClient) Hooks() []Hook {
	return c.hooks.JobVersion
}

// Interceptors returns the client interceptors.
func (c *JobVersionClient) Interceptors() []Interceptor {
	return c.inters.JobVersion
}

func (c *JobVersionClient) mutate(ctx context.Context, m *JobVersionMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&JobVersionCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&JobVersionUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&JobVersionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&JobVersionDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown JobVersion mutation op: %q", m.Op())
	}
}

// NotificationChannelClient is a client for the NotificationChannel schema.
type NotificationChannelClient struct {
	config
}

// NewNotificationChannelClient returns a client for the NotificationChannel from the given config.
func NewNotificationChannelClient(c config) *NotificationChannelClient {
	return &NotificationChannelClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `notificationchannel.Hooks(f(g(h())))`.
func (c *NotificationChannelClient) Use(hooks ...Hook) {
	c.hooks.NotificationChannel = append(c.hooks.NotificationChannel, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `notificationchannel.Intercept(f(g(h())))`.
func (c *NotificationChannelClient) Intercept(interceptors ...Interceptor) {
	c.inters.NotificationChannel = append(c.inters.NotificationChannel, interceptors...)
}

// Create returns a builder for creating a NotificationChannel entity.
func (c *NotificationChannelClient) Create() *NotificationChannelCreate {
	mutation := newNotificationChannelMutation(c.config, OpCreate)
	return &NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NotificationChannel entities.
func (c *NotificationChannelClient) CreateBulk(builders ...*NotificationChannelCreate) *NotificationChannelCreateBulk {
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *NotificationChannelClient) MapCreateBulk(slice any, setFunc func(*NotificationChannelCreate, int)) *NotificationChannelCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &NotificationChannelCreateBulk{err: fmt.Errorf("calling to NotificationChannelClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*NotificationChannelCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &NotificationChannelCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NotificationChannel.
func (c *NotificationChannelClient) Update() *NotificationChannelUpdate {
	mutation := newNotificationChannelMutation(c.config, OpUpdate)
	return &NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NotificationChannelClient) UpdateOne(_m *NotificationChannel) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannel(_m))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NotificationChannelClient) UpdateOneID(id int) *NotificationChannelUpdateOne {
	mutation := newNotificationChannelMutation(c.config, OpUpdateOne, withNotificationChannelID(id))
	return &NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NotificationChannel.
func (c *NotificationChannelClient) Delete() *NotificationChannelDelete {
	mutation := newNotificationChannelMutation(c.config, OpDelete)
	return &NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NotificationChannelClient) DeleteOne(_m *NotificationChannel) *NotificationChannelDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *NotificationChannelClient) DeleteOneID(id int) *NotificationChannelDeleteOne {
	builder := c.Delete().Where(notificationchannel.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NotificationChannelDeleteOne{builder}
}

// Query returns a query builder for NotificationChannel.
func (c *NotificationChannelClient) Query() *NotificationChannelQuery {
	return &NotificationChannelQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeNotificationChannel},
		inters: c.Interceptors(),
	}
}

// Get returns a NotificationChannel entity by its id.
func (c *NotificationChannelClient) Get(ctx context.Context, id int) (*NotificationChannel, error) {
	return c.Query().Where(notificationchannel.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NotificationChannelClient) GetX(ctx context.Context, id int) *NotificationChannel {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NotificationChannelClient) Hooks() []Hook {
	return c.hooks.NotificationChannel
}

// Interceptors returns the client interceptors.
func (c *NotificationChannelClient) Interceptors() []Interceptor {
	return c.inters.NotificationChannel
}

func (c *NotificationChannelClient) mutate(ctx context.Context, m *NotificationChannelMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&NotificationChannelCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&NotificationChannelUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&NotificationChannelUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&NotificationChannelDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown NotificationChannel mutation op: %q", m.Op())
	}
}

// ProjectClient is a client for the Project schema.
type ProjectClient struct {
	config
}

// NewProjectClient returns a client for the Project from the given config.
func NewProjectClient(c config) *ProjectClient {
	return &ProjectClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `project.Hooks(f(g(h())))`.
func (c *ProjectClient) Use(hooks ...Hook) {
	c.hooks.Project = append(c.hooks.Project, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `project.Intercept(f(g(h())))`.
func (c *ProjectClient) Intercept(interceptors ...Interceptor) {
	c.inters.Project = append(c.inters.Project, interceptors...)
}

// Create returns a builder for creating a Project entity.
func (c *ProjectClient) Create() *ProjectCreate {
	mutation := newProjectMutation(c.config, OpCreate)
	return &ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Project entities.
func (c *ProjectClient) CreateBulk(builders ...*ProjectCreate) *ProjectCreateBulk {
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectClient) MapCreateBulk(slice any, setFunc func(*ProjectCreate, int)) *ProjectCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectCreateBulk{err: fmt.Errorf("calling to ProjectClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Project.
func (c *ProjectClient) Update() *ProjectUpdate {
	mutation := newProjectMutation(c.config, OpUpdate)
	return &ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectClient) UpdateOne(_m *Project) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProject(_m))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectClient) UpdateOneID(id int) *ProjectUpdateOne {
	mutation := newProjectMutation(c.config, OpUpdateOne, withProjectID(id))
	return &ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Project.
func (c *ProjectClient) Delete() *ProjectDelete {
	mutation := newProjectMutation(c.config, OpDelete)
	return &ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectClient) DeleteOne(_m *Project) *ProjectDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectClient) DeleteOneID(id int) *ProjectDeleteOne {
	builder := c.Delete().Where(project.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectDeleteOne{builder}
}

// Query returns a query builder for Project.
func (c *ProjectClient) Query() *ProjectQuery {
	return &ProjectQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProject},
		inters: c.Interceptors(),
	}
}

// Get returns a Project entity by its id.
func (c *ProjectClient) Get(ctx context.Context, id int) (*Project, error) {
	return c.Query().Where(project.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectClient) GetX(ctx context.Context, id int) *Project {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectUsers queries the projectUsers edge of a Project.
func (c *ProjectClient) QueryProjectUsers(_m *Project) *ProjectUserQuery {
	query := (&ProjectUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(projectuser.Table, projectuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.ProjectUsersTable, project.ProjectUsersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryJobs queries the jobs edge of a Project.
func (c *ProjectClient) QueryJobs(_m *Project) *JobQuery {
	query := (&JobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(job.Table, job.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.JobsTable, project.JobsColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryHistory queries the history edge of a Project.
func (c *ProjectClient) QueryHistory(_m *Project) *JobHistoryQuery {
	query := (&JobHistoryClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(project.Table, project.FieldID, id),
			sqlgraph.To(jobhistory.Table, jobhistory.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, project.HistoryTable, project.HistoryColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectClient) Hooks() []Hook {
	return c.hooks.Project
}

// Interceptors returns the client interceptors.
func (c *ProjectClient) Interceptors() []Interceptor {
	return c.inters.Project
}

func (c *ProjectClient) mutate(ctx context.Context, m *ProjectMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Project mutation op: %q", m.Op())
	}
}

// ProjectUserClient is a client for the ProjectUser schema.
type ProjectUserClient struct {
	config
}

// NewProjectUserClient returns a client for the ProjectUser from the given config.
func NewProjectUserClient(c config) *ProjectUserClient {
	return &ProjectUserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `projectuser.Hooks(f(g(h())))`.
func (c *ProjectUserClient) Use(hooks ...Hook) {
	c.hooks.ProjectUser = append(c.hooks.ProjectUser, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `projectuser.Intercept(f(g(h())))`.
func (c *ProjectUserClient) Intercept(interceptors ...Interceptor) {
	c.inters.ProjectUser = append(c.inters.ProjectUser, interceptors...)
}

// Create returns a builder for creating a ProjectUser entity.
func (c *ProjectUserClient) Create() *ProjectUserCreate {
	mutation := newProjectUserMutation(c.config, OpCreate)
	return &ProjectUserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProjectUser entities.
func (c *ProjectUserClient) CreateBulk(builders ...*ProjectUserCreate) *ProjectUserCreateBulk {
	return &ProjectUserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *ProjectUserClient) MapCreateBulk(slice any, setFunc func(*ProjectUserCreate, int)) *ProjectUserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &ProjectUserCreateBulk{err: fmt.Errorf("calling to ProjectUserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*ProjectUserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &ProjectUserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProjectUser.
func (c *ProjectUserClient) Update() *ProjectUserUpdate {
	mutation := newProjectUserMutation(c.config, OpUpdate)
	return &ProjectUserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProjectUserClient) UpdateOne(_m *ProjectUser) *ProjectUserUpdateOne {
	mutation := newProjectUserMutation(c.config, OpUpdateOne, withProjectUser(_m))
	return &ProjectUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProjectUserClient) UpdateOneID(id int) *ProjectUserUpdateOne {
	mutation := newProjectUserMutation(c.config, OpUpdateOne, withProjectUserID(id))
	return &ProjectUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProjectUser.
func (c *ProjectUserClient) Delete() *ProjectUserDelete {
	mutation := newProjectUserMutation(c.config, OpDelete)
	return &ProjectUserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProjectUserClient) DeleteOne(_m *ProjectUser) *ProjectUserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *ProjectUserClient) DeleteOneID(id int) *ProjectUserDeleteOne {
	builder := c.Delete().Where(projectuser.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProjectUserDeleteOne{builder}
}

// Query returns a query builder for ProjectUser.
func (c *ProjectUserClient) Query() *ProjectUserQuery {
	return &ProjectUserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeProjectUser},
		inters: c.Interceptors(),
	}
}

// Get returns a ProjectUser entity by its id.
func (c *ProjectUserClient) Get(ctx context.Context, id int) (*ProjectUser, error) {
	return c.Query().Where(projectuser.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProjectUserClient) GetX(ctx context.Context, id int) *ProjectUser {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a ProjectUser.
func (c *ProjectUserClient) QueryProject(_m *ProjectUser) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectuser.Table, projectuser.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectuser.ProjectTable, projectuser.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryUser queries the user edge of a ProjectUser.
func (c *ProjectUserClient) QueryUser(_m *ProjectUser) *UserQuery {
	query := (&UserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(projectuser.Table, projectuser.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, projectuser.UserTable, projectuser.UserColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *ProjectUserClient) Hooks() []Hook {
	return c.hooks.ProjectUser
}

// Interceptors returns the client interceptors.
func (c *ProjectUserClient) Interceptors() []Interceptor {
	return c.inters.ProjectUser
}

func (c *ProjectUserClient) mutate(ctx context.Context, m *ProjectUserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&ProjectUserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&ProjectUserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&ProjectUserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&ProjectUserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown ProjectUser mutation op: %q", m.Op())
	}
}

// SMTPConfigClient is a client for the SMTPConfig schema.
type SMTPConfigClient struct {
	config
}

// NewSMTPConfigClient returns a client for the SMTPConfig from the given config.
func NewSMTPConfigClient(c config) *SMTPConfigClient {
	return &SMTPConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `smtpconfig.Hooks(f(g(h())))`.
func (c *SMTPConfigClient) Use(hooks ...Hook) {
	c.hooks.SMTPConfig = append(c.hooks.SMTPConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `smtpconfig.Intercept(f(g(h())))`.
func (c *SMTPConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.SMTPConfig = append(c.inters.SMTPConfig, interceptors...)
}

// Create returns a builder for creating a SMTPConfig entity.
func (c *SMTPConfigClient) Create() *SMTPConfigCreate {
	mutation := newSMTPConfigMutation(c.config, OpCreate)
	return &SMTPConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SMTPConfig entities.
func (c *SMTPConfigClient) CreateBulk(builders ...*SMTPConfigCreate) *SMTPConfigCreateBulk {
	return &SMTPConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SMTPConfigClient) MapCreateBulk(slice any, setFunc func(*SMTPConfigCreate, int)) *SMTPConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SMTPConfigCreateBulk{err: fmt.Errorf("calling to SMTPConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SMTPConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SMTPConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SMTPConfig.
func (c *SMTPConfigClient) Update() *SMTPConfigUpdate {
	mutation := newSMTPConfigMutation(c.config, OpUpdate)
	return &SMTPConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SMTPConfigClient) UpdateOne(_m *SMTPConfig) *SMTPConfigUpdateOne {
	mutation := newSMTPConfigMutation(c.config, OpUpdateOne, withSMTPConfig(_m))
	return &SMTPConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SMTPConfigClient) UpdateOneID(id int) *SMTPConfigUpdateOne {
	mutation := newSMTPConfigMutation(c.config, OpUpdateOne, withSMTPConfigID(id))
	return &SMTPConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SMTPConfig.
func (c *SMTPConfigClient) Delete() *SMTPConfigDelete {
	mutation := newSMTPConfigMutation(c.config, OpDelete)
	return &SMTPConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SMTPConfigClient) DeleteOne(_m *SMTPConfig) *SMTPConfigDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SMTPConfigClient) DeleteOneID(id int) *SMTPConfigDeleteOne {
	builder := c.Delete().Where(smtpconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SMTPConfigDeleteOne{builder}
}

// Query returns a query builder for SMTPConfig.
func (c *SMTPConfigClient) Query() *SMTPConfigQuery {
	return &SMTPConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSMTPConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a SMTPConfig entity by its id.
func (c *SMTPConfigClient) Get(ctx context.Context, id int) (*SMTPConfig, error) {
	return c.Query().Where(smtpconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SMTPConfigClient) GetX(ctx context.Context, id int) *SMTPConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *SMTPConfigClient) Hooks() []Hook {
	return c.hooks.SMTPConfig
}

// Interceptors returns the client interceptors.
func (c *SMTPConfigClient) Interceptors() []Interceptor {
	return c.inters.SMTPConfig
}

func (c *SMTPConfigClient) mutate(ctx context.Context, m *SMTPConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SMTPConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SMTPConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SMTPConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SMTPConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SMTPConfig mutation op: %q", m.Op())
	}
}

// SecretClient is a client for the Secret schema.
type SecretClient struct {
	config
}

// NewSecretClient returns a client for the Secret from the given config.
func NewSecretClient(c config) *SecretClient {
	return &SecretClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `secret.Hooks(f(g(h())))`.
func (c *SecretClient) Use(hooks ...Hook) {
	c.hooks.Secret = append(c.hooks.Secret, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `secret.Intercept(f(g(h())))`.
func (c *SecretClient) Intercept(interceptors ...Interceptor) {
	c.inters.Secret = append(c.inters.Secret, interceptors...)
}

// Create returns a builder for creating a Secret entity.
func (c *SecretClient) Create() *SecretCreate {
	mutation := newSecretMutation(c.config, OpCreate)
	return &SecretCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Secret entities.
func (c *SecretClient) CreateBulk(builders ...*SecretCreate) *SecretCreateBulk {
	return &SecretCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SecretClient) MapCreateBulk(slice any, setFunc func(*SecretCreate, int)) *SecretCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SecretCreateBulk{err: fmt.Errorf("calling to SecretClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SecretCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SecretCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Secret.
func (c *SecretClient) Update() *SecretUpdate {
	mutation := newSecretMutation(c.config, OpUpdate)
	return &SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SecretClient) UpdateOne(_m *Secret) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecret(_m))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SecretClient) UpdateOneID(id int) *SecretUpdateOne {
	mutation := newSecretMutation(c.config, OpUpdateOne, withSecretID(id))
	return &SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Secret.
func (c *SecretClient) Delete() *SecretDelete {
	mutation := newSecretMutation(c.config, OpDelete)
	return &SecretDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SecretClient) DeleteOne(_m *Secret) *SecretDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SecretClient) DeleteOneID(id int) *SecretDeleteOne {
	builder := c.Delete().Where(secret.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SecretDeleteOne{builder}
}

// Query returns a query builder for Secret.
func (c *SecretClient) Query() *SecretQuery {
	return &SecretQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSecret},
		inters: c.Interceptors(),
	}
}

// Get returns a Secret entity by its id.
func (c *SecretClient) Get(ctx context.Context, id int) (*Secret, error) {
	return c.Query().Where(secret.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SecretClient) GetX(ctx context.Context, id int) *Secret {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProject queries the project edge of a Secret.
func (c *SecretClient) QueryProject(_m *Secret) *ProjectQuery {
	query := (&ProjectClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(secret.Table, secret.FieldID, id),
			sqlgraph.To(project.Table, project.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, secret.ProjectTable, secret.ProjectColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SecretClient) Hooks() []Hook {
	return c.hooks.Secret
}

// Interceptors returns the client interceptors.
func (c *SecretClient) Interceptors() []Interceptor {
	return c.inters.Secret
}

func (c *SecretClient) mutate(ctx context.Context, m *SecretMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SecretCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SecretUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SecretUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SecretDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Secret mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(_m *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(_m))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(_m *User) *UserDeleteOne {
	return c.DeleteOneID(_m.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryProjectUsers queries the projectUsers edge of a User.
func (c *UserClient) QueryProjectUsers(_m *User) *ProjectUserQuery {
	query := (&ProjectUserClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := _m.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(projectuser.Table, projectuser.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.ProjectUsersTable, user.ProjectUsersColumn),
		)
		fromV = sqlgraph.Neighbors(_m.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		Audit, AuthConfig, DataConfig, InboundWebhook, Job, JobConfig, JobHistory,
		JobVersion, NotificationChannel, Project, ProjectUser, SMTPConfig, Secret,
		User []ent.Hook
	}
	inters struct {
		Audit, AuthConfig, DataConfig, InboundWebhook, Job, JobConfig, JobHistory,
		JobVersion, NotificationChannel, Project, ProjectUser, SMTPConfig, Secret,
		User []ent.Interceptor
	}
)
