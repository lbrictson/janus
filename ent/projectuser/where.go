// Code generated by ent, DO NOT EDIT.

package projectuser

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lbrictson/janus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldLTE(FieldID, id))
}

// CanEdit applies equality check predicate on the "can_edit" field. It's identical to CanEditEQ.
func CanEdit(v bool) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldEQ(FieldCanEdit, v))
}

// CanEditEQ applies the EQ predicate on the "can_edit" field.
func CanEditEQ(v bool) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldEQ(FieldCanEdit, v))
}

// CanEditNEQ applies the NEQ predicate on the "can_edit" field.
func CanEditNEQ(v bool) predicate.ProjectUser {
	return predicate.ProjectUser(sql.FieldNEQ(FieldCanEdit, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.ProjectUser {
	return predicate.ProjectUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.ProjectUser {
	return predicate.ProjectUser(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.ProjectUser {
	return predicate.ProjectUser(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.ProjectUser {
	return predicate.ProjectUser(func(s *sql.Selector) {
		step := newUserStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProjectUser) predicate.ProjectUser {
	return predicate.ProjectUser(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProjectUser) predicate.ProjectUser {
	return predicate.ProjectUser(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProjectUser) predicate.ProjectUser {
	return predicate.ProjectUser(sql.NotPredicates(p))
}
