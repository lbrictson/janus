// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/authconfig"
	"github.com/lbrictson/janus/ent/predicate"
)

// AuthConfigUpdate is the builder for updating AuthConfig entities.
type AuthConfigUpdate struct {
	config
	hooks    []Hook
	mutation *AuthConfigMutation
}

// Where appends a list predicates to the AuthConfigUpdate builder.
func (_u *AuthConfigUpdate) Where(ps ...predicate.AuthConfig) *AuthConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEnableSSO sets the "enable_sso" field.
func (_u *AuthConfigUpdate) SetEnableSSO(v bool) *AuthConfigUpdate {
	_u.mutation.SetEnableSSO(v)
	return _u
}

// SetNillableEnableSSO sets the "enable_sso" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableEnableSSO(v *bool) *AuthConfigUpdate {
	if v != nil {
		_u.SetEnableSSO(*v)
	}
	return _u
}

// SetDisablePasswordLogin sets the "disable_password_login" field.
func (_u *AuthConfigUpdate) SetDisablePasswordLogin(v bool) *AuthConfigUpdate {
	_u.mutation.SetDisablePasswordLogin(v)
	return _u
}

// SetNillableDisablePasswordLogin sets the "disable_password_login" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableDisablePasswordLogin(v *bool) *AuthConfigUpdate {
	if v != nil {
		_u.SetDisablePasswordLogin(*v)
	}
	return _u
}

// SetSSOProvider sets the "sso_provider" field.
func (_u *AuthConfigUpdate) SetSSOProvider(v string) *AuthConfigUpdate {
	_u.mutation.SetSSOProvider(v)
	return _u
}

// SetNillableSSOProvider sets the "sso_provider" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSOProvider(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSOProvider(*v)
	}
	return _u
}

// SetSSOClientID sets the "sso_client_id" field.
func (_u *AuthConfigUpdate) SetSSOClientID(v string) *AuthConfigUpdate {
	_u.mutation.SetSSOClientID(v)
	return _u
}

// SetNillableSSOClientID sets the "sso_client_id" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSOClientID(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSOClientID(*v)
	}
	return _u
}

// SetSSOClientSecret sets the "sso_client_secret" field.
func (_u *AuthConfigUpdate) SetSSOClientSecret(v string) *AuthConfigUpdate {
	_u.mutation.SetSSOClientSecret(v)
	return _u
}

// SetNillableSSOClientSecret sets the "sso_client_secret" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSOClientSecret(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSOClientSecret(*v)
	}
	return _u
}

// SetSSORedirectURI sets the "sso_redirect_uri" field.
func (_u *AuthConfigUpdate) SetSSORedirectURI(v string) *AuthConfigUpdate {
	_u.mutation.SetSSORedirectURI(v)
	return _u
}

// SetNillableSSORedirectURI sets the "sso_redirect_uri" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSORedirectURI(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSORedirectURI(*v)
	}
	return _u
}

// SetSSOAuthorizationURL sets the "sso_authorization_url" field.
func (_u *AuthConfigUpdate) SetSSOAuthorizationURL(v string) *AuthConfigUpdate {
	_u.mutation.SetSSOAuthorizationURL(v)
	return _u
}

// SetNillableSSOAuthorizationURL sets the "sso_authorization_url" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSOAuthorizationURL(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSOAuthorizationURL(*v)
	}
	return _u
}

// SetSSOTokenURL sets the "sso_token_url" field.
func (_u *AuthConfigUpdate) SetSSOTokenURL(v string) *AuthConfigUpdate {
	_u.mutation.SetSSOTokenURL(v)
	return _u
}

// SetNillableSSOTokenURL sets the "sso_token_url" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSOTokenURL(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSOTokenURL(*v)
	}
	return _u
}

// SetSSOUserInfoURL sets the "sso_user_info_url" field.
func (_u *AuthConfigUpdate) SetSSOUserInfoURL(v string) *AuthConfigUpdate {
	_u.mutation.SetSSOUserInfoURL(v)
	return _u
}

// SetNillableSSOUserInfoURL sets the "sso_user_info_url" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableSSOUserInfoURL(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetSSOUserInfoURL(*v)
	}
	return _u
}

// SetEntraTenantID sets the "entra_tenant_id" field.
func (_u *AuthConfigUpdate) SetEntraTenantID(v string) *AuthConfigUpdate {
	_u.mutation.SetEntraTenantID(v)
	return _u
}

// SetNillableEntraTenantID sets the "entra_tenant_id" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableEntraTenantID(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetEntraTenantID(*v)
	}
	return _u
}

// SetGoogleAllowedDomains sets the "google_allowed_domains" field.
func (_u *AuthConfigUpdate) SetGoogleAllowedDomains(v string) *AuthConfigUpdate {
	_u.mutation.SetGoogleAllowedDomains(v)
	return _u
}

// SetNillableGoogleAllowedDomains sets the "google_allowed_domains" field if the given value is not nil.
func (_u *AuthConfigUpdate) SetNillableGoogleAllowedDomains(v *string) *AuthConfigUpdate {
	if v != nil {
		_u.SetGoogleAllowedDomains(*v)
	}
	return _u
}

// SetSessionKey sets the "session_key" field.
func (_u *AuthConfigUpdate) SetSessionKey(v []byte) *AuthConfigUpdate {
	_u.mutation.SetSessionKey(v)
	return _u
}

// Mutation returns the AuthConfigMutation object of the builder.
func (_u *AuthConfigUpdate) Mutation() *AuthConfigMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *AuthConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *AuthConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authconfig.Table, authconfig.Columns, sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EnableSSO(); ok {
		_spec.SetField(authconfig.FieldEnableSSO, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DisablePasswordLogin(); ok {
		_spec.SetField(authconfig.FieldDisablePasswordLogin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SSOProvider(); ok {
		_spec.SetField(authconfig.FieldSSOProvider, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOClientID(); ok {
		_spec.SetField(authconfig.FieldSSOClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOClientSecret(); ok {
		_spec.SetField(authconfig.FieldSSOClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSORedirectURI(); ok {
		_spec.SetField(authconfig.FieldSSORedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOAuthorizationURL(); ok {
		_spec.SetField(authconfig.FieldSSOAuthorizationURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOTokenURL(); ok {
		_spec.SetField(authconfig.FieldSSOTokenURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOUserInfoURL(); ok {
		_spec.SetField(authconfig.FieldSSOUserInfoURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.EntraTenantID(); ok {
		_spec.SetField(authconfig.FieldEntraTenantID, field.TypeString, value)
	}
	if value, ok := _u.mutation.GoogleAllowedDomains(); ok {
		_spec.SetField(authconfig.FieldGoogleAllowedDomains, field.TypeString, value)
	}
	if value, ok := _u.mutation.SessionKey(); ok {
		_spec.SetField(authconfig.FieldSessionKey, field.TypeBytes, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// AuthConfigUpdateOne is the builder for updating a single AuthConfig entity.
type AuthConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthConfigMutation
}

// SetEnableSSO sets the "enable_sso" field.
func (_u *AuthConfigUpdateOne) SetEnableSSO(v bool) *AuthConfigUpdateOne {
	_u.mutation.SetEnableSSO(v)
	return _u
}

// SetNillableEnableSSO sets the "enable_sso" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableEnableSSO(v *bool) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetEnableSSO(*v)
	}
	return _u
}

// SetDisablePasswordLogin sets the "disable_password_login" field.
func (_u *AuthConfigUpdateOne) SetDisablePasswordLogin(v bool) *AuthConfigUpdateOne {
	_u.mutation.SetDisablePasswordLogin(v)
	return _u
}

// SetNillableDisablePasswordLogin sets the "disable_password_login" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableDisablePasswordLogin(v *bool) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetDisablePasswordLogin(*v)
	}
	return _u
}

// SetSSOProvider sets the "sso_provider" field.
func (_u *AuthConfigUpdateOne) SetSSOProvider(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSOProvider(v)
	return _u
}

// SetNillableSSOProvider sets the "sso_provider" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSOProvider(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSOProvider(*v)
	}
	return _u
}

// SetSSOClientID sets the "sso_client_id" field.
func (_u *AuthConfigUpdateOne) SetSSOClientID(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSOClientID(v)
	return _u
}

// SetNillableSSOClientID sets the "sso_client_id" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSOClientID(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSOClientID(*v)
	}
	return _u
}

// SetSSOClientSecret sets the "sso_client_secret" field.
func (_u *AuthConfigUpdateOne) SetSSOClientSecret(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSOClientSecret(v)
	return _u
}

// SetNillableSSOClientSecret sets the "sso_client_secret" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSOClientSecret(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSOClientSecret(*v)
	}
	return _u
}

// SetSSORedirectURI sets the "sso_redirect_uri" field.
func (_u *AuthConfigUpdateOne) SetSSORedirectURI(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSORedirectURI(v)
	return _u
}

// SetNillableSSORedirectURI sets the "sso_redirect_uri" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSORedirectURI(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSORedirectURI(*v)
	}
	return _u
}

// SetSSOAuthorizationURL sets the "sso_authorization_url" field.
func (_u *AuthConfigUpdateOne) SetSSOAuthorizationURL(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSOAuthorizationURL(v)
	return _u
}

// SetNillableSSOAuthorizationURL sets the "sso_authorization_url" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSOAuthorizationURL(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSOAuthorizationURL(*v)
	}
	return _u
}

// SetSSOTokenURL sets the "sso_token_url" field.
func (_u *AuthConfigUpdateOne) SetSSOTokenURL(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSOTokenURL(v)
	return _u
}

// SetNillableSSOTokenURL sets the "sso_token_url" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSOTokenURL(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSOTokenURL(*v)
	}
	return _u
}

// SetSSOUserInfoURL sets the "sso_user_info_url" field.
func (_u *AuthConfigUpdateOne) SetSSOUserInfoURL(v string) *AuthConfigUpdateOne {
	_u.mutation.SetSSOUserInfoURL(v)
	return _u
}

// SetNillableSSOUserInfoURL sets the "sso_user_info_url" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableSSOUserInfoURL(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetSSOUserInfoURL(*v)
	}
	return _u
}

// SetEntraTenantID sets the "entra_tenant_id" field.
func (_u *AuthConfigUpdateOne) SetEntraTenantID(v string) *AuthConfigUpdateOne {
	_u.mutation.SetEntraTenantID(v)
	return _u
}

// SetNillableEntraTenantID sets the "entra_tenant_id" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableEntraTenantID(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetEntraTenantID(*v)
	}
	return _u
}

// SetGoogleAllowedDomains sets the "google_allowed_domains" field.
func (_u *AuthConfigUpdateOne) SetGoogleAllowedDomains(v string) *AuthConfigUpdateOne {
	_u.mutation.SetGoogleAllowedDomains(v)
	return _u
}

// SetNillableGoogleAllowedDomains sets the "google_allowed_domains" field if the given value is not nil.
func (_u *AuthConfigUpdateOne) SetNillableGoogleAllowedDomains(v *string) *AuthConfigUpdateOne {
	if v != nil {
		_u.SetGoogleAllowedDomains(*v)
	}
	return _u
}

// SetSessionKey sets the "session_key" field.
func (_u *AuthConfigUpdateOne) SetSessionKey(v []byte) *AuthConfigUpdateOne {
	_u.mutation.SetSessionKey(v)
	return _u
}

// Mutation returns the AuthConfigMutation object of the builder.
func (_u *AuthConfigUpdateOne) Mutation() *AuthConfigMutation {
	return _u.mutation
}

// Where appends a list predicates to the AuthConfigUpdate builder.
func (_u *AuthConfigUpdateOne) Where(ps ...predicate.AuthConfig) *AuthConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *AuthConfigUpdateOne) Select(field string, fields ...string) *AuthConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated AuthConfig entity.
func (_u *AuthConfigUpdateOne) Save(ctx context.Context) (*AuthConfig, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *AuthConfigUpdateOne) SaveX(ctx context.Context) *AuthConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *AuthConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *AuthConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *AuthConfigUpdateOne) sqlSave(ctx context.Context) (_node *AuthConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(authconfig.Table, authconfig.Columns, sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authconfig.FieldID)
		for _, f := range fields {
			if !authconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EnableSSO(); ok {
		_spec.SetField(authconfig.FieldEnableSSO, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DisablePasswordLogin(); ok {
		_spec.SetField(authconfig.FieldDisablePasswordLogin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.SSOProvider(); ok {
		_spec.SetField(authconfig.FieldSSOProvider, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOClientID(); ok {
		_spec.SetField(authconfig.FieldSSOClientID, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOClientSecret(); ok {
		_spec.SetField(authconfig.FieldSSOClientSecret, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSORedirectURI(); ok {
		_spec.SetField(authconfig.FieldSSORedirectURI, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOAuthorizationURL(); ok {
		_spec.SetField(authconfig.FieldSSOAuthorizationURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOTokenURL(); ok {
		_spec.SetField(authconfig.FieldSSOTokenURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.SSOUserInfoURL(); ok {
		_spec.SetField(authconfig.FieldSSOUserInfoURL, field.TypeString, value)
	}
	if value, ok := _u.mutation.EntraTenantID(); ok {
		_spec.SetField(authconfig.FieldEntraTenantID, field.TypeString, value)
	}
	if value, ok := _u.mutation.GoogleAllowedDomains(); ok {
		_spec.SetField(authconfig.FieldGoogleAllowedDomains, field.TypeString, value)
	}
	if value, ok := _u.mutation.SessionKey(); ok {
		_spec.SetField(authconfig.FieldSessionKey, field.TypeBytes, value)
	}
	_node = &AuthConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
