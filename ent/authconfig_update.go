// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/authconfig"
	"github.com/lbrictson/janus/ent/predicate"
)

// AuthConfigUpdate is the builder for updating AuthConfig entities.
type AuthConfigUpdate struct {
	config
	hooks    []Hook
	mutation *AuthConfigMutation
}

// Where appends a list predicates to the AuthConfigUpdate builder.
func (acu *AuthConfigUpdate) Where(ps ...predicate.AuthConfig) *AuthConfigUpdate {
	acu.mutation.Where(ps...)
	return acu
}

// SetEnableSSO sets the "enable_sso" field.
func (acu *AuthConfigUpdate) SetEnableSSO(b bool) *AuthConfigUpdate {
	acu.mutation.SetEnableSSO(b)
	return acu
}

// SetNillableEnableSSO sets the "enable_sso" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableEnableSSO(b *bool) *AuthConfigUpdate {
	if b != nil {
		acu.SetEnableSSO(*b)
	}
	return acu
}

// SetDisablePasswordLogin sets the "disable_password_login" field.
func (acu *AuthConfigUpdate) SetDisablePasswordLogin(b bool) *AuthConfigUpdate {
	acu.mutation.SetDisablePasswordLogin(b)
	return acu
}

// SetNillableDisablePasswordLogin sets the "disable_password_login" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableDisablePasswordLogin(b *bool) *AuthConfigUpdate {
	if b != nil {
		acu.SetDisablePasswordLogin(*b)
	}
	return acu
}

// SetSSOProvider sets the "sso_provider" field.
func (acu *AuthConfigUpdate) SetSSOProvider(s string) *AuthConfigUpdate {
	acu.mutation.SetSSOProvider(s)
	return acu
}

// SetNillableSSOProvider sets the "sso_provider" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSOProvider(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSOProvider(*s)
	}
	return acu
}

// SetSSOClientID sets the "sso_client_id" field.
func (acu *AuthConfigUpdate) SetSSOClientID(s string) *AuthConfigUpdate {
	acu.mutation.SetSSOClientID(s)
	return acu
}

// SetNillableSSOClientID sets the "sso_client_id" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSOClientID(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSOClientID(*s)
	}
	return acu
}

// SetSSOClientSecret sets the "sso_client_secret" field.
func (acu *AuthConfigUpdate) SetSSOClientSecret(s string) *AuthConfigUpdate {
	acu.mutation.SetSSOClientSecret(s)
	return acu
}

// SetNillableSSOClientSecret sets the "sso_client_secret" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSOClientSecret(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSOClientSecret(*s)
	}
	return acu
}

// SetSSORedirectURI sets the "sso_redirect_uri" field.
func (acu *AuthConfigUpdate) SetSSORedirectURI(s string) *AuthConfigUpdate {
	acu.mutation.SetSSORedirectURI(s)
	return acu
}

// SetNillableSSORedirectURI sets the "sso_redirect_uri" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSORedirectURI(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSORedirectURI(*s)
	}
	return acu
}

// SetSSOAuthorizationURL sets the "sso_authorization_url" field.
func (acu *AuthConfigUpdate) SetSSOAuthorizationURL(s string) *AuthConfigUpdate {
	acu.mutation.SetSSOAuthorizationURL(s)
	return acu
}

// SetNillableSSOAuthorizationURL sets the "sso_authorization_url" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSOAuthorizationURL(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSOAuthorizationURL(*s)
	}
	return acu
}

// SetSSOTokenURL sets the "sso_token_url" field.
func (acu *AuthConfigUpdate) SetSSOTokenURL(s string) *AuthConfigUpdate {
	acu.mutation.SetSSOTokenURL(s)
	return acu
}

// SetNillableSSOTokenURL sets the "sso_token_url" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSOTokenURL(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSOTokenURL(*s)
	}
	return acu
}

// SetSSOUserInfoURL sets the "sso_user_info_url" field.
func (acu *AuthConfigUpdate) SetSSOUserInfoURL(s string) *AuthConfigUpdate {
	acu.mutation.SetSSOUserInfoURL(s)
	return acu
}

// SetNillableSSOUserInfoURL sets the "sso_user_info_url" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableSSOUserInfoURL(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetSSOUserInfoURL(*s)
	}
	return acu
}

// SetEntraTenantID sets the "entra_tenant_id" field.
func (acu *AuthConfigUpdate) SetEntraTenantID(s string) *AuthConfigUpdate {
	acu.mutation.SetEntraTenantID(s)
	return acu
}

// SetNillableEntraTenantID sets the "entra_tenant_id" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableEntraTenantID(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetEntraTenantID(*s)
	}
	return acu
}

// SetGoogleAllowedDomains sets the "google_allowed_domains" field.
func (acu *AuthConfigUpdate) SetGoogleAllowedDomains(s string) *AuthConfigUpdate {
	acu.mutation.SetGoogleAllowedDomains(s)
	return acu
}

// SetNillableGoogleAllowedDomains sets the "google_allowed_domains" field if the given value is not nil.
func (acu *AuthConfigUpdate) SetNillableGoogleAllowedDomains(s *string) *AuthConfigUpdate {
	if s != nil {
		acu.SetGoogleAllowedDomains(*s)
	}
	return acu
}

// SetSessionKey sets the "session_key" field.
func (acu *AuthConfigUpdate) SetSessionKey(b []byte) *AuthConfigUpdate {
	acu.mutation.SetSessionKey(b)
	return acu
}

// Mutation returns the AuthConfigMutation object of the builder.
func (acu *AuthConfigUpdate) Mutation() *AuthConfigMutation {
	return acu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (acu *AuthConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, acu.sqlSave, acu.mutation, acu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acu *AuthConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := acu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (acu *AuthConfigUpdate) Exec(ctx context.Context) error {
	_, err := acu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acu *AuthConfigUpdate) ExecX(ctx context.Context) {
	if err := acu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acu *AuthConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authconfig.Table, authconfig.Columns, sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeInt))
	if ps := acu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acu.mutation.EnableSSO(); ok {
		_spec.SetField(authconfig.FieldEnableSSO, field.TypeBool, value)
	}
	if value, ok := acu.mutation.DisablePasswordLogin(); ok {
		_spec.SetField(authconfig.FieldDisablePasswordLogin, field.TypeBool, value)
	}
	if value, ok := acu.mutation.SSOProvider(); ok {
		_spec.SetField(authconfig.FieldSSOProvider, field.TypeString, value)
	}
	if value, ok := acu.mutation.SSOClientID(); ok {
		_spec.SetField(authconfig.FieldSSOClientID, field.TypeString, value)
	}
	if value, ok := acu.mutation.SSOClientSecret(); ok {
		_spec.SetField(authconfig.FieldSSOClientSecret, field.TypeString, value)
	}
	if value, ok := acu.mutation.SSORedirectURI(); ok {
		_spec.SetField(authconfig.FieldSSORedirectURI, field.TypeString, value)
	}
	if value, ok := acu.mutation.SSOAuthorizationURL(); ok {
		_spec.SetField(authconfig.FieldSSOAuthorizationURL, field.TypeString, value)
	}
	if value, ok := acu.mutation.SSOTokenURL(); ok {
		_spec.SetField(authconfig.FieldSSOTokenURL, field.TypeString, value)
	}
	if value, ok := acu.mutation.SSOUserInfoURL(); ok {
		_spec.SetField(authconfig.FieldSSOUserInfoURL, field.TypeString, value)
	}
	if value, ok := acu.mutation.EntraTenantID(); ok {
		_spec.SetField(authconfig.FieldEntraTenantID, field.TypeString, value)
	}
	if value, ok := acu.mutation.GoogleAllowedDomains(); ok {
		_spec.SetField(authconfig.FieldGoogleAllowedDomains, field.TypeString, value)
	}
	if value, ok := acu.mutation.SessionKey(); ok {
		_spec.SetField(authconfig.FieldSessionKey, field.TypeBytes, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, acu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	acu.mutation.done = true
	return n, nil
}

// AuthConfigUpdateOne is the builder for updating a single AuthConfig entity.
type AuthConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *AuthConfigMutation
}

// SetEnableSSO sets the "enable_sso" field.
func (acuo *AuthConfigUpdateOne) SetEnableSSO(b bool) *AuthConfigUpdateOne {
	acuo.mutation.SetEnableSSO(b)
	return acuo
}

// SetNillableEnableSSO sets the "enable_sso" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableEnableSSO(b *bool) *AuthConfigUpdateOne {
	if b != nil {
		acuo.SetEnableSSO(*b)
	}
	return acuo
}

// SetDisablePasswordLogin sets the "disable_password_login" field.
func (acuo *AuthConfigUpdateOne) SetDisablePasswordLogin(b bool) *AuthConfigUpdateOne {
	acuo.mutation.SetDisablePasswordLogin(b)
	return acuo
}

// SetNillableDisablePasswordLogin sets the "disable_password_login" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableDisablePasswordLogin(b *bool) *AuthConfigUpdateOne {
	if b != nil {
		acuo.SetDisablePasswordLogin(*b)
	}
	return acuo
}

// SetSSOProvider sets the "sso_provider" field.
func (acuo *AuthConfigUpdateOne) SetSSOProvider(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSOProvider(s)
	return acuo
}

// SetNillableSSOProvider sets the "sso_provider" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSOProvider(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSOProvider(*s)
	}
	return acuo
}

// SetSSOClientID sets the "sso_client_id" field.
func (acuo *AuthConfigUpdateOne) SetSSOClientID(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSOClientID(s)
	return acuo
}

// SetNillableSSOClientID sets the "sso_client_id" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSOClientID(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSOClientID(*s)
	}
	return acuo
}

// SetSSOClientSecret sets the "sso_client_secret" field.
func (acuo *AuthConfigUpdateOne) SetSSOClientSecret(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSOClientSecret(s)
	return acuo
}

// SetNillableSSOClientSecret sets the "sso_client_secret" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSOClientSecret(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSOClientSecret(*s)
	}
	return acuo
}

// SetSSORedirectURI sets the "sso_redirect_uri" field.
func (acuo *AuthConfigUpdateOne) SetSSORedirectURI(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSORedirectURI(s)
	return acuo
}

// SetNillableSSORedirectURI sets the "sso_redirect_uri" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSORedirectURI(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSORedirectURI(*s)
	}
	return acuo
}

// SetSSOAuthorizationURL sets the "sso_authorization_url" field.
func (acuo *AuthConfigUpdateOne) SetSSOAuthorizationURL(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSOAuthorizationURL(s)
	return acuo
}

// SetNillableSSOAuthorizationURL sets the "sso_authorization_url" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSOAuthorizationURL(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSOAuthorizationURL(*s)
	}
	return acuo
}

// SetSSOTokenURL sets the "sso_token_url" field.
func (acuo *AuthConfigUpdateOne) SetSSOTokenURL(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSOTokenURL(s)
	return acuo
}

// SetNillableSSOTokenURL sets the "sso_token_url" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSOTokenURL(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSOTokenURL(*s)
	}
	return acuo
}

// SetSSOUserInfoURL sets the "sso_user_info_url" field.
func (acuo *AuthConfigUpdateOne) SetSSOUserInfoURL(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetSSOUserInfoURL(s)
	return acuo
}

// SetNillableSSOUserInfoURL sets the "sso_user_info_url" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableSSOUserInfoURL(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetSSOUserInfoURL(*s)
	}
	return acuo
}

// SetEntraTenantID sets the "entra_tenant_id" field.
func (acuo *AuthConfigUpdateOne) SetEntraTenantID(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetEntraTenantID(s)
	return acuo
}

// SetNillableEntraTenantID sets the "entra_tenant_id" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableEntraTenantID(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetEntraTenantID(*s)
	}
	return acuo
}

// SetGoogleAllowedDomains sets the "google_allowed_domains" field.
func (acuo *AuthConfigUpdateOne) SetGoogleAllowedDomains(s string) *AuthConfigUpdateOne {
	acuo.mutation.SetGoogleAllowedDomains(s)
	return acuo
}

// SetNillableGoogleAllowedDomains sets the "google_allowed_domains" field if the given value is not nil.
func (acuo *AuthConfigUpdateOne) SetNillableGoogleAllowedDomains(s *string) *AuthConfigUpdateOne {
	if s != nil {
		acuo.SetGoogleAllowedDomains(*s)
	}
	return acuo
}

// SetSessionKey sets the "session_key" field.
func (acuo *AuthConfigUpdateOne) SetSessionKey(b []byte) *AuthConfigUpdateOne {
	acuo.mutation.SetSessionKey(b)
	return acuo
}

// Mutation returns the AuthConfigMutation object of the builder.
func (acuo *AuthConfigUpdateOne) Mutation() *AuthConfigMutation {
	return acuo.mutation
}

// Where appends a list predicates to the AuthConfigUpdate builder.
func (acuo *AuthConfigUpdateOne) Where(ps ...predicate.AuthConfig) *AuthConfigUpdateOne {
	acuo.mutation.Where(ps...)
	return acuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (acuo *AuthConfigUpdateOne) Select(field string, fields ...string) *AuthConfigUpdateOne {
	acuo.fields = append([]string{field}, fields...)
	return acuo
}

// Save executes the query and returns the updated AuthConfig entity.
func (acuo *AuthConfigUpdateOne) Save(ctx context.Context) (*AuthConfig, error) {
	return withHooks(ctx, acuo.sqlSave, acuo.mutation, acuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (acuo *AuthConfigUpdateOne) SaveX(ctx context.Context) *AuthConfig {
	node, err := acuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (acuo *AuthConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := acuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acuo *AuthConfigUpdateOne) ExecX(ctx context.Context) {
	if err := acuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (acuo *AuthConfigUpdateOne) sqlSave(ctx context.Context) (_node *AuthConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(authconfig.Table, authconfig.Columns, sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeInt))
	id, ok := acuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "AuthConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := acuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authconfig.FieldID)
		for _, f := range fields {
			if !authconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := acuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := acuo.mutation.EnableSSO(); ok {
		_spec.SetField(authconfig.FieldEnableSSO, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.DisablePasswordLogin(); ok {
		_spec.SetField(authconfig.FieldDisablePasswordLogin, field.TypeBool, value)
	}
	if value, ok := acuo.mutation.SSOProvider(); ok {
		_spec.SetField(authconfig.FieldSSOProvider, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SSOClientID(); ok {
		_spec.SetField(authconfig.FieldSSOClientID, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SSOClientSecret(); ok {
		_spec.SetField(authconfig.FieldSSOClientSecret, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SSORedirectURI(); ok {
		_spec.SetField(authconfig.FieldSSORedirectURI, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SSOAuthorizationURL(); ok {
		_spec.SetField(authconfig.FieldSSOAuthorizationURL, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SSOTokenURL(); ok {
		_spec.SetField(authconfig.FieldSSOTokenURL, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SSOUserInfoURL(); ok {
		_spec.SetField(authconfig.FieldSSOUserInfoURL, field.TypeString, value)
	}
	if value, ok := acuo.mutation.EntraTenantID(); ok {
		_spec.SetField(authconfig.FieldEntraTenantID, field.TypeString, value)
	}
	if value, ok := acuo.mutation.GoogleAllowedDomains(); ok {
		_spec.SetField(authconfig.FieldGoogleAllowedDomains, field.TypeString, value)
	}
	if value, ok := acuo.mutation.SessionKey(); ok {
		_spec.SetField(authconfig.FieldSessionKey, field.TypeBytes, value)
	}
	_node = &AuthConfig{config: acuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, acuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	acuo.mutation.done = true
	return _node, nil
}
