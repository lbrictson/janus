// Code generated by ent, DO NOT EDIT.

package smtpconfig

import (
	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the smtpconfig type in the database.
	Label = "smtp_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldSMTPServer holds the string denoting the smtp_server field in the database.
	FieldSMTPServer = "smtp_server"
	// FieldSMTPPort holds the string denoting the smtp_port field in the database.
	FieldSMTPPort = "smtp_port"
	// FieldSMTPUsername holds the string denoting the smtp_username field in the database.
	FieldSMTPUsername = "smtp_username"
	// FieldSMTPPassword holds the string denoting the smtp_password field in the database.
	FieldSMTPPassword = "smtp_password"
	// FieldSMTPSender holds the string denoting the smtp_sender field in the database.
	FieldSMTPSender = "smtp_sender"
	// FieldSMTPTLS holds the string denoting the smtp_tls field in the database.
	FieldSMTPTLS = "smtp_tls"
	// Table holds the table name of the smtpconfig in the database.
	Table = "smtp_configs"
)

// Columns holds all SQL columns for smtpconfig fields.
var Columns = []string{
	FieldID,
	FieldSMTPServer,
	FieldSMTPPort,
	FieldSMTPUsername,
	FieldSMTPPassword,
	FieldSMTPSender,
	FieldSMTPTLS,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultSMTPServer holds the default value on creation for the "smtp_server" field.
	DefaultSMTPServer string
	// DefaultSMTPPort holds the default value on creation for the "smtp_port" field.
	DefaultSMTPPort int
	// DefaultSMTPUsername holds the default value on creation for the "smtp_username" field.
	DefaultSMTPUsername string
	// DefaultSMTPPassword holds the default value on creation for the "smtp_password" field.
	DefaultSMTPPassword string
	// DefaultSMTPSender holds the default value on creation for the "smtp_sender" field.
	DefaultSMTPSender string
	// DefaultSMTPTLS holds the default value on creation for the "smtp_tls" field.
	DefaultSMTPTLS bool
)

// OrderOption defines the ordering options for the SMTPConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// BySMTPServer orders the results by the smtp_server field.
func BySMTPServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSMTPServer, opts...).ToFunc()
}

// BySMTPPort orders the results by the smtp_port field.
func BySMTPPort(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSMTPPort, opts...).ToFunc()
}

// BySMTPUsername orders the results by the smtp_username field.
func BySMTPUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSMTPUsername, opts...).ToFunc()
}

// BySMTPPassword orders the results by the smtp_password field.
func BySMTPPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSMTPPassword, opts...).ToFunc()
}

// BySMTPSender orders the results by the smtp_sender field.
func BySMTPSender(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSMTPSender, opts...).ToFunc()
}

// BySMTPTLS orders the results by the smtp_tls field.
func BySMTPTLS(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSMTPTLS, opts...).ToFunc()
}
