// Code generated by ent, DO NOT EDIT.

package smtpconfig

import (
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLTE(FieldID, id))
}

// SMTPServer applies equality check predicate on the "smtp_server" field. It's identical to SMTPServerEQ.
func SMTPServer(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPServer, v))
}

// SMTPPort applies equality check predicate on the "smtp_port" field. It's identical to SMTPPortEQ.
func SMTPPort(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPPort, v))
}

// SMTPUsername applies equality check predicate on the "smtp_username" field. It's identical to SMTPUsernameEQ.
func SMTPUsername(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPUsername, v))
}

// SMTPPassword applies equality check predicate on the "smtp_password" field. It's identical to SMTPPasswordEQ.
func SMTPPassword(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPPassword, v))
}

// SMTPSender applies equality check predicate on the "smtp_sender" field. It's identical to SMTPSenderEQ.
func SMTPSender(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPSender, v))
}

// SMTPTLS applies equality check predicate on the "smtp_tls" field. It's identical to SMTPTLSEQ.
func SMTPTLS(v bool) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPTLS, v))
}

// SMTPServerEQ applies the EQ predicate on the "smtp_server" field.
func SMTPServerEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPServer, v))
}

// SMTPServerNEQ applies the NEQ predicate on the "smtp_server" field.
func SMTPServerNEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldSMTPServer, v))
}

// SMTPServerIn applies the In predicate on the "smtp_server" field.
func SMTPServerIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldIn(FieldSMTPServer, vs...))
}

// SMTPServerNotIn applies the NotIn predicate on the "smtp_server" field.
func SMTPServerNotIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNotIn(FieldSMTPServer, vs...))
}

// SMTPServerGT applies the GT predicate on the "smtp_server" field.
func SMTPServerGT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGT(FieldSMTPServer, v))
}

// SMTPServerGTE applies the GTE predicate on the "smtp_server" field.
func SMTPServerGTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGTE(FieldSMTPServer, v))
}

// SMTPServerLT applies the LT predicate on the "smtp_server" field.
func SMTPServerLT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLT(FieldSMTPServer, v))
}

// SMTPServerLTE applies the LTE predicate on the "smtp_server" field.
func SMTPServerLTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLTE(FieldSMTPServer, v))
}

// SMTPServerContains applies the Contains predicate on the "smtp_server" field.
func SMTPServerContains(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContains(FieldSMTPServer, v))
}

// SMTPServerHasPrefix applies the HasPrefix predicate on the "smtp_server" field.
func SMTPServerHasPrefix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasPrefix(FieldSMTPServer, v))
}

// SMTPServerHasSuffix applies the HasSuffix predicate on the "smtp_server" field.
func SMTPServerHasSuffix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasSuffix(FieldSMTPServer, v))
}

// SMTPServerEqualFold applies the EqualFold predicate on the "smtp_server" field.
func SMTPServerEqualFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEqualFold(FieldSMTPServer, v))
}

// SMTPServerContainsFold applies the ContainsFold predicate on the "smtp_server" field.
func SMTPServerContainsFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContainsFold(FieldSMTPServer, v))
}

// SMTPPortEQ applies the EQ predicate on the "smtp_port" field.
func SMTPPortEQ(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPPort, v))
}

// SMTPPortNEQ applies the NEQ predicate on the "smtp_port" field.
func SMTPPortNEQ(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldSMTPPort, v))
}

// SMTPPortIn applies the In predicate on the "smtp_port" field.
func SMTPPortIn(vs ...int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldIn(FieldSMTPPort, vs...))
}

// SMTPPortNotIn applies the NotIn predicate on the "smtp_port" field.
func SMTPPortNotIn(vs ...int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNotIn(FieldSMTPPort, vs...))
}

// SMTPPortGT applies the GT predicate on the "smtp_port" field.
func SMTPPortGT(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGT(FieldSMTPPort, v))
}

// SMTPPortGTE applies the GTE predicate on the "smtp_port" field.
func SMTPPortGTE(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGTE(FieldSMTPPort, v))
}

// SMTPPortLT applies the LT predicate on the "smtp_port" field.
func SMTPPortLT(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLT(FieldSMTPPort, v))
}

// SMTPPortLTE applies the LTE predicate on the "smtp_port" field.
func SMTPPortLTE(v int) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLTE(FieldSMTPPort, v))
}

// SMTPUsernameEQ applies the EQ predicate on the "smtp_username" field.
func SMTPUsernameEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPUsername, v))
}

// SMTPUsernameNEQ applies the NEQ predicate on the "smtp_username" field.
func SMTPUsernameNEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldSMTPUsername, v))
}

// SMTPUsernameIn applies the In predicate on the "smtp_username" field.
func SMTPUsernameIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldIn(FieldSMTPUsername, vs...))
}

// SMTPUsernameNotIn applies the NotIn predicate on the "smtp_username" field.
func SMTPUsernameNotIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNotIn(FieldSMTPUsername, vs...))
}

// SMTPUsernameGT applies the GT predicate on the "smtp_username" field.
func SMTPUsernameGT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGT(FieldSMTPUsername, v))
}

// SMTPUsernameGTE applies the GTE predicate on the "smtp_username" field.
func SMTPUsernameGTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGTE(FieldSMTPUsername, v))
}

// SMTPUsernameLT applies the LT predicate on the "smtp_username" field.
func SMTPUsernameLT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLT(FieldSMTPUsername, v))
}

// SMTPUsernameLTE applies the LTE predicate on the "smtp_username" field.
func SMTPUsernameLTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLTE(FieldSMTPUsername, v))
}

// SMTPUsernameContains applies the Contains predicate on the "smtp_username" field.
func SMTPUsernameContains(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContains(FieldSMTPUsername, v))
}

// SMTPUsernameHasPrefix applies the HasPrefix predicate on the "smtp_username" field.
func SMTPUsernameHasPrefix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasPrefix(FieldSMTPUsername, v))
}

// SMTPUsernameHasSuffix applies the HasSuffix predicate on the "smtp_username" field.
func SMTPUsernameHasSuffix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasSuffix(FieldSMTPUsername, v))
}

// SMTPUsernameEqualFold applies the EqualFold predicate on the "smtp_username" field.
func SMTPUsernameEqualFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEqualFold(FieldSMTPUsername, v))
}

// SMTPUsernameContainsFold applies the ContainsFold predicate on the "smtp_username" field.
func SMTPUsernameContainsFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContainsFold(FieldSMTPUsername, v))
}

// SMTPPasswordEQ applies the EQ predicate on the "smtp_password" field.
func SMTPPasswordEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPPassword, v))
}

// SMTPPasswordNEQ applies the NEQ predicate on the "smtp_password" field.
func SMTPPasswordNEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldSMTPPassword, v))
}

// SMTPPasswordIn applies the In predicate on the "smtp_password" field.
func SMTPPasswordIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldIn(FieldSMTPPassword, vs...))
}

// SMTPPasswordNotIn applies the NotIn predicate on the "smtp_password" field.
func SMTPPasswordNotIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNotIn(FieldSMTPPassword, vs...))
}

// SMTPPasswordGT applies the GT predicate on the "smtp_password" field.
func SMTPPasswordGT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGT(FieldSMTPPassword, v))
}

// SMTPPasswordGTE applies the GTE predicate on the "smtp_password" field.
func SMTPPasswordGTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGTE(FieldSMTPPassword, v))
}

// SMTPPasswordLT applies the LT predicate on the "smtp_password" field.
func SMTPPasswordLT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLT(FieldSMTPPassword, v))
}

// SMTPPasswordLTE applies the LTE predicate on the "smtp_password" field.
func SMTPPasswordLTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLTE(FieldSMTPPassword, v))
}

// SMTPPasswordContains applies the Contains predicate on the "smtp_password" field.
func SMTPPasswordContains(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContains(FieldSMTPPassword, v))
}

// SMTPPasswordHasPrefix applies the HasPrefix predicate on the "smtp_password" field.
func SMTPPasswordHasPrefix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasPrefix(FieldSMTPPassword, v))
}

// SMTPPasswordHasSuffix applies the HasSuffix predicate on the "smtp_password" field.
func SMTPPasswordHasSuffix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasSuffix(FieldSMTPPassword, v))
}

// SMTPPasswordEqualFold applies the EqualFold predicate on the "smtp_password" field.
func SMTPPasswordEqualFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEqualFold(FieldSMTPPassword, v))
}

// SMTPPasswordContainsFold applies the ContainsFold predicate on the "smtp_password" field.
func SMTPPasswordContainsFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContainsFold(FieldSMTPPassword, v))
}

// SMTPSenderEQ applies the EQ predicate on the "smtp_sender" field.
func SMTPSenderEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPSender, v))
}

// SMTPSenderNEQ applies the NEQ predicate on the "smtp_sender" field.
func SMTPSenderNEQ(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldSMTPSender, v))
}

// SMTPSenderIn applies the In predicate on the "smtp_sender" field.
func SMTPSenderIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldIn(FieldSMTPSender, vs...))
}

// SMTPSenderNotIn applies the NotIn predicate on the "smtp_sender" field.
func SMTPSenderNotIn(vs ...string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNotIn(FieldSMTPSender, vs...))
}

// SMTPSenderGT applies the GT predicate on the "smtp_sender" field.
func SMTPSenderGT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGT(FieldSMTPSender, v))
}

// SMTPSenderGTE applies the GTE predicate on the "smtp_sender" field.
func SMTPSenderGTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldGTE(FieldSMTPSender, v))
}

// SMTPSenderLT applies the LT predicate on the "smtp_sender" field.
func SMTPSenderLT(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLT(FieldSMTPSender, v))
}

// SMTPSenderLTE applies the LTE predicate on the "smtp_sender" field.
func SMTPSenderLTE(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldLTE(FieldSMTPSender, v))
}

// SMTPSenderContains applies the Contains predicate on the "smtp_sender" field.
func SMTPSenderContains(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContains(FieldSMTPSender, v))
}

// SMTPSenderHasPrefix applies the HasPrefix predicate on the "smtp_sender" field.
func SMTPSenderHasPrefix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasPrefix(FieldSMTPSender, v))
}

// SMTPSenderHasSuffix applies the HasSuffix predicate on the "smtp_sender" field.
func SMTPSenderHasSuffix(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldHasSuffix(FieldSMTPSender, v))
}

// SMTPSenderEqualFold applies the EqualFold predicate on the "smtp_sender" field.
func SMTPSenderEqualFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEqualFold(FieldSMTPSender, v))
}

// SMTPSenderContainsFold applies the ContainsFold predicate on the "smtp_sender" field.
func SMTPSenderContainsFold(v string) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldContainsFold(FieldSMTPSender, v))
}

// SMTPTLSEQ applies the EQ predicate on the "smtp_tls" field.
func SMTPTLSEQ(v bool) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldEQ(FieldSMTPTLS, v))
}

// SMTPTLSNEQ applies the NEQ predicate on the "smtp_tls" field.
func SMTPTLSNEQ(v bool) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.FieldNEQ(FieldSMTPTLS, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SMTPConfig) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SMTPConfig) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SMTPConfig) predicate.SMTPConfig {
	return predicate.SMTPConfig(sql.NotPredicates(p))
}
