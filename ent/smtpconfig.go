// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/smtpconfig"
)

// SMTPConfig is the model entity for the SMTPConfig schema.
type SMTPConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// SMTPServer holds the value of the "smtp_server" field.
	SMTPServer string `json:"smtp_server,omitempty"`
	// SMTPPort holds the value of the "smtp_port" field.
	SMTPPort int `json:"smtp_port,omitempty"`
	// SMTPUsername holds the value of the "smtp_username" field.
	SMTPUsername string `json:"smtp_username,omitempty"`
	// SMTPPassword holds the value of the "smtp_password" field.
	SMTPPassword string `json:"smtp_password,omitempty"`
	// SMTPSender holds the value of the "smtp_sender" field.
	SMTPSender string `json:"smtp_sender,omitempty"`
	// SMTPTLS holds the value of the "smtp_tls" field.
	SMTPTLS      bool `json:"smtp_tls,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SMTPConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case smtpconfig.FieldSMTPTLS:
			values[i] = new(sql.NullBool)
		case smtpconfig.FieldID, smtpconfig.FieldSMTPPort:
			values[i] = new(sql.NullInt64)
		case smtpconfig.FieldSMTPServer, smtpconfig.FieldSMTPUsername, smtpconfig.FieldSMTPPassword, smtpconfig.FieldSMTPSender:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SMTPConfig fields.
func (_m *SMTPConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case smtpconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case smtpconfig.FieldSMTPServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field smtp_server", values[i])
			} else if value.Valid {
				_m.SMTPServer = value.String
			}
		case smtpconfig.FieldSMTPPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field smtp_port", values[i])
			} else if value.Valid {
				_m.SMTPPort = int(value.Int64)
			}
		case smtpconfig.FieldSMTPUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field smtp_username", values[i])
			} else if value.Valid {
				_m.SMTPUsername = value.String
			}
		case smtpconfig.FieldSMTPPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field smtp_password", values[i])
			} else if value.Valid {
				_m.SMTPPassword = value.String
			}
		case smtpconfig.FieldSMTPSender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field smtp_sender", values[i])
			} else if value.Valid {
				_m.SMTPSender = value.String
			}
		case smtpconfig.FieldSMTPTLS:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field smtp_tls", values[i])
			} else if value.Valid {
				_m.SMTPTLS = value.Bool
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SMTPConfig.
// This includes values selected through modifiers, order, etc.
func (_m *SMTPConfig) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// Update returns a builder for updating this SMTPConfig.
// Note that you need to call SMTPConfig.Unwrap() before calling this method if this SMTPConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SMTPConfig) Update() *SMTPConfigUpdateOne {
	return NewSMTPConfigClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SMTPConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SMTPConfig) Unwrap() *SMTPConfig {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SMTPConfig is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SMTPConfig) String() string {
	var builder strings.Builder
	builder.WriteString("SMTPConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("smtp_server=")
	builder.WriteString(_m.SMTPServer)
	builder.WriteString(", ")
	builder.WriteString("smtp_port=")
	builder.WriteString(fmt.Sprintf("%v", _m.SMTPPort))
	builder.WriteString(", ")
	builder.WriteString("smtp_username=")
	builder.WriteString(_m.SMTPUsername)
	builder.WriteString(", ")
	builder.WriteString("smtp_password=")
	builder.WriteString(_m.SMTPPassword)
	builder.WriteString(", ")
	builder.WriteString("smtp_sender=")
	builder.WriteString(_m.SMTPSender)
	builder.WriteString(", ")
	builder.WriteString("smtp_tls=")
	builder.WriteString(fmt.Sprintf("%v", _m.SMTPTLS))
	builder.WriteByte(')')
	return builder.String()
}

// SMTPConfigs is a parsable slice of SMTPConfig.
type SMTPConfigs []*SMTPConfig
