// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/jobconfig"
	"github.com/lbrictson/janus/ent/predicate"
)

// JobConfigUpdate is the builder for updating JobConfig entities.
type JobConfigUpdate struct {
	config
	hooks    []Hook
	mutation *JobConfigMutation
}

// Where appends a list predicates to the JobConfigUpdate builder.
func (jcu *JobConfigUpdate) Where(ps ...predicate.JobConfig) *JobConfigUpdate {
	jcu.mutation.Where(ps...)
	return jcu
}

// SetMaxConcurrentJobs sets the "max_concurrent_jobs" field.
func (jcu *JobConfigUpdate) SetMaxConcurrentJobs(i int) *JobConfigUpdate {
	jcu.mutation.ResetMaxConcurrentJobs()
	jcu.mutation.SetMaxConcurrentJobs(i)
	return jcu
}

// SetNillableMaxConcurrentJobs sets the "max_concurrent_jobs" field if the given value is not nil.
func (jcu *JobConfigUpdate) SetNillableMaxConcurrentJobs(i *int) *JobConfigUpdate {
	if i != nil {
		jcu.SetMaxConcurrentJobs(*i)
	}
	return jcu
}

// AddMaxConcurrentJobs adds i to the "max_concurrent_jobs" field.
func (jcu *JobConfigUpdate) AddMaxConcurrentJobs(i int) *JobConfigUpdate {
	jcu.mutation.AddMaxConcurrentJobs(i)
	return jcu
}

// SetDefaultTimeoutSeconds sets the "default_timeout_seconds" field.
func (jcu *JobConfigUpdate) SetDefaultTimeoutSeconds(i int) *JobConfigUpdate {
	jcu.mutation.ResetDefaultTimeoutSeconds()
	jcu.mutation.SetDefaultTimeoutSeconds(i)
	return jcu
}

// SetNillableDefaultTimeoutSeconds sets the "default_timeout_seconds" field if the given value is not nil.
func (jcu *JobConfigUpdate) SetNillableDefaultTimeoutSeconds(i *int) *JobConfigUpdate {
	if i != nil {
		jcu.SetDefaultTimeoutSeconds(*i)
	}
	return jcu
}

// AddDefaultTimeoutSeconds adds i to the "default_timeout_seconds" field.
func (jcu *JobConfigUpdate) AddDefaultTimeoutSeconds(i int) *JobConfigUpdate {
	jcu.mutation.AddDefaultTimeoutSeconds(i)
	return jcu
}

// Mutation returns the JobConfigMutation object of the builder.
func (jcu *JobConfigUpdate) Mutation() *JobConfigMutation {
	return jcu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jcu *JobConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jcu.sqlSave, jcu.mutation, jcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jcu *JobConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := jcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jcu *JobConfigUpdate) Exec(ctx context.Context) error {
	_, err := jcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcu *JobConfigUpdate) ExecX(ctx context.Context) {
	if err := jcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jcu *JobConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobconfig.Table, jobconfig.Columns, sqlgraph.NewFieldSpec(jobconfig.FieldID, field.TypeInt))
	if ps := jcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jcu.mutation.MaxConcurrentJobs(); ok {
		_spec.SetField(jobconfig.FieldMaxConcurrentJobs, field.TypeInt, value)
	}
	if value, ok := jcu.mutation.AddedMaxConcurrentJobs(); ok {
		_spec.AddField(jobconfig.FieldMaxConcurrentJobs, field.TypeInt, value)
	}
	if value, ok := jcu.mutation.DefaultTimeoutSeconds(); ok {
		_spec.SetField(jobconfig.FieldDefaultTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := jcu.mutation.AddedDefaultTimeoutSeconds(); ok {
		_spec.AddField(jobconfig.FieldDefaultTimeoutSeconds, field.TypeInt, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jcu.mutation.done = true
	return n, nil
}

// JobConfigUpdateOne is the builder for updating a single JobConfig entity.
type JobConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobConfigMutation
}

// SetMaxConcurrentJobs sets the "max_concurrent_jobs" field.
func (jcuo *JobConfigUpdateOne) SetMaxConcurrentJobs(i int) *JobConfigUpdateOne {
	jcuo.mutation.ResetMaxConcurrentJobs()
	jcuo.mutation.SetMaxConcurrentJobs(i)
	return jcuo
}

// SetNillableMaxConcurrentJobs sets the "max_concurrent_jobs" field if the given value is not nil.
func (jcuo *JobConfigUpdateOne) SetNillableMaxConcurrentJobs(i *int) *JobConfigUpdateOne {
	if i != nil {
		jcuo.SetMaxConcurrentJobs(*i)
	}
	return jcuo
}

// AddMaxConcurrentJobs adds i to the "max_concurrent_jobs" field.
func (jcuo *JobConfigUpdateOne) AddMaxConcurrentJobs(i int) *JobConfigUpdateOne {
	jcuo.mutation.AddMaxConcurrentJobs(i)
	return jcuo
}

// SetDefaultTimeoutSeconds sets the "default_timeout_seconds" field.
func (jcuo *JobConfigUpdateOne) SetDefaultTimeoutSeconds(i int) *JobConfigUpdateOne {
	jcuo.mutation.ResetDefaultTimeoutSeconds()
	jcuo.mutation.SetDefaultTimeoutSeconds(i)
	return jcuo
}

// SetNillableDefaultTimeoutSeconds sets the "default_timeout_seconds" field if the given value is not nil.
func (jcuo *JobConfigUpdateOne) SetNillableDefaultTimeoutSeconds(i *int) *JobConfigUpdateOne {
	if i != nil {
		jcuo.SetDefaultTimeoutSeconds(*i)
	}
	return jcuo
}

// AddDefaultTimeoutSeconds adds i to the "default_timeout_seconds" field.
func (jcuo *JobConfigUpdateOne) AddDefaultTimeoutSeconds(i int) *JobConfigUpdateOne {
	jcuo.mutation.AddDefaultTimeoutSeconds(i)
	return jcuo
}

// Mutation returns the JobConfigMutation object of the builder.
func (jcuo *JobConfigUpdateOne) Mutation() *JobConfigMutation {
	return jcuo.mutation
}

// Where appends a list predicates to the JobConfigUpdate builder.
func (jcuo *JobConfigUpdateOne) Where(ps ...predicate.JobConfig) *JobConfigUpdateOne {
	jcuo.mutation.Where(ps...)
	return jcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jcuo *JobConfigUpdateOne) Select(field string, fields ...string) *JobConfigUpdateOne {
	jcuo.fields = append([]string{field}, fields...)
	return jcuo
}

// Save executes the query and returns the updated JobConfig entity.
func (jcuo *JobConfigUpdateOne) Save(ctx context.Context) (*JobConfig, error) {
	return withHooks(ctx, jcuo.sqlSave, jcuo.mutation, jcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jcuo *JobConfigUpdateOne) SaveX(ctx context.Context) *JobConfig {
	node, err := jcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jcuo *JobConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := jcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jcuo *JobConfigUpdateOne) ExecX(ctx context.Context) {
	if err := jcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (jcuo *JobConfigUpdateOne) sqlSave(ctx context.Context) (_node *JobConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(jobconfig.Table, jobconfig.Columns, sqlgraph.NewFieldSpec(jobconfig.FieldID, field.TypeInt))
	id, ok := jcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobconfig.FieldID)
		for _, f := range fields {
			if !jobconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jcuo.mutation.MaxConcurrentJobs(); ok {
		_spec.SetField(jobconfig.FieldMaxConcurrentJobs, field.TypeInt, value)
	}
	if value, ok := jcuo.mutation.AddedMaxConcurrentJobs(); ok {
		_spec.AddField(jobconfig.FieldMaxConcurrentJobs, field.TypeInt, value)
	}
	if value, ok := jcuo.mutation.DefaultTimeoutSeconds(); ok {
		_spec.SetField(jobconfig.FieldDefaultTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := jcuo.mutation.AddedDefaultTimeoutSeconds(); ok {
		_spec.AddField(jobconfig.FieldDefaultTimeoutSeconds, field.TypeInt, value)
	}
	_node = &JobConfig{config: jcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jcuo.mutation.done = true
	return _node, nil
}
