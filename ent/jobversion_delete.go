// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/predicate"
)

// JobVersionDelete is the builder for deleting a JobVersion entity.
type JobVersionDelete struct {
	config
	hooks    []Hook
	mutation *JobVersionMutation
}

// Where appends a list predicates to the JobVersionDelete builder.
func (jvd *JobVersionDelete) Where(ps ...predicate.JobVersion) *JobVersionDelete {
	jvd.mutation.Where(ps...)
	return jvd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (jvd *JobVersionDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, jvd.sqlExec, jvd.mutation, jvd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (jvd *JobVersionDelete) ExecX(ctx context.Context) int {
	n, err := jvd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (jvd *JobVersionDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(jobversion.Table, sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt))
	if ps := jvd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, jvd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	jvd.mutation.done = true
	return affected, err
}

// JobVersionDeleteOne is the builder for deleting a single JobVersion entity.
type JobVersionDeleteOne struct {
	jvd *JobVersionDelete
}

// Where appends a list predicates to the JobVersionDelete builder.
func (jvdo *JobVersionDeleteOne) Where(ps ...predicate.JobVersion) *JobVersionDeleteOne {
	jvdo.jvd.mutation.Where(ps...)
	return jvdo
}

// Exec executes the deletion query.
func (jvdo *JobVersionDeleteOne) Exec(ctx context.Context) error {
	n, err := jvdo.jvd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{jobversion.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (jvdo *JobVersionDeleteOne) ExecX(ctx context.Context) {
	if err := jvdo.Exec(ctx); err != nil {
		panic(err)
	}
}
