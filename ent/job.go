// Code generated by ent, DO NOT EDIT.

package ent

import (
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// Job is the model entity for the Job schema.
type Job struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// CronSchedule holds the value of the "cron_schedule" field.
	CronSchedule string `json:"cron_schedule,omitempty"`
	// ScheduleEnabled holds the value of the "schedule_enabled" field.
	ScheduleEnabled bool `json:"schedule_enabled,omitempty"`
	// AllowConcurrentRuns holds the value of the "allow_concurrent_runs" field.
	AllowConcurrentRuns bool `json:"allow_concurrent_runs,omitempty"`
	// List of arguments that can be passed to this job
	Arguments []schema.JobArgument `json:"arguments,omitempty"`
	// RequiresFileUpload holds the value of the "requires_file_upload" field.
	RequiresFileUpload bool `json:"requires_file_upload,omitempty"`
	// AverageDurationMs holds the value of the "average_duration_ms" field.
	AverageDurationMs int64 `json:"average_duration_ms,omitempty"`
	// TimeoutSeconds holds the value of the "timeout_seconds" field.
	TimeoutSeconds int `json:"timeout_seconds,omitempty"`
	// LastEditTime holds the value of the "last_edit_time" field.
	LastEditTime time.Time `json:"last_edit_time,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// NotifyOnStartChannelIds holds the value of the "notify_on_start_channel_ids" field.
	NotifyOnStartChannelIds []int `json:"notify_on_start_channel_ids,omitempty"`
	// NotifyOnSuccessChannelIds holds the value of the "notify_on_success_channel_ids" field.
	NotifyOnSuccessChannelIds []int `json:"notify_on_success_channel_ids,omitempty"`
	// NotifyOnFailureChannelIds holds the value of the "notify_on_failure_channel_ids" field.
	NotifyOnFailureChannelIds []int `json:"notify_on_failure_channel_ids,omitempty"`
	// LastRunTime holds the value of the "last_run_time" field.
	LastRunTime time.Time `json:"last_run_time,omitempty"`
	// NextCronRunTime holds the value of the "next_cron_run_time" field.
	NextCronRunTime time.Time `json:"next_cron_run_time,omitempty"`
	// LastRunSuccess holds the value of the "last_run_success" field.
	LastRunSuccess bool `json:"last_run_success,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the JobQuery when eager-loading is set.
	Edges        JobEdges `json:"edges"`
	project_jobs *int
	selectValues sql.SelectValues
}

// JobEdges holds the relations/edges for other nodes in the graph.
type JobEdges struct {
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// History holds the value of the history edge.
	History []*JobHistory `json:"history,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e JobEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// HistoryOrErr returns the History value or an error if the edge
// was not loaded in eager-loading.
func (e JobEdges) HistoryOrErr() ([]*JobHistory, error) {
	if e.loadedTypes[1] {
		return e.History, nil
	}
	return nil, &NotLoadedError{edge: "history"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Job) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case job.FieldArguments, job.FieldNotifyOnStartChannelIds, job.FieldNotifyOnSuccessChannelIds, job.FieldNotifyOnFailureChannelIds:
			values[i] = new([]byte)
		case job.FieldScheduleEnabled, job.FieldAllowConcurrentRuns, job.FieldRequiresFileUpload, job.FieldLastRunSuccess:
			values[i] = new(sql.NullBool)
		case job.FieldID, job.FieldAverageDurationMs, job.FieldTimeoutSeconds:
			values[i] = new(sql.NullInt64)
		case job.FieldName, job.FieldDescription, job.FieldCronSchedule:
			values[i] = new(sql.NullString)
		case job.FieldLastEditTime, job.FieldCreatedAt, job.FieldLastRunTime, job.FieldNextCronRunTime:
			values[i] = new(sql.NullTime)
		case job.ForeignKeys[0]: // project_jobs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Job fields.
func (j *Job) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case job.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			j.ID = int(value.Int64)
		case job.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				j.Name = value.String
			}
		case job.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				j.Description = value.String
			}
		case job.FieldCronSchedule:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field cron_schedule", values[i])
			} else if value.Valid {
				j.CronSchedule = value.String
			}
		case job.FieldScheduleEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field schedule_enabled", values[i])
			} else if value.Valid {
				j.ScheduleEnabled = value.Bool
			}
		case job.FieldAllowConcurrentRuns:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_concurrent_runs", values[i])
			} else if value.Valid {
				j.AllowConcurrentRuns = value.Bool
			}
		case job.FieldArguments:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field arguments", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.Arguments); err != nil {
					return fmt.Errorf("unmarshal field arguments: %w", err)
				}
			}
		case job.FieldRequiresFileUpload:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field requires_file_upload", values[i])
			} else if value.Valid {
				j.RequiresFileUpload = value.Bool
			}
		case job.FieldAverageDurationMs:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field average_duration_ms", values[i])
			} else if value.Valid {
				j.AverageDurationMs = value.Int64
			}
		case job.FieldTimeoutSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout_seconds", values[i])
			} else if value.Valid {
				j.TimeoutSeconds = int(value.Int64)
			}
		case job.FieldLastEditTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_edit_time", values[i])
			} else if value.Valid {
				j.LastEditTime = value.Time
			}
		case job.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				j.CreatedAt = value.Time
			}
		case job.FieldNotifyOnStartChannelIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notify_on_start_channel_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.NotifyOnStartChannelIds); err != nil {
					return fmt.Errorf("unmarshal field notify_on_start_channel_ids: %w", err)
				}
			}
		case job.FieldNotifyOnSuccessChannelIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notify_on_success_channel_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.NotifyOnSuccessChannelIds); err != nil {
					return fmt.Errorf("unmarshal field notify_on_success_channel_ids: %w", err)
				}
			}
		case job.FieldNotifyOnFailureChannelIds:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field notify_on_failure_channel_ids", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &j.NotifyOnFailureChannelIds); err != nil {
					return fmt.Errorf("unmarshal field notify_on_failure_channel_ids: %w", err)
				}
			}
		case job.FieldLastRunTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_time", values[i])
			} else if value.Valid {
				j.LastRunTime = value.Time
			}
		case job.FieldNextCronRunTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field next_cron_run_time", values[i])
			} else if value.Valid {
				j.NextCronRunTime = value.Time
			}
		case job.FieldLastRunSuccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field last_run_success", values[i])
			} else if value.Valid {
				j.LastRunSuccess = value.Bool
			}
		case job.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_jobs", value)
			} else if value.Valid {
				j.project_jobs = new(int)
				*j.project_jobs = int(value.Int64)
			}
		default:
			j.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Job.
// This includes values selected through modifiers, order, etc.
func (j *Job) Value(name string) (ent.Value, error) {
	return j.selectValues.Get(name)
}

// QueryProject queries the "project" edge of the Job entity.
func (j *Job) QueryProject() *ProjectQuery {
	return NewJobClient(j.config).QueryProject(j)
}

// QueryHistory queries the "history" edge of the Job entity.
func (j *Job) QueryHistory() *JobHistoryQuery {
	return NewJobClient(j.config).QueryHistory(j)
}

// Update returns a builder for updating this Job.
// Note that you need to call Job.Unwrap() before calling this method if this Job
// was returned from a transaction, and the transaction was committed or rolled back.
func (j *Job) Update() *JobUpdateOne {
	return NewJobClient(j.config).UpdateOne(j)
}

// Unwrap unwraps the Job entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (j *Job) Unwrap() *Job {
	_tx, ok := j.config.driver.(*txDriver)
	if !ok {
		panic("ent: Job is not a transactional entity")
	}
	j.config.driver = _tx.drv
	return j
}

// String implements the fmt.Stringer.
func (j *Job) String() string {
	var builder strings.Builder
	builder.WriteString("Job(")
	builder.WriteString(fmt.Sprintf("id=%v, ", j.ID))
	builder.WriteString("name=")
	builder.WriteString(j.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(j.Description)
	builder.WriteString(", ")
	builder.WriteString("cron_schedule=")
	builder.WriteString(j.CronSchedule)
	builder.WriteString(", ")
	builder.WriteString("schedule_enabled=")
	builder.WriteString(fmt.Sprintf("%v", j.ScheduleEnabled))
	builder.WriteString(", ")
	builder.WriteString("allow_concurrent_runs=")
	builder.WriteString(fmt.Sprintf("%v", j.AllowConcurrentRuns))
	builder.WriteString(", ")
	builder.WriteString("arguments=")
	builder.WriteString(fmt.Sprintf("%v", j.Arguments))
	builder.WriteString(", ")
	builder.WriteString("requires_file_upload=")
	builder.WriteString(fmt.Sprintf("%v", j.RequiresFileUpload))
	builder.WriteString(", ")
	builder.WriteString("average_duration_ms=")
	builder.WriteString(fmt.Sprintf("%v", j.AverageDurationMs))
	builder.WriteString(", ")
	builder.WriteString("timeout_seconds=")
	builder.WriteString(fmt.Sprintf("%v", j.TimeoutSeconds))
	builder.WriteString(", ")
	builder.WriteString("last_edit_time=")
	builder.WriteString(j.LastEditTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(j.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("notify_on_start_channel_ids=")
	builder.WriteString(fmt.Sprintf("%v", j.NotifyOnStartChannelIds))
	builder.WriteString(", ")
	builder.WriteString("notify_on_success_channel_ids=")
	builder.WriteString(fmt.Sprintf("%v", j.NotifyOnSuccessChannelIds))
	builder.WriteString(", ")
	builder.WriteString("notify_on_failure_channel_ids=")
	builder.WriteString(fmt.Sprintf("%v", j.NotifyOnFailureChannelIds))
	builder.WriteString(", ")
	builder.WriteString("last_run_time=")
	builder.WriteString(j.LastRunTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("next_cron_run_time=")
	builder.WriteString(j.NextCronRunTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_run_success=")
	builder.WriteString(fmt.Sprintf("%v", j.LastRunSuccess))
	builder.WriteByte(')')
	return builder.String()
}

// Jobs is a parsable slice of Job.
type Jobs []*Job
