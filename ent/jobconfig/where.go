// Code generated by ent, DO NOT EDIT.

package jobconfig

import (
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldLTE(FieldID, id))
}

// MaxConcurrentJobs applies equality check predicate on the "max_concurrent_jobs" field. It's identical to MaxConcurrentJobsEQ.
func MaxConcurrentJobs(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldEQ(FieldMaxConcurrentJobs, v))
}

// DefaultTimeoutSeconds applies equality check predicate on the "default_timeout_seconds" field. It's identical to DefaultTimeoutSecondsEQ.
func DefaultTimeoutSeconds(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldEQ(FieldDefaultTimeoutSeconds, v))
}

// MaxConcurrentJobsEQ applies the EQ predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsEQ(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldEQ(FieldMaxConcurrentJobs, v))
}

// MaxConcurrentJobsNEQ applies the NEQ predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsNEQ(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldNEQ(FieldMaxConcurrentJobs, v))
}

// MaxConcurrentJobsIn applies the In predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsIn(vs ...int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldIn(FieldMaxConcurrentJobs, vs...))
}

// MaxConcurrentJobsNotIn applies the NotIn predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsNotIn(vs ...int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldNotIn(FieldMaxConcurrentJobs, vs...))
}

// MaxConcurrentJobsGT applies the GT predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsGT(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldGT(FieldMaxConcurrentJobs, v))
}

// MaxConcurrentJobsGTE applies the GTE predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsGTE(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldGTE(FieldMaxConcurrentJobs, v))
}

// MaxConcurrentJobsLT applies the LT predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsLT(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldLT(FieldMaxConcurrentJobs, v))
}

// MaxConcurrentJobsLTE applies the LTE predicate on the "max_concurrent_jobs" field.
func MaxConcurrentJobsLTE(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldLTE(FieldMaxConcurrentJobs, v))
}

// DefaultTimeoutSecondsEQ applies the EQ predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsEQ(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldEQ(FieldDefaultTimeoutSeconds, v))
}

// DefaultTimeoutSecondsNEQ applies the NEQ predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsNEQ(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldNEQ(FieldDefaultTimeoutSeconds, v))
}

// DefaultTimeoutSecondsIn applies the In predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsIn(vs ...int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldIn(FieldDefaultTimeoutSeconds, vs...))
}

// DefaultTimeoutSecondsNotIn applies the NotIn predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsNotIn(vs ...int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldNotIn(FieldDefaultTimeoutSeconds, vs...))
}

// DefaultTimeoutSecondsGT applies the GT predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsGT(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldGT(FieldDefaultTimeoutSeconds, v))
}

// DefaultTimeoutSecondsGTE applies the GTE predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsGTE(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldGTE(FieldDefaultTimeoutSeconds, v))
}

// DefaultTimeoutSecondsLT applies the LT predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsLT(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldLT(FieldDefaultTimeoutSeconds, v))
}

// DefaultTimeoutSecondsLTE applies the LTE predicate on the "default_timeout_seconds" field.
func DefaultTimeoutSecondsLTE(v int) predicate.JobConfig {
	return predicate.JobConfig(sql.FieldLTE(FieldDefaultTimeoutSeconds, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobConfig) predicate.JobConfig {
	return predicate.JobConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobConfig) predicate.JobConfig {
	return predicate.JobConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobConfig) predicate.JobConfig {
	return predicate.JobConfig(sql.NotPredicates(p))
}
