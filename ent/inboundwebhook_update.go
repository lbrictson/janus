// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/inboundwebhook"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/predicate"
)

// InboundWebhookUpdate is the builder for updating InboundWebhook entities.
type InboundWebhookUpdate struct {
	config
	hooks    []Hook
	mutation *InboundWebhookMutation
}

// Where appends a list predicates to the InboundWebhookUpdate builder.
func (iwu *InboundWebhookUpdate) Where(ps ...predicate.InboundWebhook) *InboundWebhookUpdate {
	iwu.mutation.Where(ps...)
	return iwu
}

// SetKey sets the "key" field.
func (iwu *InboundWebhookUpdate) SetKey(s string) *InboundWebhookUpdate {
	iwu.mutation.SetKey(s)
	return iwu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (iwu *InboundWebhookUpdate) SetNillableKey(s *string) *InboundWebhookUpdate {
	if s != nil {
		iwu.SetKey(*s)
	}
	return iwu
}

// SetCreatedBy sets the "created_by" field.
func (iwu *InboundWebhookUpdate) SetCreatedBy(s string) *InboundWebhookUpdate {
	iwu.mutation.SetCreatedBy(s)
	return iwu
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iwu *InboundWebhookUpdate) SetNillableCreatedBy(s *string) *InboundWebhookUpdate {
	if s != nil {
		iwu.SetCreatedBy(*s)
	}
	return iwu
}

// SetCreatedAt sets the "created_at" field.
func (iwu *InboundWebhookUpdate) SetCreatedAt(t time.Time) *InboundWebhookUpdate {
	iwu.mutation.SetCreatedAt(t)
	return iwu
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iwu *InboundWebhookUpdate) SetNillableCreatedAt(t *time.Time) *InboundWebhookUpdate {
	if t != nil {
		iwu.SetCreatedAt(*t)
	}
	return iwu
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (iwu *InboundWebhookUpdate) SetJobID(id int) *InboundWebhookUpdate {
	iwu.mutation.SetJobID(id)
	return iwu
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (iwu *InboundWebhookUpdate) SetNillableJobID(id *int) *InboundWebhookUpdate {
	if id != nil {
		iwu = iwu.SetJobID(*id)
	}
	return iwu
}

// SetJob sets the "job" edge to the Job entity.
func (iwu *InboundWebhookUpdate) SetJob(j *Job) *InboundWebhookUpdate {
	return iwu.SetJobID(j.ID)
}

// Mutation returns the InboundWebhookMutation object of the builder.
func (iwu *InboundWebhookUpdate) Mutation() *InboundWebhookMutation {
	return iwu.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (iwu *InboundWebhookUpdate) ClearJob() *InboundWebhookUpdate {
	iwu.mutation.ClearJob()
	return iwu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iwu *InboundWebhookUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, iwu.sqlSave, iwu.mutation, iwu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iwu *InboundWebhookUpdate) SaveX(ctx context.Context) int {
	affected, err := iwu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iwu *InboundWebhookUpdate) Exec(ctx context.Context) error {
	_, err := iwu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwu *InboundWebhookUpdate) ExecX(ctx context.Context) {
	if err := iwu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iwu *InboundWebhookUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(inboundwebhook.Table, inboundwebhook.Columns, sqlgraph.NewFieldSpec(inboundwebhook.FieldID, field.TypeInt))
	if ps := iwu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iwu.mutation.Key(); ok {
		_spec.SetField(inboundwebhook.FieldKey, field.TypeString, value)
	}
	if value, ok := iwu.mutation.CreatedBy(); ok {
		_spec.SetField(inboundwebhook.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := iwu.mutation.CreatedAt(); ok {
		_spec.SetField(inboundwebhook.FieldCreatedAt, field.TypeTime, value)
	}
	if iwu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inboundwebhook.JobTable,
			Columns: []string{inboundwebhook.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iwu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inboundwebhook.JobTable,
			Columns: []string{inboundwebhook.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iwu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inboundwebhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	iwu.mutation.done = true
	return n, nil
}

// InboundWebhookUpdateOne is the builder for updating a single InboundWebhook entity.
type InboundWebhookUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *InboundWebhookMutation
}

// SetKey sets the "key" field.
func (iwuo *InboundWebhookUpdateOne) SetKey(s string) *InboundWebhookUpdateOne {
	iwuo.mutation.SetKey(s)
	return iwuo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (iwuo *InboundWebhookUpdateOne) SetNillableKey(s *string) *InboundWebhookUpdateOne {
	if s != nil {
		iwuo.SetKey(*s)
	}
	return iwuo
}

// SetCreatedBy sets the "created_by" field.
func (iwuo *InboundWebhookUpdateOne) SetCreatedBy(s string) *InboundWebhookUpdateOne {
	iwuo.mutation.SetCreatedBy(s)
	return iwuo
}

// SetNillableCreatedBy sets the "created_by" field if the given value is not nil.
func (iwuo *InboundWebhookUpdateOne) SetNillableCreatedBy(s *string) *InboundWebhookUpdateOne {
	if s != nil {
		iwuo.SetCreatedBy(*s)
	}
	return iwuo
}

// SetCreatedAt sets the "created_at" field.
func (iwuo *InboundWebhookUpdateOne) SetCreatedAt(t time.Time) *InboundWebhookUpdateOne {
	iwuo.mutation.SetCreatedAt(t)
	return iwuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iwuo *InboundWebhookUpdateOne) SetNillableCreatedAt(t *time.Time) *InboundWebhookUpdateOne {
	if t != nil {
		iwuo.SetCreatedAt(*t)
	}
	return iwuo
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (iwuo *InboundWebhookUpdateOne) SetJobID(id int) *InboundWebhookUpdateOne {
	iwuo.mutation.SetJobID(id)
	return iwuo
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (iwuo *InboundWebhookUpdateOne) SetNillableJobID(id *int) *InboundWebhookUpdateOne {
	if id != nil {
		iwuo = iwuo.SetJobID(*id)
	}
	return iwuo
}

// SetJob sets the "job" edge to the Job entity.
func (iwuo *InboundWebhookUpdateOne) SetJob(j *Job) *InboundWebhookUpdateOne {
	return iwuo.SetJobID(j.ID)
}

// Mutation returns the InboundWebhookMutation object of the builder.
func (iwuo *InboundWebhookUpdateOne) Mutation() *InboundWebhookMutation {
	return iwuo.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (iwuo *InboundWebhookUpdateOne) ClearJob() *InboundWebhookUpdateOne {
	iwuo.mutation.ClearJob()
	return iwuo
}

// Where appends a list predicates to the InboundWebhookUpdate builder.
func (iwuo *InboundWebhookUpdateOne) Where(ps ...predicate.InboundWebhook) *InboundWebhookUpdateOne {
	iwuo.mutation.Where(ps...)
	return iwuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iwuo *InboundWebhookUpdateOne) Select(field string, fields ...string) *InboundWebhookUpdateOne {
	iwuo.fields = append([]string{field}, fields...)
	return iwuo
}

// Save executes the query and returns the updated InboundWebhook entity.
func (iwuo *InboundWebhookUpdateOne) Save(ctx context.Context) (*InboundWebhook, error) {
	return withHooks(ctx, iwuo.sqlSave, iwuo.mutation, iwuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (iwuo *InboundWebhookUpdateOne) SaveX(ctx context.Context) *InboundWebhook {
	node, err := iwuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iwuo *InboundWebhookUpdateOne) Exec(ctx context.Context) error {
	_, err := iwuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwuo *InboundWebhookUpdateOne) ExecX(ctx context.Context) {
	if err := iwuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (iwuo *InboundWebhookUpdateOne) sqlSave(ctx context.Context) (_node *InboundWebhook, err error) {
	_spec := sqlgraph.NewUpdateSpec(inboundwebhook.Table, inboundwebhook.Columns, sqlgraph.NewFieldSpec(inboundwebhook.FieldID, field.TypeInt))
	id, ok := iwuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "InboundWebhook.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iwuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, inboundwebhook.FieldID)
		for _, f := range fields {
			if !inboundwebhook.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != inboundwebhook.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iwuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iwuo.mutation.Key(); ok {
		_spec.SetField(inboundwebhook.FieldKey, field.TypeString, value)
	}
	if value, ok := iwuo.mutation.CreatedBy(); ok {
		_spec.SetField(inboundwebhook.FieldCreatedBy, field.TypeString, value)
	}
	if value, ok := iwuo.mutation.CreatedAt(); ok {
		_spec.SetField(inboundwebhook.FieldCreatedAt, field.TypeTime, value)
	}
	if iwuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inboundwebhook.JobTable,
			Columns: []string{inboundwebhook.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := iwuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inboundwebhook.JobTable,
			Columns: []string{inboundwebhook.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &InboundWebhook{config: iwuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iwuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{inboundwebhook.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	iwuo.mutation.done = true
	return _node, nil
}
