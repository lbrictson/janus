// Code generated by ent, DO NOT EDIT.

package jobhistory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lbrictson/janus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldID, id))
}

// WasSuccessful applies equality check predicate on the "was_successful" field. It's identical to WasSuccessfulEQ.
func WasSuccessful(v bool) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldWasSuccessful, v))
}

// DurationMs applies equality check predicate on the "duration_ms" field. It's identical to DurationMsEQ.
func DurationMs(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldDurationMs, v))
}

// Output applies equality check predicate on the "output" field. It's identical to OutputEQ.
func Output(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldOutput, v))
}

// ExitCode applies equality check predicate on the "exit_code" field. It's identical to ExitCodeEQ.
func ExitCode(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldExitCode, v))
}

// TriggeredByEmail applies equality check predicate on the "triggered_by_email" field. It's identical to TriggeredByEmailEQ.
func TriggeredByEmail(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldTriggeredByEmail, v))
}

// TriggeredByID applies equality check predicate on the "triggered_by_id" field. It's identical to TriggeredByIDEQ.
func TriggeredByID(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldTriggeredByID, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// Status applies equality check predicate on the "status" field. It's identical to StatusEQ.
func Status(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldStatus, v))
}

// Trigger applies equality check predicate on the "trigger" field. It's identical to TriggerEQ.
func Trigger(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldTrigger, v))
}

// WasSuccessfulEQ applies the EQ predicate on the "was_successful" field.
func WasSuccessfulEQ(v bool) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldWasSuccessful, v))
}

// WasSuccessfulNEQ applies the NEQ predicate on the "was_successful" field.
func WasSuccessfulNEQ(v bool) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldWasSuccessful, v))
}

// DurationMsEQ applies the EQ predicate on the "duration_ms" field.
func DurationMsEQ(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldDurationMs, v))
}

// DurationMsNEQ applies the NEQ predicate on the "duration_ms" field.
func DurationMsNEQ(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldDurationMs, v))
}

// DurationMsIn applies the In predicate on the "duration_ms" field.
func DurationMsIn(vs ...int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldDurationMs, vs...))
}

// DurationMsNotIn applies the NotIn predicate on the "duration_ms" field.
func DurationMsNotIn(vs ...int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldDurationMs, vs...))
}

// DurationMsGT applies the GT predicate on the "duration_ms" field.
func DurationMsGT(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldDurationMs, v))
}

// DurationMsGTE applies the GTE predicate on the "duration_ms" field.
func DurationMsGTE(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldDurationMs, v))
}

// DurationMsLT applies the LT predicate on the "duration_ms" field.
func DurationMsLT(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldDurationMs, v))
}

// DurationMsLTE applies the LTE predicate on the "duration_ms" field.
func DurationMsLTE(v int64) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldDurationMs, v))
}

// ParametersIsNil applies the IsNil predicate on the "parameters" field.
func ParametersIsNil() predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIsNull(FieldParameters))
}

// ParametersNotNil applies the NotNil predicate on the "parameters" field.
func ParametersNotNil() predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotNull(FieldParameters))
}

// OutputEQ applies the EQ predicate on the "output" field.
func OutputEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldOutput, v))
}

// OutputNEQ applies the NEQ predicate on the "output" field.
func OutputNEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldOutput, v))
}

// OutputIn applies the In predicate on the "output" field.
func OutputIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldOutput, vs...))
}

// OutputNotIn applies the NotIn predicate on the "output" field.
func OutputNotIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldOutput, vs...))
}

// OutputGT applies the GT predicate on the "output" field.
func OutputGT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldOutput, v))
}

// OutputGTE applies the GTE predicate on the "output" field.
func OutputGTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldOutput, v))
}

// OutputLT applies the LT predicate on the "output" field.
func OutputLT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldOutput, v))
}

// OutputLTE applies the LTE predicate on the "output" field.
func OutputLTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldOutput, v))
}

// OutputContains applies the Contains predicate on the "output" field.
func OutputContains(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContains(FieldOutput, v))
}

// OutputHasPrefix applies the HasPrefix predicate on the "output" field.
func OutputHasPrefix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasPrefix(FieldOutput, v))
}

// OutputHasSuffix applies the HasSuffix predicate on the "output" field.
func OutputHasSuffix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasSuffix(FieldOutput, v))
}

// OutputEqualFold applies the EqualFold predicate on the "output" field.
func OutputEqualFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEqualFold(FieldOutput, v))
}

// OutputContainsFold applies the ContainsFold predicate on the "output" field.
func OutputContainsFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContainsFold(FieldOutput, v))
}

// ExitCodeEQ applies the EQ predicate on the "exit_code" field.
func ExitCodeEQ(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldExitCode, v))
}

// ExitCodeNEQ applies the NEQ predicate on the "exit_code" field.
func ExitCodeNEQ(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldExitCode, v))
}

// ExitCodeIn applies the In predicate on the "exit_code" field.
func ExitCodeIn(vs ...int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldExitCode, vs...))
}

// ExitCodeNotIn applies the NotIn predicate on the "exit_code" field.
func ExitCodeNotIn(vs ...int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldExitCode, vs...))
}

// ExitCodeGT applies the GT predicate on the "exit_code" field.
func ExitCodeGT(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldExitCode, v))
}

// ExitCodeGTE applies the GTE predicate on the "exit_code" field.
func ExitCodeGTE(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldExitCode, v))
}

// ExitCodeLT applies the LT predicate on the "exit_code" field.
func ExitCodeLT(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldExitCode, v))
}

// ExitCodeLTE applies the LTE predicate on the "exit_code" field.
func ExitCodeLTE(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldExitCode, v))
}

// TriggeredByEmailEQ applies the EQ predicate on the "triggered_by_email" field.
func TriggeredByEmailEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldTriggeredByEmail, v))
}

// TriggeredByEmailNEQ applies the NEQ predicate on the "triggered_by_email" field.
func TriggeredByEmailNEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldTriggeredByEmail, v))
}

// TriggeredByEmailIn applies the In predicate on the "triggered_by_email" field.
func TriggeredByEmailIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldTriggeredByEmail, vs...))
}

// TriggeredByEmailNotIn applies the NotIn predicate on the "triggered_by_email" field.
func TriggeredByEmailNotIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldTriggeredByEmail, vs...))
}

// TriggeredByEmailGT applies the GT predicate on the "triggered_by_email" field.
func TriggeredByEmailGT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldTriggeredByEmail, v))
}

// TriggeredByEmailGTE applies the GTE predicate on the "triggered_by_email" field.
func TriggeredByEmailGTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldTriggeredByEmail, v))
}

// TriggeredByEmailLT applies the LT predicate on the "triggered_by_email" field.
func TriggeredByEmailLT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldTriggeredByEmail, v))
}

// TriggeredByEmailLTE applies the LTE predicate on the "triggered_by_email" field.
func TriggeredByEmailLTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldTriggeredByEmail, v))
}

// TriggeredByEmailContains applies the Contains predicate on the "triggered_by_email" field.
func TriggeredByEmailContains(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContains(FieldTriggeredByEmail, v))
}

// TriggeredByEmailHasPrefix applies the HasPrefix predicate on the "triggered_by_email" field.
func TriggeredByEmailHasPrefix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasPrefix(FieldTriggeredByEmail, v))
}

// TriggeredByEmailHasSuffix applies the HasSuffix predicate on the "triggered_by_email" field.
func TriggeredByEmailHasSuffix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasSuffix(FieldTriggeredByEmail, v))
}

// TriggeredByEmailEqualFold applies the EqualFold predicate on the "triggered_by_email" field.
func TriggeredByEmailEqualFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEqualFold(FieldTriggeredByEmail, v))
}

// TriggeredByEmailContainsFold applies the ContainsFold predicate on the "triggered_by_email" field.
func TriggeredByEmailContainsFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContainsFold(FieldTriggeredByEmail, v))
}

// TriggeredByIDEQ applies the EQ predicate on the "triggered_by_id" field.
func TriggeredByIDEQ(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldTriggeredByID, v))
}

// TriggeredByIDNEQ applies the NEQ predicate on the "triggered_by_id" field.
func TriggeredByIDNEQ(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldTriggeredByID, v))
}

// TriggeredByIDIn applies the In predicate on the "triggered_by_id" field.
func TriggeredByIDIn(vs ...int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldTriggeredByID, vs...))
}

// TriggeredByIDNotIn applies the NotIn predicate on the "triggered_by_id" field.
func TriggeredByIDNotIn(vs ...int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldTriggeredByID, vs...))
}

// TriggeredByIDGT applies the GT predicate on the "triggered_by_id" field.
func TriggeredByIDGT(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldTriggeredByID, v))
}

// TriggeredByIDGTE applies the GTE predicate on the "triggered_by_id" field.
func TriggeredByIDGTE(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldTriggeredByID, v))
}

// TriggeredByIDLT applies the LT predicate on the "triggered_by_id" field.
func TriggeredByIDLT(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldTriggeredByID, v))
}

// TriggeredByIDLTE applies the LTE predicate on the "triggered_by_id" field.
func TriggeredByIDLTE(v int) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldTriggeredByID, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldCreatedAt, v))
}

// StatusEQ applies the EQ predicate on the "status" field.
func StatusEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldStatus, v))
}

// StatusNEQ applies the NEQ predicate on the "status" field.
func StatusNEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldStatus, v))
}

// StatusIn applies the In predicate on the "status" field.
func StatusIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldStatus, vs...))
}

// StatusNotIn applies the NotIn predicate on the "status" field.
func StatusNotIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldStatus, vs...))
}

// StatusGT applies the GT predicate on the "status" field.
func StatusGT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldStatus, v))
}

// StatusGTE applies the GTE predicate on the "status" field.
func StatusGTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldStatus, v))
}

// StatusLT applies the LT predicate on the "status" field.
func StatusLT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldStatus, v))
}

// StatusLTE applies the LTE predicate on the "status" field.
func StatusLTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldStatus, v))
}

// StatusContains applies the Contains predicate on the "status" field.
func StatusContains(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContains(FieldStatus, v))
}

// StatusHasPrefix applies the HasPrefix predicate on the "status" field.
func StatusHasPrefix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasPrefix(FieldStatus, v))
}

// StatusHasSuffix applies the HasSuffix predicate on the "status" field.
func StatusHasSuffix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasSuffix(FieldStatus, v))
}

// StatusEqualFold applies the EqualFold predicate on the "status" field.
func StatusEqualFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEqualFold(FieldStatus, v))
}

// StatusContainsFold applies the ContainsFold predicate on the "status" field.
func StatusContainsFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContainsFold(FieldStatus, v))
}

// TriggerEQ applies the EQ predicate on the "trigger" field.
func TriggerEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEQ(FieldTrigger, v))
}

// TriggerNEQ applies the NEQ predicate on the "trigger" field.
func TriggerNEQ(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNEQ(FieldTrigger, v))
}

// TriggerIn applies the In predicate on the "trigger" field.
func TriggerIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldIn(FieldTrigger, vs...))
}

// TriggerNotIn applies the NotIn predicate on the "trigger" field.
func TriggerNotIn(vs ...string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldNotIn(FieldTrigger, vs...))
}

// TriggerGT applies the GT predicate on the "trigger" field.
func TriggerGT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGT(FieldTrigger, v))
}

// TriggerGTE applies the GTE predicate on the "trigger" field.
func TriggerGTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldGTE(FieldTrigger, v))
}

// TriggerLT applies the LT predicate on the "trigger" field.
func TriggerLT(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLT(FieldTrigger, v))
}

// TriggerLTE applies the LTE predicate on the "trigger" field.
func TriggerLTE(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldLTE(FieldTrigger, v))
}

// TriggerContains applies the Contains predicate on the "trigger" field.
func TriggerContains(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContains(FieldTrigger, v))
}

// TriggerHasPrefix applies the HasPrefix predicate on the "trigger" field.
func TriggerHasPrefix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasPrefix(FieldTrigger, v))
}

// TriggerHasSuffix applies the HasSuffix predicate on the "trigger" field.
func TriggerHasSuffix(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldHasSuffix(FieldTrigger, v))
}

// TriggerEqualFold applies the EqualFold predicate on the "trigger" field.
func TriggerEqualFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldEqualFold(FieldTrigger, v))
}

// TriggerContainsFold applies the ContainsFold predicate on the "trigger" field.
func TriggerContainsFold(v string) predicate.JobHistory {
	return predicate.JobHistory(sql.FieldContainsFold(FieldTrigger, v))
}

// HasProject applies the HasEdge predicate on the "project" edge.
func HasProject() predicate.JobHistory {
	return predicate.JobHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProjectWith applies the HasEdge predicate on the "project" edge with a given conditions (other predicates).
func HasProjectWith(preds ...predicate.Project) predicate.JobHistory {
	return predicate.JobHistory(func(s *sql.Selector) {
		step := newProjectStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.JobHistory {
	return predicate.JobHistory(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.JobHistory {
	return predicate.JobHistory(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobHistory) predicate.JobHistory {
	return predicate.JobHistory(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobHistory) predicate.JobHistory {
	return predicate.JobHistory(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobHistory) predicate.JobHistory {
	return predicate.JobHistory(sql.NotPredicates(p))
}
