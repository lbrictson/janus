// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/secret"
)

// SecretUpdate is the builder for updating Secret entities.
type SecretUpdate struct {
	config
	hooks    []Hook
	mutation *SecretMutation
}

// Where appends a list predicates to the SecretUpdate builder.
func (_u *SecretUpdate) Where(ps ...predicate.Secret) *SecretUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *SecretUpdate) SetName(v string) *SecretUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SecretUpdate) SetNillableName(v *string) *SecretUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *SecretUpdate) SetValue(v string) *SecretUpdate {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *SecretUpdate) SetNillableValue(v *string) *SecretUpdate {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SecretUpdate) SetCreatedAt(v time.Time) *SecretUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SecretUpdate) SetNillableCreatedAt(v *time.Time) *SecretUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SecretUpdate) SetUpdatedAt(v time.Time) *SecretUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *SecretUpdate) SetProjectID(id int) *SecretUpdate {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_u *SecretUpdate) SetNillableProjectID(id *int) *SecretUpdate {
	if id != nil {
		_u = _u.SetProjectID(*id)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *SecretUpdate) SetProject(v *Project) *SecretUpdate {
	return _u.SetProjectID(v.ID)
}

// Mutation returns the SecretMutation object of the builder.
func (_u *SecretUpdate) Mutation() *SecretMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *SecretUpdate) ClearProject() *SecretUpdate {
	_u.mutation.ClearProject()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SecretUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SecretUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SecretUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SecretUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SecretUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := secret.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SecretUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(secret.Table, secret.Columns, sqlgraph.NewFieldSpec(secret.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(secret.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(secret.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(secret.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(secret.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   secret.ProjectTable,
			Columns: []string{secret.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   secret.ProjectTable,
			Columns: []string{secret.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{secret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SecretUpdateOne is the builder for updating a single Secret entity.
type SecretUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SecretMutation
}

// SetName sets the "name" field.
func (_u *SecretUpdateOne) SetName(v string) *SecretUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *SecretUpdateOne) SetNillableName(v *string) *SecretUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetValue sets the "value" field.
func (_u *SecretUpdateOne) SetValue(v string) *SecretUpdateOne {
	_u.mutation.SetValue(v)
	return _u
}

// SetNillableValue sets the "value" field if the given value is not nil.
func (_u *SecretUpdateOne) SetNillableValue(v *string) *SecretUpdateOne {
	if v != nil {
		_u.SetValue(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *SecretUpdateOne) SetCreatedAt(v time.Time) *SecretUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *SecretUpdateOne) SetNillableCreatedAt(v *time.Time) *SecretUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *SecretUpdateOne) SetUpdatedAt(v time.Time) *SecretUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *SecretUpdateOne) SetProjectID(id int) *SecretUpdateOne {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetNillableProjectID sets the "project" edge to the Project entity by ID if the given value is not nil.
func (_u *SecretUpdateOne) SetNillableProjectID(id *int) *SecretUpdateOne {
	if id != nil {
		_u = _u.SetProjectID(*id)
	}
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *SecretUpdateOne) SetProject(v *Project) *SecretUpdateOne {
	return _u.SetProjectID(v.ID)
}

// Mutation returns the SecretMutation object of the builder.
func (_u *SecretUpdateOne) Mutation() *SecretMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *SecretUpdateOne) ClearProject() *SecretUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// Where appends a list predicates to the SecretUpdate builder.
func (_u *SecretUpdateOne) Where(ps ...predicate.Secret) *SecretUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SecretUpdateOne) Select(field string, fields ...string) *SecretUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Secret entity.
func (_u *SecretUpdateOne) Save(ctx context.Context) (*Secret, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SecretUpdateOne) SaveX(ctx context.Context) *Secret {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SecretUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SecretUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *SecretUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := secret.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *SecretUpdateOne) sqlSave(ctx context.Context) (_node *Secret, err error) {
	_spec := sqlgraph.NewUpdateSpec(secret.Table, secret.Columns, sqlgraph.NewFieldSpec(secret.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Secret.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, secret.FieldID)
		for _, f := range fields {
			if !secret.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != secret.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(secret.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Value(); ok {
		_spec.SetField(secret.FieldValue, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(secret.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(secret.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   secret.ProjectTable,
			Columns: []string{secret.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   secret.ProjectTable,
			Columns: []string{secret.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Secret{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{secret.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
