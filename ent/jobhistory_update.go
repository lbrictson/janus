// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// JobHistoryUpdate is the builder for updating JobHistory entities.
type JobHistoryUpdate struct {
	config
	hooks    []Hook
	mutation *JobHistoryMutation
}

// Where appends a list predicates to the JobHistoryUpdate builder.
func (jhu *JobHistoryUpdate) Where(ps ...predicate.JobHistory) *JobHistoryUpdate {
	jhu.mutation.Where(ps...)
	return jhu
}

// SetWasSuccessful sets the "was_successful" field.
func (jhu *JobHistoryUpdate) SetWasSuccessful(b bool) *JobHistoryUpdate {
	jhu.mutation.SetWasSuccessful(b)
	return jhu
}

// SetNillableWasSuccessful sets the "was_successful" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableWasSuccessful(b *bool) *JobHistoryUpdate {
	if b != nil {
		jhu.SetWasSuccessful(*b)
	}
	return jhu
}

// SetDurationMs sets the "duration_ms" field.
func (jhu *JobHistoryUpdate) SetDurationMs(i int64) *JobHistoryUpdate {
	jhu.mutation.ResetDurationMs()
	jhu.mutation.SetDurationMs(i)
	return jhu
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableDurationMs(i *int64) *JobHistoryUpdate {
	if i != nil {
		jhu.SetDurationMs(*i)
	}
	return jhu
}

// AddDurationMs adds i to the "duration_ms" field.
func (jhu *JobHistoryUpdate) AddDurationMs(i int64) *JobHistoryUpdate {
	jhu.mutation.AddDurationMs(i)
	return jhu
}

// SetParameters sets the "parameters" field.
func (jhu *JobHistoryUpdate) SetParameters(s []schema.Parameter) *JobHistoryUpdate {
	jhu.mutation.SetParameters(s)
	return jhu
}

// AppendParameters appends s to the "parameters" field.
func (jhu *JobHistoryUpdate) AppendParameters(s []schema.Parameter) *JobHistoryUpdate {
	jhu.mutation.AppendParameters(s)
	return jhu
}

// ClearParameters clears the value of the "parameters" field.
func (jhu *JobHistoryUpdate) ClearParameters() *JobHistoryUpdate {
	jhu.mutation.ClearParameters()
	return jhu
}

// SetOutput sets the "output" field.
func (jhu *JobHistoryUpdate) SetOutput(s string) *JobHistoryUpdate {
	jhu.mutation.SetOutput(s)
	return jhu
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableOutput(s *string) *JobHistoryUpdate {
	if s != nil {
		jhu.SetOutput(*s)
	}
	return jhu
}

// SetExitCode sets the "exit_code" field.
func (jhu *JobHistoryUpdate) SetExitCode(i int) *JobHistoryUpdate {
	jhu.mutation.ResetExitCode()
	jhu.mutation.SetExitCode(i)
	return jhu
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableExitCode(i *int) *JobHistoryUpdate {
	if i != nil {
		jhu.SetExitCode(*i)
	}
	return jhu
}

// AddExitCode adds i to the "exit_code" field.
func (jhu *JobHistoryUpdate) AddExitCode(i int) *JobHistoryUpdate {
	jhu.mutation.AddExitCode(i)
	return jhu
}

// SetTriggeredByEmail sets the "triggered_by_email" field.
func (jhu *JobHistoryUpdate) SetTriggeredByEmail(s string) *JobHistoryUpdate {
	jhu.mutation.SetTriggeredByEmail(s)
	return jhu
}

// SetNillableTriggeredByEmail sets the "triggered_by_email" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableTriggeredByEmail(s *string) *JobHistoryUpdate {
	if s != nil {
		jhu.SetTriggeredByEmail(*s)
	}
	return jhu
}

// SetTriggeredByID sets the "triggered_by_id" field.
func (jhu *JobHistoryUpdate) SetTriggeredByID(i int) *JobHistoryUpdate {
	jhu.mutation.ResetTriggeredByID()
	jhu.mutation.SetTriggeredByID(i)
	return jhu
}

// SetNillableTriggeredByID sets the "triggered_by_id" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableTriggeredByID(i *int) *JobHistoryUpdate {
	if i != nil {
		jhu.SetTriggeredByID(*i)
	}
	return jhu
}

// AddTriggeredByID adds i to the "triggered_by_id" field.
func (jhu *JobHistoryUpdate) AddTriggeredByID(i int) *JobHistoryUpdate {
	jhu.mutation.AddTriggeredByID(i)
	return jhu
}

// SetStatus sets the "status" field.
func (jhu *JobHistoryUpdate) SetStatus(s string) *JobHistoryUpdate {
	jhu.mutation.SetStatus(s)
	return jhu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableStatus(s *string) *JobHistoryUpdate {
	if s != nil {
		jhu.SetStatus(*s)
	}
	return jhu
}

// SetTrigger sets the "trigger" field.
func (jhu *JobHistoryUpdate) SetTrigger(s string) *JobHistoryUpdate {
	jhu.mutation.SetTrigger(s)
	return jhu
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (jhu *JobHistoryUpdate) SetNillableTrigger(s *string) *JobHistoryUpdate {
	if s != nil {
		jhu.SetTrigger(*s)
	}
	return jhu
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (jhu *JobHistoryUpdate) SetProjectID(id int) *JobHistoryUpdate {
	jhu.mutation.SetProjectID(id)
	return jhu
}

// SetProject sets the "project" edge to the Project entity.
func (jhu *JobHistoryUpdate) SetProject(p *Project) *JobHistoryUpdate {
	return jhu.SetProjectID(p.ID)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jhu *JobHistoryUpdate) SetJobID(id int) *JobHistoryUpdate {
	jhu.mutation.SetJobID(id)
	return jhu
}

// SetJob sets the "job" edge to the Job entity.
func (jhu *JobHistoryUpdate) SetJob(j *Job) *JobHistoryUpdate {
	return jhu.SetJobID(j.ID)
}

// Mutation returns the JobHistoryMutation object of the builder.
func (jhu *JobHistoryUpdate) Mutation() *JobHistoryMutation {
	return jhu.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (jhu *JobHistoryUpdate) ClearProject() *JobHistoryUpdate {
	jhu.mutation.ClearProject()
	return jhu
}

// ClearJob clears the "job" edge to the Job entity.
func (jhu *JobHistoryUpdate) ClearJob() *JobHistoryUpdate {
	jhu.mutation.ClearJob()
	return jhu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (jhu *JobHistoryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, jhu.sqlSave, jhu.mutation, jhu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jhu *JobHistoryUpdate) SaveX(ctx context.Context) int {
	affected, err := jhu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (jhu *JobHistoryUpdate) Exec(ctx context.Context) error {
	_, err := jhu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhu *JobHistoryUpdate) ExecX(ctx context.Context) {
	if err := jhu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jhu *JobHistoryUpdate) check() error {
	if jhu.mutation.ProjectCleared() && len(jhu.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobHistory.project"`)
	}
	if jhu.mutation.JobCleared() && len(jhu.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobHistory.job"`)
	}
	return nil
}

func (jhu *JobHistoryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := jhu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobhistory.Table, jobhistory.Columns, sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt))
	if ps := jhu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jhu.mutation.WasSuccessful(); ok {
		_spec.SetField(jobhistory.FieldWasSuccessful, field.TypeBool, value)
	}
	if value, ok := jhu.mutation.DurationMs(); ok {
		_spec.SetField(jobhistory.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := jhu.mutation.AddedDurationMs(); ok {
		_spec.AddField(jobhistory.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := jhu.mutation.Parameters(); ok {
		_spec.SetField(jobhistory.FieldParameters, field.TypeJSON, value)
	}
	if value, ok := jhu.mutation.AppendedParameters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobhistory.FieldParameters, value)
		})
	}
	if jhu.mutation.ParametersCleared() {
		_spec.ClearField(jobhistory.FieldParameters, field.TypeJSON)
	}
	if value, ok := jhu.mutation.Output(); ok {
		_spec.SetField(jobhistory.FieldOutput, field.TypeString, value)
	}
	if value, ok := jhu.mutation.ExitCode(); ok {
		_spec.SetField(jobhistory.FieldExitCode, field.TypeInt, value)
	}
	if value, ok := jhu.mutation.AddedExitCode(); ok {
		_spec.AddField(jobhistory.FieldExitCode, field.TypeInt, value)
	}
	if value, ok := jhu.mutation.TriggeredByEmail(); ok {
		_spec.SetField(jobhistory.FieldTriggeredByEmail, field.TypeString, value)
	}
	if value, ok := jhu.mutation.TriggeredByID(); ok {
		_spec.SetField(jobhistory.FieldTriggeredByID, field.TypeInt, value)
	}
	if value, ok := jhu.mutation.AddedTriggeredByID(); ok {
		_spec.AddField(jobhistory.FieldTriggeredByID, field.TypeInt, value)
	}
	if value, ok := jhu.mutation.Status(); ok {
		_spec.SetField(jobhistory.FieldStatus, field.TypeString, value)
	}
	if value, ok := jhu.mutation.Trigger(); ok {
		_spec.SetField(jobhistory.FieldTrigger, field.TypeString, value)
	}
	if jhu.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.ProjectTable,
			Columns: []string{jobhistory.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhu.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.ProjectTable,
			Columns: []string{jobhistory.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jhu.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.JobTable,
			Columns: []string{jobhistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhu.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.JobTable,
			Columns: []string{jobhistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, jhu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	jhu.mutation.done = true
	return n, nil
}

// JobHistoryUpdateOne is the builder for updating a single JobHistory entity.
type JobHistoryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobHistoryMutation
}

// SetWasSuccessful sets the "was_successful" field.
func (jhuo *JobHistoryUpdateOne) SetWasSuccessful(b bool) *JobHistoryUpdateOne {
	jhuo.mutation.SetWasSuccessful(b)
	return jhuo
}

// SetNillableWasSuccessful sets the "was_successful" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableWasSuccessful(b *bool) *JobHistoryUpdateOne {
	if b != nil {
		jhuo.SetWasSuccessful(*b)
	}
	return jhuo
}

// SetDurationMs sets the "duration_ms" field.
func (jhuo *JobHistoryUpdateOne) SetDurationMs(i int64) *JobHistoryUpdateOne {
	jhuo.mutation.ResetDurationMs()
	jhuo.mutation.SetDurationMs(i)
	return jhuo
}

// SetNillableDurationMs sets the "duration_ms" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableDurationMs(i *int64) *JobHistoryUpdateOne {
	if i != nil {
		jhuo.SetDurationMs(*i)
	}
	return jhuo
}

// AddDurationMs adds i to the "duration_ms" field.
func (jhuo *JobHistoryUpdateOne) AddDurationMs(i int64) *JobHistoryUpdateOne {
	jhuo.mutation.AddDurationMs(i)
	return jhuo
}

// SetParameters sets the "parameters" field.
func (jhuo *JobHistoryUpdateOne) SetParameters(s []schema.Parameter) *JobHistoryUpdateOne {
	jhuo.mutation.SetParameters(s)
	return jhuo
}

// AppendParameters appends s to the "parameters" field.
func (jhuo *JobHistoryUpdateOne) AppendParameters(s []schema.Parameter) *JobHistoryUpdateOne {
	jhuo.mutation.AppendParameters(s)
	return jhuo
}

// ClearParameters clears the value of the "parameters" field.
func (jhuo *JobHistoryUpdateOne) ClearParameters() *JobHistoryUpdateOne {
	jhuo.mutation.ClearParameters()
	return jhuo
}

// SetOutput sets the "output" field.
func (jhuo *JobHistoryUpdateOne) SetOutput(s string) *JobHistoryUpdateOne {
	jhuo.mutation.SetOutput(s)
	return jhuo
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableOutput(s *string) *JobHistoryUpdateOne {
	if s != nil {
		jhuo.SetOutput(*s)
	}
	return jhuo
}

// SetExitCode sets the "exit_code" field.
func (jhuo *JobHistoryUpdateOne) SetExitCode(i int) *JobHistoryUpdateOne {
	jhuo.mutation.ResetExitCode()
	jhuo.mutation.SetExitCode(i)
	return jhuo
}

// SetNillableExitCode sets the "exit_code" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableExitCode(i *int) *JobHistoryUpdateOne {
	if i != nil {
		jhuo.SetExitCode(*i)
	}
	return jhuo
}

// AddExitCode adds i to the "exit_code" field.
func (jhuo *JobHistoryUpdateOne) AddExitCode(i int) *JobHistoryUpdateOne {
	jhuo.mutation.AddExitCode(i)
	return jhuo
}

// SetTriggeredByEmail sets the "triggered_by_email" field.
func (jhuo *JobHistoryUpdateOne) SetTriggeredByEmail(s string) *JobHistoryUpdateOne {
	jhuo.mutation.SetTriggeredByEmail(s)
	return jhuo
}

// SetNillableTriggeredByEmail sets the "triggered_by_email" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableTriggeredByEmail(s *string) *JobHistoryUpdateOne {
	if s != nil {
		jhuo.SetTriggeredByEmail(*s)
	}
	return jhuo
}

// SetTriggeredByID sets the "triggered_by_id" field.
func (jhuo *JobHistoryUpdateOne) SetTriggeredByID(i int) *JobHistoryUpdateOne {
	jhuo.mutation.ResetTriggeredByID()
	jhuo.mutation.SetTriggeredByID(i)
	return jhuo
}

// SetNillableTriggeredByID sets the "triggered_by_id" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableTriggeredByID(i *int) *JobHistoryUpdateOne {
	if i != nil {
		jhuo.SetTriggeredByID(*i)
	}
	return jhuo
}

// AddTriggeredByID adds i to the "triggered_by_id" field.
func (jhuo *JobHistoryUpdateOne) AddTriggeredByID(i int) *JobHistoryUpdateOne {
	jhuo.mutation.AddTriggeredByID(i)
	return jhuo
}

// SetStatus sets the "status" field.
func (jhuo *JobHistoryUpdateOne) SetStatus(s string) *JobHistoryUpdateOne {
	jhuo.mutation.SetStatus(s)
	return jhuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableStatus(s *string) *JobHistoryUpdateOne {
	if s != nil {
		jhuo.SetStatus(*s)
	}
	return jhuo
}

// SetTrigger sets the "trigger" field.
func (jhuo *JobHistoryUpdateOne) SetTrigger(s string) *JobHistoryUpdateOne {
	jhuo.mutation.SetTrigger(s)
	return jhuo
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (jhuo *JobHistoryUpdateOne) SetNillableTrigger(s *string) *JobHistoryUpdateOne {
	if s != nil {
		jhuo.SetTrigger(*s)
	}
	return jhuo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (jhuo *JobHistoryUpdateOne) SetProjectID(id int) *JobHistoryUpdateOne {
	jhuo.mutation.SetProjectID(id)
	return jhuo
}

// SetProject sets the "project" edge to the Project entity.
func (jhuo *JobHistoryUpdateOne) SetProject(p *Project) *JobHistoryUpdateOne {
	return jhuo.SetProjectID(p.ID)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jhuo *JobHistoryUpdateOne) SetJobID(id int) *JobHistoryUpdateOne {
	jhuo.mutation.SetJobID(id)
	return jhuo
}

// SetJob sets the "job" edge to the Job entity.
func (jhuo *JobHistoryUpdateOne) SetJob(j *Job) *JobHistoryUpdateOne {
	return jhuo.SetJobID(j.ID)
}

// Mutation returns the JobHistoryMutation object of the builder.
func (jhuo *JobHistoryUpdateOne) Mutation() *JobHistoryMutation {
	return jhuo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (jhuo *JobHistoryUpdateOne) ClearProject() *JobHistoryUpdateOne {
	jhuo.mutation.ClearProject()
	return jhuo
}

// ClearJob clears the "job" edge to the Job entity.
func (jhuo *JobHistoryUpdateOne) ClearJob() *JobHistoryUpdateOne {
	jhuo.mutation.ClearJob()
	return jhuo
}

// Where appends a list predicates to the JobHistoryUpdate builder.
func (jhuo *JobHistoryUpdateOne) Where(ps ...predicate.JobHistory) *JobHistoryUpdateOne {
	jhuo.mutation.Where(ps...)
	return jhuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (jhuo *JobHistoryUpdateOne) Select(field string, fields ...string) *JobHistoryUpdateOne {
	jhuo.fields = append([]string{field}, fields...)
	return jhuo
}

// Save executes the query and returns the updated JobHistory entity.
func (jhuo *JobHistoryUpdateOne) Save(ctx context.Context) (*JobHistory, error) {
	return withHooks(ctx, jhuo.sqlSave, jhuo.mutation, jhuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (jhuo *JobHistoryUpdateOne) SaveX(ctx context.Context) *JobHistory {
	node, err := jhuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (jhuo *JobHistoryUpdateOne) Exec(ctx context.Context) error {
	_, err := jhuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jhuo *JobHistoryUpdateOne) ExecX(ctx context.Context) {
	if err := jhuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jhuo *JobHistoryUpdateOne) check() error {
	if jhuo.mutation.ProjectCleared() && len(jhuo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobHistory.project"`)
	}
	if jhuo.mutation.JobCleared() && len(jhuo.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobHistory.job"`)
	}
	return nil
}

func (jhuo *JobHistoryUpdateOne) sqlSave(ctx context.Context) (_node *JobHistory, err error) {
	if err := jhuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobhistory.Table, jobhistory.Columns, sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt))
	id, ok := jhuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobHistory.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := jhuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobhistory.FieldID)
		for _, f := range fields {
			if !jobhistory.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobhistory.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := jhuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := jhuo.mutation.WasSuccessful(); ok {
		_spec.SetField(jobhistory.FieldWasSuccessful, field.TypeBool, value)
	}
	if value, ok := jhuo.mutation.DurationMs(); ok {
		_spec.SetField(jobhistory.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := jhuo.mutation.AddedDurationMs(); ok {
		_spec.AddField(jobhistory.FieldDurationMs, field.TypeInt64, value)
	}
	if value, ok := jhuo.mutation.Parameters(); ok {
		_spec.SetField(jobhistory.FieldParameters, field.TypeJSON, value)
	}
	if value, ok := jhuo.mutation.AppendedParameters(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobhistory.FieldParameters, value)
		})
	}
	if jhuo.mutation.ParametersCleared() {
		_spec.ClearField(jobhistory.FieldParameters, field.TypeJSON)
	}
	if value, ok := jhuo.mutation.Output(); ok {
		_spec.SetField(jobhistory.FieldOutput, field.TypeString, value)
	}
	if value, ok := jhuo.mutation.ExitCode(); ok {
		_spec.SetField(jobhistory.FieldExitCode, field.TypeInt, value)
	}
	if value, ok := jhuo.mutation.AddedExitCode(); ok {
		_spec.AddField(jobhistory.FieldExitCode, field.TypeInt, value)
	}
	if value, ok := jhuo.mutation.TriggeredByEmail(); ok {
		_spec.SetField(jobhistory.FieldTriggeredByEmail, field.TypeString, value)
	}
	if value, ok := jhuo.mutation.TriggeredByID(); ok {
		_spec.SetField(jobhistory.FieldTriggeredByID, field.TypeInt, value)
	}
	if value, ok := jhuo.mutation.AddedTriggeredByID(); ok {
		_spec.AddField(jobhistory.FieldTriggeredByID, field.TypeInt, value)
	}
	if value, ok := jhuo.mutation.Status(); ok {
		_spec.SetField(jobhistory.FieldStatus, field.TypeString, value)
	}
	if value, ok := jhuo.mutation.Trigger(); ok {
		_spec.SetField(jobhistory.FieldTrigger, field.TypeString, value)
	}
	if jhuo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.ProjectTable,
			Columns: []string{jobhistory.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhuo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.ProjectTable,
			Columns: []string{jobhistory.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if jhuo.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.JobTable,
			Columns: []string{jobhistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := jhuo.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.JobTable,
			Columns: []string{jobhistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobHistory{config: jhuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, jhuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobhistory.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	jhuo.mutation.done = true
	return _node, nil
}
