// Code generated by ent, DO NOT EDIT.

package job

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the job type in the database.
	Label = "job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldCronSchedule holds the string denoting the cron_schedule field in the database.
	FieldCronSchedule = "cron_schedule"
	// FieldScheduleEnabled holds the string denoting the schedule_enabled field in the database.
	FieldScheduleEnabled = "schedule_enabled"
	// FieldAllowConcurrentRuns holds the string denoting the allow_concurrent_runs field in the database.
	FieldAllowConcurrentRuns = "allow_concurrent_runs"
	// FieldArguments holds the string denoting the arguments field in the database.
	FieldArguments = "arguments"
	// FieldRequiresFileUpload holds the string denoting the requires_file_upload field in the database.
	FieldRequiresFileUpload = "requires_file_upload"
	// FieldAverageDurationMs holds the string denoting the average_duration_ms field in the database.
	FieldAverageDurationMs = "average_duration_ms"
	// FieldTimeoutSeconds holds the string denoting the timeout_seconds field in the database.
	FieldTimeoutSeconds = "timeout_seconds"
	// FieldLastEditTime holds the string denoting the last_edit_time field in the database.
	FieldLastEditTime = "last_edit_time"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldNotifyOnStartChannelIds holds the string denoting the notify_on_start_channel_ids field in the database.
	FieldNotifyOnStartChannelIds = "notify_on_start_channel_ids"
	// FieldNotifyOnSuccessChannelIds holds the string denoting the notify_on_success_channel_ids field in the database.
	FieldNotifyOnSuccessChannelIds = "notify_on_success_channel_ids"
	// FieldNotifyOnFailureChannelIds holds the string denoting the notify_on_failure_channel_ids field in the database.
	FieldNotifyOnFailureChannelIds = "notify_on_failure_channel_ids"
	// FieldLastRunTime holds the string denoting the last_run_time field in the database.
	FieldLastRunTime = "last_run_time"
	// FieldNextCronRunTime holds the string denoting the next_cron_run_time field in the database.
	FieldNextCronRunTime = "next_cron_run_time"
	// FieldLastRunSuccess holds the string denoting the last_run_success field in the database.
	FieldLastRunSuccess = "last_run_success"
	// EdgeProject holds the string denoting the project edge name in mutations.
	EdgeProject = "project"
	// EdgeHistory holds the string denoting the history edge name in mutations.
	EdgeHistory = "history"
	// Table holds the table name of the job in the database.
	Table = "jobs"
	// ProjectTable is the table that holds the project relation/edge.
	ProjectTable = "jobs"
	// ProjectInverseTable is the table name for the Project entity.
	// It exists in this package in order to avoid circular dependency with the "project" package.
	ProjectInverseTable = "projects"
	// ProjectColumn is the table column denoting the project relation/edge.
	ProjectColumn = "project_jobs"
	// HistoryTable is the table that holds the history relation/edge.
	HistoryTable = "job_histories"
	// HistoryInverseTable is the table name for the JobHistory entity.
	// It exists in this package in order to avoid circular dependency with the "jobhistory" package.
	HistoryInverseTable = "job_histories"
	// HistoryColumn is the table column denoting the history relation/edge.
	HistoryColumn = "job_history"
)

// Columns holds all SQL columns for job fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldDescription,
	FieldCronSchedule,
	FieldScheduleEnabled,
	FieldAllowConcurrentRuns,
	FieldArguments,
	FieldRequiresFileUpload,
	FieldAverageDurationMs,
	FieldTimeoutSeconds,
	FieldLastEditTime,
	FieldCreatedAt,
	FieldNotifyOnStartChannelIds,
	FieldNotifyOnSuccessChannelIds,
	FieldNotifyOnFailureChannelIds,
	FieldLastRunTime,
	FieldNextCronRunTime,
	FieldLastRunSuccess,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"project_jobs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultScheduleEnabled holds the default value on creation for the "schedule_enabled" field.
	DefaultScheduleEnabled bool
	// DefaultAllowConcurrentRuns holds the default value on creation for the "allow_concurrent_runs" field.
	DefaultAllowConcurrentRuns bool
	// DefaultRequiresFileUpload holds the default value on creation for the "requires_file_upload" field.
	DefaultRequiresFileUpload bool
	// DefaultAverageDurationMs holds the default value on creation for the "average_duration_ms" field.
	DefaultAverageDurationMs int64
	// DefaultTimeoutSeconds holds the default value on creation for the "timeout_seconds" field.
	DefaultTimeoutSeconds int
	// UpdateDefaultLastEditTime holds the default value on update for the "last_edit_time" field.
	UpdateDefaultLastEditTime func() time.Time
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultLastRunSuccess holds the default value on creation for the "last_run_success" field.
	DefaultLastRunSuccess bool
)

// OrderOption defines the ordering options for the Job queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByCronSchedule orders the results by the cron_schedule field.
func ByCronSchedule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronSchedule, opts...).ToFunc()
}

// ByScheduleEnabled orders the results by the schedule_enabled field.
func ByScheduleEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduleEnabled, opts...).ToFunc()
}

// ByAllowConcurrentRuns orders the results by the allow_concurrent_runs field.
func ByAllowConcurrentRuns(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowConcurrentRuns, opts...).ToFunc()
}

// ByRequiresFileUpload orders the results by the requires_file_upload field.
func ByRequiresFileUpload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiresFileUpload, opts...).ToFunc()
}

// ByAverageDurationMs orders the results by the average_duration_ms field.
func ByAverageDurationMs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAverageDurationMs, opts...).ToFunc()
}

// ByTimeoutSeconds orders the results by the timeout_seconds field.
func ByTimeoutSeconds(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldTimeoutSeconds, opts...).ToFunc()
}

// ByLastEditTime orders the results by the last_edit_time field.
func ByLastEditTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastEditTime, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByLastRunTime orders the results by the last_run_time field.
func ByLastRunTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunTime, opts...).ToFunc()
}

// ByNextCronRunTime orders the results by the next_cron_run_time field.
func ByNextCronRunTime(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldNextCronRunTime, opts...).ToFunc()
}

// ByLastRunSuccess orders the results by the last_run_success field.
func ByLastRunSuccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLastRunSuccess, opts...).ToFunc()
}

// ByProjectField orders the results by project field.
func ByProjectField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectStep(), sql.OrderByField(field, opts...))
	}
}

// ByHistoryCount orders the results by history count.
func ByHistoryCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newHistoryStep(), opts...)
	}
}

// ByHistory orders the results by history terms.
func ByHistory(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newHistoryStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProjectTable, ProjectColumn),
	)
}
func newHistoryStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(HistoryInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, HistoryTable, HistoryColumn),
	)
}
