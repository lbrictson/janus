// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/authconfig"
)

// AuthConfig is the model entity for the AuthConfig schema.
type AuthConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// EnableSSO holds the value of the "enable_sso" field.
	EnableSSO bool `json:"enable_sso,omitempty"`
	// DisablePasswordLogin holds the value of the "disable_password_login" field.
	DisablePasswordLogin bool `json:"disable_password_login,omitempty"`
	// SSOProvider holds the value of the "sso_provider" field.
	SSOProvider string `json:"sso_provider,omitempty"`
	// SSOClientID holds the value of the "sso_client_id" field.
	SSOClientID string `json:"sso_client_id,omitempty"`
	// SSOClientSecret holds the value of the "sso_client_secret" field.
	SSOClientSecret string `json:"sso_client_secret,omitempty"`
	// SSORedirectURI holds the value of the "sso_redirect_uri" field.
	SSORedirectURI string `json:"sso_redirect_uri,omitempty"`
	// SSOAuthorizationURL holds the value of the "sso_authorization_url" field.
	SSOAuthorizationURL string `json:"sso_authorization_url,omitempty"`
	// SSOTokenURL holds the value of the "sso_token_url" field.
	SSOTokenURL string `json:"sso_token_url,omitempty"`
	// SSOUserInfoURL holds the value of the "sso_user_info_url" field.
	SSOUserInfoURL string `json:"sso_user_info_url,omitempty"`
	// EntraTenantID holds the value of the "entra_tenant_id" field.
	EntraTenantID string `json:"entra_tenant_id,omitempty"`
	// GoogleAllowedDomains holds the value of the "google_allowed_domains" field.
	GoogleAllowedDomains string `json:"google_allowed_domains,omitempty"`
	// SessionKey holds the value of the "session_key" field.
	SessionKey   []byte `json:"session_key,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*AuthConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authconfig.FieldSessionKey:
			values[i] = new([]byte)
		case authconfig.FieldEnableSSO, authconfig.FieldDisablePasswordLogin:
			values[i] = new(sql.NullBool)
		case authconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case authconfig.FieldSSOProvider, authconfig.FieldSSOClientID, authconfig.FieldSSOClientSecret, authconfig.FieldSSORedirectURI, authconfig.FieldSSOAuthorizationURL, authconfig.FieldSSOTokenURL, authconfig.FieldSSOUserInfoURL, authconfig.FieldEntraTenantID, authconfig.FieldGoogleAllowedDomains:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the AuthConfig fields.
func (ac *AuthConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ac.ID = int(value.Int64)
		case authconfig.FieldEnableSSO:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enable_sso", values[i])
			} else if value.Valid {
				ac.EnableSSO = value.Bool
			}
		case authconfig.FieldDisablePasswordLogin:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field disable_password_login", values[i])
			} else if value.Valid {
				ac.DisablePasswordLogin = value.Bool
			}
		case authconfig.FieldSSOProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_provider", values[i])
			} else if value.Valid {
				ac.SSOProvider = value.String
			}
		case authconfig.FieldSSOClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_client_id", values[i])
			} else if value.Valid {
				ac.SSOClientID = value.String
			}
		case authconfig.FieldSSOClientSecret:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_client_secret", values[i])
			} else if value.Valid {
				ac.SSOClientSecret = value.String
			}
		case authconfig.FieldSSORedirectURI:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_redirect_uri", values[i])
			} else if value.Valid {
				ac.SSORedirectURI = value.String
			}
		case authconfig.FieldSSOAuthorizationURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_authorization_url", values[i])
			} else if value.Valid {
				ac.SSOAuthorizationURL = value.String
			}
		case authconfig.FieldSSOTokenURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_token_url", values[i])
			} else if value.Valid {
				ac.SSOTokenURL = value.String
			}
		case authconfig.FieldSSOUserInfoURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field sso_user_info_url", values[i])
			} else if value.Valid {
				ac.SSOUserInfoURL = value.String
			}
		case authconfig.FieldEntraTenantID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field entra_tenant_id", values[i])
			} else if value.Valid {
				ac.EntraTenantID = value.String
			}
		case authconfig.FieldGoogleAllowedDomains:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field google_allowed_domains", values[i])
			} else if value.Valid {
				ac.GoogleAllowedDomains = value.String
			}
		case authconfig.FieldSessionKey:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field session_key", values[i])
			} else if value != nil {
				ac.SessionKey = *value
			}
		default:
			ac.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the AuthConfig.
// This includes values selected through modifiers, order, etc.
func (ac *AuthConfig) Value(name string) (ent.Value, error) {
	return ac.selectValues.Get(name)
}

// Update returns a builder for updating this AuthConfig.
// Note that you need to call AuthConfig.Unwrap() before calling this method if this AuthConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (ac *AuthConfig) Update() *AuthConfigUpdateOne {
	return NewAuthConfigClient(ac.config).UpdateOne(ac)
}

// Unwrap unwraps the AuthConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ac *AuthConfig) Unwrap() *AuthConfig {
	_tx, ok := ac.config.driver.(*txDriver)
	if !ok {
		panic("ent: AuthConfig is not a transactional entity")
	}
	ac.config.driver = _tx.drv
	return ac
}

// String implements the fmt.Stringer.
func (ac *AuthConfig) String() string {
	var builder strings.Builder
	builder.WriteString("AuthConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ac.ID))
	builder.WriteString("enable_sso=")
	builder.WriteString(fmt.Sprintf("%v", ac.EnableSSO))
	builder.WriteString(", ")
	builder.WriteString("disable_password_login=")
	builder.WriteString(fmt.Sprintf("%v", ac.DisablePasswordLogin))
	builder.WriteString(", ")
	builder.WriteString("sso_provider=")
	builder.WriteString(ac.SSOProvider)
	builder.WriteString(", ")
	builder.WriteString("sso_client_id=")
	builder.WriteString(ac.SSOClientID)
	builder.WriteString(", ")
	builder.WriteString("sso_client_secret=")
	builder.WriteString(ac.SSOClientSecret)
	builder.WriteString(", ")
	builder.WriteString("sso_redirect_uri=")
	builder.WriteString(ac.SSORedirectURI)
	builder.WriteString(", ")
	builder.WriteString("sso_authorization_url=")
	builder.WriteString(ac.SSOAuthorizationURL)
	builder.WriteString(", ")
	builder.WriteString("sso_token_url=")
	builder.WriteString(ac.SSOTokenURL)
	builder.WriteString(", ")
	builder.WriteString("sso_user_info_url=")
	builder.WriteString(ac.SSOUserInfoURL)
	builder.WriteString(", ")
	builder.WriteString("entra_tenant_id=")
	builder.WriteString(ac.EntraTenantID)
	builder.WriteString(", ")
	builder.WriteString("google_allowed_domains=")
	builder.WriteString(ac.GoogleAllowedDomains)
	builder.WriteString(", ")
	builder.WriteString("session_key=")
	builder.WriteString(fmt.Sprintf("%v", ac.SessionKey))
	builder.WriteByte(')')
	return builder.String()
}

// AuthConfigs is a parsable slice of AuthConfig.
type AuthConfigs []*AuthConfig
