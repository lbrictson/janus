// Code generated by ent, DO NOT EDIT.

package notificationchannel

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/schema"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldDescription, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldCreatedAt, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldUpdatedAt, v))
}

// Enabled applies equality check predicate on the "enabled" field. It's identical to EnabledEQ.
func Enabled(v bool) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldEnabled, v))
}

// RetryCount applies equality check predicate on the "retry_count" field. It's identical to RetryCountEQ.
func RetryCount(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldRetryCount, v))
}

// LastUsed applies equality check predicate on the "last_used" field. It's identical to LastUsedEQ.
func LastUsed(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldLastUsed, v))
}

// LastError applies equality check predicate on the "last_error" field. It's identical to LastErrorEQ.
func LastError(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldLastError, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionIsNil applies the IsNil predicate on the "description" field.
func DescriptionIsNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIsNull(FieldDescription))
}

// DescriptionNotNil applies the NotNil predicate on the "description" field.
func DescriptionNotNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotNull(FieldDescription))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldContainsFold(FieldDescription, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v schema.NotificationChannelType) predicate.NotificationChannel {
	vc := v
	return predicate.NotificationChannel(sql.FieldEQ(FieldType, vc))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v schema.NotificationChannelType) predicate.NotificationChannel {
	vc := v
	return predicate.NotificationChannel(sql.FieldNEQ(FieldType, vc))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...schema.NotificationChannelType) predicate.NotificationChannel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationChannel(sql.FieldIn(FieldType, v...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...schema.NotificationChannelType) predicate.NotificationChannel {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NotificationChannel(sql.FieldNotIn(FieldType, v...))
}

// ConfigIsNil applies the IsNil predicate on the "config" field.
func ConfigIsNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIsNull(FieldConfig))
}

// ConfigNotNil applies the NotNil predicate on the "config" field.
func ConfigNotNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotNull(FieldConfig))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldCreatedAt, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldUpdatedAt, v))
}

// EnabledEQ applies the EQ predicate on the "enabled" field.
func EnabledEQ(v bool) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldEnabled, v))
}

// EnabledNEQ applies the NEQ predicate on the "enabled" field.
func EnabledNEQ(v bool) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldEnabled, v))
}

// RetryCountEQ applies the EQ predicate on the "retry_count" field.
func RetryCountEQ(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldRetryCount, v))
}

// RetryCountNEQ applies the NEQ predicate on the "retry_count" field.
func RetryCountNEQ(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldRetryCount, v))
}

// RetryCountIn applies the In predicate on the "retry_count" field.
func RetryCountIn(vs ...int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldRetryCount, vs...))
}

// RetryCountNotIn applies the NotIn predicate on the "retry_count" field.
func RetryCountNotIn(vs ...int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldRetryCount, vs...))
}

// RetryCountGT applies the GT predicate on the "retry_count" field.
func RetryCountGT(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldRetryCount, v))
}

// RetryCountGTE applies the GTE predicate on the "retry_count" field.
func RetryCountGTE(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldRetryCount, v))
}

// RetryCountLT applies the LT predicate on the "retry_count" field.
func RetryCountLT(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldRetryCount, v))
}

// RetryCountLTE applies the LTE predicate on the "retry_count" field.
func RetryCountLTE(v int) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldRetryCount, v))
}

// RetryCountIsNil applies the IsNil predicate on the "retry_count" field.
func RetryCountIsNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIsNull(FieldRetryCount))
}

// RetryCountNotNil applies the NotNil predicate on the "retry_count" field.
func RetryCountNotNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotNull(FieldRetryCount))
}

// LastUsedEQ applies the EQ predicate on the "last_used" field.
func LastUsedEQ(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldLastUsed, v))
}

// LastUsedNEQ applies the NEQ predicate on the "last_used" field.
func LastUsedNEQ(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldLastUsed, v))
}

// LastUsedIn applies the In predicate on the "last_used" field.
func LastUsedIn(vs ...time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldLastUsed, vs...))
}

// LastUsedNotIn applies the NotIn predicate on the "last_used" field.
func LastUsedNotIn(vs ...time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldLastUsed, vs...))
}

// LastUsedGT applies the GT predicate on the "last_used" field.
func LastUsedGT(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldLastUsed, v))
}

// LastUsedGTE applies the GTE predicate on the "last_used" field.
func LastUsedGTE(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldLastUsed, v))
}

// LastUsedLT applies the LT predicate on the "last_used" field.
func LastUsedLT(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldLastUsed, v))
}

// LastUsedLTE applies the LTE predicate on the "last_used" field.
func LastUsedLTE(v time.Time) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldLastUsed, v))
}

// LastUsedIsNil applies the IsNil predicate on the "last_used" field.
func LastUsedIsNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIsNull(FieldLastUsed))
}

// LastUsedNotNil applies the NotNil predicate on the "last_used" field.
func LastUsedNotNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotNull(FieldLastUsed))
}

// LastErrorEQ applies the EQ predicate on the "last_error" field.
func LastErrorEQ(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEQ(FieldLastError, v))
}

// LastErrorNEQ applies the NEQ predicate on the "last_error" field.
func LastErrorNEQ(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNEQ(FieldLastError, v))
}

// LastErrorIn applies the In predicate on the "last_error" field.
func LastErrorIn(vs ...string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIn(FieldLastError, vs...))
}

// LastErrorNotIn applies the NotIn predicate on the "last_error" field.
func LastErrorNotIn(vs ...string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotIn(FieldLastError, vs...))
}

// LastErrorGT applies the GT predicate on the "last_error" field.
func LastErrorGT(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGT(FieldLastError, v))
}

// LastErrorGTE applies the GTE predicate on the "last_error" field.
func LastErrorGTE(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldGTE(FieldLastError, v))
}

// LastErrorLT applies the LT predicate on the "last_error" field.
func LastErrorLT(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLT(FieldLastError, v))
}

// LastErrorLTE applies the LTE predicate on the "last_error" field.
func LastErrorLTE(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldLTE(FieldLastError, v))
}

// LastErrorContains applies the Contains predicate on the "last_error" field.
func LastErrorContains(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldContains(FieldLastError, v))
}

// LastErrorHasPrefix applies the HasPrefix predicate on the "last_error" field.
func LastErrorHasPrefix(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldHasPrefix(FieldLastError, v))
}

// LastErrorHasSuffix applies the HasSuffix predicate on the "last_error" field.
func LastErrorHasSuffix(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldHasSuffix(FieldLastError, v))
}

// LastErrorIsNil applies the IsNil predicate on the "last_error" field.
func LastErrorIsNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldIsNull(FieldLastError))
}

// LastErrorNotNil applies the NotNil predicate on the "last_error" field.
func LastErrorNotNil() predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldNotNull(FieldLastError))
}

// LastErrorEqualFold applies the EqualFold predicate on the "last_error" field.
func LastErrorEqualFold(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldEqualFold(FieldLastError, v))
}

// LastErrorContainsFold applies the ContainsFold predicate on the "last_error" field.
func LastErrorContainsFold(v string) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.FieldContainsFold(FieldLastError, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NotificationChannel) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NotificationChannel) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NotificationChannel) predicate.NotificationChannel {
	return predicate.NotificationChannel(sql.NotPredicates(p))
}
