// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// JobHistoryCreate is the builder for creating a JobHistory entity.
type JobHistoryCreate struct {
	config
	mutation *JobHistoryMutation
	hooks    []Hook
}

// SetWasSuccessful sets the "was_successful" field.
func (_c *JobHistoryCreate) SetWasSuccessful(v bool) *JobHistoryCreate {
	_c.mutation.SetWasSuccessful(v)
	return _c
}

// SetDurationMs sets the "duration_ms" field.
func (_c *JobHistoryCreate) SetDurationMs(v int64) *JobHistoryCreate {
	_c.mutation.SetDurationMs(v)
	return _c
}

// SetParameters sets the "parameters" field.
func (_c *JobHistoryCreate) SetParameters(v []schema.Parameter) *JobHistoryCreate {
	_c.mutation.SetParameters(v)
	return _c
}

// SetOutput sets the "output" field.
func (_c *JobHistoryCreate) SetOutput(v string) *JobHistoryCreate {
	_c.mutation.SetOutput(v)
	return _c
}

// SetNillableOutput sets the "output" field if the given value is not nil.
func (_c *JobHistoryCreate) SetNillableOutput(v *string) *JobHistoryCreate {
	if v != nil {
		_c.SetOutput(*v)
	}
	return _c
}

// SetExitCode sets the "exit_code" field.
func (_c *JobHistoryCreate) SetExitCode(v int) *JobHistoryCreate {
	_c.mutation.SetExitCode(v)
	return _c
}

// SetTriggeredByEmail sets the "triggered_by_email" field.
func (_c *JobHistoryCreate) SetTriggeredByEmail(v string) *JobHistoryCreate {
	_c.mutation.SetTriggeredByEmail(v)
	return _c
}

// SetTriggeredByID sets the "triggered_by_id" field.
func (_c *JobHistoryCreate) SetTriggeredByID(v int) *JobHistoryCreate {
	_c.mutation.SetTriggeredByID(v)
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *JobHistoryCreate) SetCreatedAt(v time.Time) *JobHistoryCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *JobHistoryCreate) SetNillableCreatedAt(v *time.Time) *JobHistoryCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetStatus sets the "status" field.
func (_c *JobHistoryCreate) SetStatus(v string) *JobHistoryCreate {
	_c.mutation.SetStatus(v)
	return _c
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (_c *JobHistoryCreate) SetNillableStatus(v *string) *JobHistoryCreate {
	if v != nil {
		_c.SetStatus(*v)
	}
	return _c
}

// SetTrigger sets the "trigger" field.
func (_c *JobHistoryCreate) SetTrigger(v string) *JobHistoryCreate {
	_c.mutation.SetTrigger(v)
	return _c
}

// SetNillableTrigger sets the "trigger" field if the given value is not nil.
func (_c *JobHistoryCreate) SetNillableTrigger(v *string) *JobHistoryCreate {
	if v != nil {
		_c.SetTrigger(*v)
	}
	return _c
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_c *JobHistoryCreate) SetProjectID(id int) *JobHistoryCreate {
	_c.mutation.SetProjectID(id)
	return _c
}

// SetProject sets the "project" edge to the Project entity.
func (_c *JobHistoryCreate) SetProject(v *Project) *JobHistoryCreate {
	return _c.SetProjectID(v.ID)
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_c *JobHistoryCreate) SetJobID(id int) *JobHistoryCreate {
	_c.mutation.SetJobID(id)
	return _c
}

// SetJob sets the "job" edge to the Job entity.
func (_c *JobHistoryCreate) SetJob(v *Job) *JobHistoryCreate {
	return _c.SetJobID(v.ID)
}

// Mutation returns the JobHistoryMutation object of the builder.
func (_c *JobHistoryCreate) Mutation() *JobHistoryMutation {
	return _c.mutation
}

// Save creates the JobHistory in the database.
func (_c *JobHistoryCreate) Save(ctx context.Context) (*JobHistory, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *JobHistoryCreate) SaveX(ctx context.Context) *JobHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobHistoryCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobHistoryCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *JobHistoryCreate) defaults() {
	if _, ok := _c.mutation.Output(); !ok {
		v := jobhistory.DefaultOutput
		_c.mutation.SetOutput(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := jobhistory.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.Status(); !ok {
		v := jobhistory.DefaultStatus
		_c.mutation.SetStatus(v)
	}
	if _, ok := _c.mutation.Trigger(); !ok {
		v := jobhistory.DefaultTrigger
		_c.mutation.SetTrigger(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *JobHistoryCreate) check() error {
	if _, ok := _c.mutation.WasSuccessful(); !ok {
		return &ValidationError{Name: "was_successful", err: errors.New(`ent: missing required field "JobHistory.was_successful"`)}
	}
	if _, ok := _c.mutation.DurationMs(); !ok {
		return &ValidationError{Name: "duration_ms", err: errors.New(`ent: missing required field "JobHistory.duration_ms"`)}
	}
	if _, ok := _c.mutation.Output(); !ok {
		return &ValidationError{Name: "output", err: errors.New(`ent: missing required field "JobHistory.output"`)}
	}
	if _, ok := _c.mutation.ExitCode(); !ok {
		return &ValidationError{Name: "exit_code", err: errors.New(`ent: missing required field "JobHistory.exit_code"`)}
	}
	if _, ok := _c.mutation.TriggeredByEmail(); !ok {
		return &ValidationError{Name: "triggered_by_email", err: errors.New(`ent: missing required field "JobHistory.triggered_by_email"`)}
	}
	if _, ok := _c.mutation.TriggeredByID(); !ok {
		return &ValidationError{Name: "triggered_by_id", err: errors.New(`ent: missing required field "JobHistory.triggered_by_id"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobHistory.created_at"`)}
	}
	if _, ok := _c.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "JobHistory.status"`)}
	}
	if _, ok := _c.mutation.Trigger(); !ok {
		return &ValidationError{Name: "trigger", err: errors.New(`ent: missing required field "JobHistory.trigger"`)}
	}
	if len(_c.mutation.ProjectIDs()) == 0 {
		return &ValidationError{Name: "project", err: errors.New(`ent: missing required edge "JobHistory.project"`)}
	}
	if len(_c.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "JobHistory.job"`)}
	}
	return nil
}

func (_c *JobHistoryCreate) sqlSave(ctx context.Context) (*JobHistory, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *JobHistoryCreate) createSpec() (*JobHistory, *sqlgraph.CreateSpec) {
	var (
		_node = &JobHistory{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(jobhistory.Table, sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.WasSuccessful(); ok {
		_spec.SetField(jobhistory.FieldWasSuccessful, field.TypeBool, value)
		_node.WasSuccessful = value
	}
	if value, ok := _c.mutation.DurationMs(); ok {
		_spec.SetField(jobhistory.FieldDurationMs, field.TypeInt64, value)
		_node.DurationMs = value
	}
	if value, ok := _c.mutation.Parameters(); ok {
		_spec.SetField(jobhistory.FieldParameters, field.TypeJSON, value)
		_node.Parameters = value
	}
	if value, ok := _c.mutation.Output(); ok {
		_spec.SetField(jobhistory.FieldOutput, field.TypeString, value)
		_node.Output = value
	}
	if value, ok := _c.mutation.ExitCode(); ok {
		_spec.SetField(jobhistory.FieldExitCode, field.TypeInt, value)
		_node.ExitCode = value
	}
	if value, ok := _c.mutation.TriggeredByEmail(); ok {
		_spec.SetField(jobhistory.FieldTriggeredByEmail, field.TypeString, value)
		_node.TriggeredByEmail = value
	}
	if value, ok := _c.mutation.TriggeredByID(); ok {
		_spec.SetField(jobhistory.FieldTriggeredByID, field.TypeInt, value)
		_node.TriggeredByID = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(jobhistory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.Status(); ok {
		_spec.SetField(jobhistory.FieldStatus, field.TypeString, value)
		_node.Status = value
	}
	if value, ok := _c.mutation.Trigger(); ok {
		_spec.SetField(jobhistory.FieldTrigger, field.TypeString, value)
		_node.Trigger = value
	}
	if nodes := _c.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.ProjectTable,
			Columns: []string{jobhistory.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := _c.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobhistory.JobTable,
			Columns: []string{jobhistory.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_history = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobHistoryCreateBulk is the builder for creating many JobHistory entities in bulk.
type JobHistoryCreateBulk struct {
	config
	err      error
	builders []*JobHistoryCreate
}

// Save creates the JobHistory entities in the database.
func (_c *JobHistoryCreateBulk) Save(ctx context.Context) ([]*JobHistory, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*JobHistory, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobHistoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *JobHistoryCreateBulk) SaveX(ctx context.Context) []*JobHistory {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *JobHistoryCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *JobHistoryCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
