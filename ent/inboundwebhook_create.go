// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/inboundwebhook"
	"github.com/lbrictson/janus/ent/job"
)

// InboundWebhookCreate is the builder for creating a InboundWebhook entity.
type InboundWebhookCreate struct {
	config
	mutation *InboundWebhookMutation
	hooks    []Hook
}

// SetKey sets the "key" field.
func (iwc *InboundWebhookCreate) SetKey(s string) *InboundWebhookCreate {
	iwc.mutation.SetKey(s)
	return iwc
}

// SetCreatedBy sets the "created_by" field.
func (iwc *InboundWebhookCreate) SetCreatedBy(s string) *InboundWebhookCreate {
	iwc.mutation.SetCreatedBy(s)
	return iwc
}

// SetCreatedAt sets the "created_at" field.
func (iwc *InboundWebhookCreate) SetCreatedAt(t time.Time) *InboundWebhookCreate {
	iwc.mutation.SetCreatedAt(t)
	return iwc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (iwc *InboundWebhookCreate) SetNillableCreatedAt(t *time.Time) *InboundWebhookCreate {
	if t != nil {
		iwc.SetCreatedAt(*t)
	}
	return iwc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (iwc *InboundWebhookCreate) SetJobID(id int) *InboundWebhookCreate {
	iwc.mutation.SetJobID(id)
	return iwc
}

// SetNillableJobID sets the "job" edge to the Job entity by ID if the given value is not nil.
func (iwc *InboundWebhookCreate) SetNillableJobID(id *int) *InboundWebhookCreate {
	if id != nil {
		iwc = iwc.SetJobID(*id)
	}
	return iwc
}

// SetJob sets the "job" edge to the Job entity.
func (iwc *InboundWebhookCreate) SetJob(j *Job) *InboundWebhookCreate {
	return iwc.SetJobID(j.ID)
}

// Mutation returns the InboundWebhookMutation object of the builder.
func (iwc *InboundWebhookCreate) Mutation() *InboundWebhookMutation {
	return iwc.mutation
}

// Save creates the InboundWebhook in the database.
func (iwc *InboundWebhookCreate) Save(ctx context.Context) (*InboundWebhook, error) {
	iwc.defaults()
	return withHooks(ctx, iwc.sqlSave, iwc.mutation, iwc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (iwc *InboundWebhookCreate) SaveX(ctx context.Context) *InboundWebhook {
	v, err := iwc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iwc *InboundWebhookCreate) Exec(ctx context.Context) error {
	_, err := iwc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwc *InboundWebhookCreate) ExecX(ctx context.Context) {
	if err := iwc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (iwc *InboundWebhookCreate) defaults() {
	if _, ok := iwc.mutation.CreatedAt(); !ok {
		v := inboundwebhook.DefaultCreatedAt()
		iwc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iwc *InboundWebhookCreate) check() error {
	if _, ok := iwc.mutation.Key(); !ok {
		return &ValidationError{Name: "key", err: errors.New(`ent: missing required field "InboundWebhook.key"`)}
	}
	if _, ok := iwc.mutation.CreatedBy(); !ok {
		return &ValidationError{Name: "created_by", err: errors.New(`ent: missing required field "InboundWebhook.created_by"`)}
	}
	if _, ok := iwc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "InboundWebhook.created_at"`)}
	}
	return nil
}

func (iwc *InboundWebhookCreate) sqlSave(ctx context.Context) (*InboundWebhook, error) {
	if err := iwc.check(); err != nil {
		return nil, err
	}
	_node, _spec := iwc.createSpec()
	if err := sqlgraph.CreateNode(ctx, iwc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	iwc.mutation.id = &_node.ID
	iwc.mutation.done = true
	return _node, nil
}

func (iwc *InboundWebhookCreate) createSpec() (*InboundWebhook, *sqlgraph.CreateSpec) {
	var (
		_node = &InboundWebhook{config: iwc.config}
		_spec = sqlgraph.NewCreateSpec(inboundwebhook.Table, sqlgraph.NewFieldSpec(inboundwebhook.FieldID, field.TypeInt))
	)
	if value, ok := iwc.mutation.Key(); ok {
		_spec.SetField(inboundwebhook.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := iwc.mutation.CreatedBy(); ok {
		_spec.SetField(inboundwebhook.FieldCreatedBy, field.TypeString, value)
		_node.CreatedBy = value
	}
	if value, ok := iwc.mutation.CreatedAt(); ok {
		_spec.SetField(inboundwebhook.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := iwc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   inboundwebhook.JobTable,
			Columns: []string{inboundwebhook.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.inbound_webhook_job = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// InboundWebhookCreateBulk is the builder for creating many InboundWebhook entities in bulk.
type InboundWebhookCreateBulk struct {
	config
	err      error
	builders []*InboundWebhookCreate
}

// Save creates the InboundWebhook entities in the database.
func (iwcb *InboundWebhookCreateBulk) Save(ctx context.Context) ([]*InboundWebhook, error) {
	if iwcb.err != nil {
		return nil, iwcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(iwcb.builders))
	nodes := make([]*InboundWebhook, len(iwcb.builders))
	mutators := make([]Mutator, len(iwcb.builders))
	for i := range iwcb.builders {
		func(i int, root context.Context) {
			builder := iwcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*InboundWebhookMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, iwcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, iwcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, iwcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (iwcb *InboundWebhookCreateBulk) SaveX(ctx context.Context) []*InboundWebhook {
	v, err := iwcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (iwcb *InboundWebhookCreateBulk) Exec(ctx context.Context) error {
	_, err := iwcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iwcb *InboundWebhookCreateBulk) ExecX(ctx context.Context) {
	if err := iwcb.Exec(ctx); err != nil {
		panic(err)
	}
}
