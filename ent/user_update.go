// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/projectuser"
	"github.com/lbrictson/janus/ent/user"
)

// UserUpdate is the builder for updating User entities.
type UserUpdate struct {
	config
	hooks    []Hook
	mutation *UserMutation
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdate) Where(ps ...predicate.User) *UserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEmail sets the "email" field.
func (_u *UserUpdate) SetEmail(v string) *UserUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdate) SetNillableEmail(v *string) *UserUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetEncryptedPassword sets the "encrypted_password" field.
func (_u *UserUpdate) SetEncryptedPassword(v []byte) *UserUpdate {
	_u.mutation.SetEncryptedPassword(v)
	return _u
}

// SetAdmin sets the "admin" field.
func (_u *UserUpdate) SetAdmin(v bool) *UserUpdate {
	_u.mutation.SetAdmin(v)
	return _u
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAdmin(v *bool) *UserUpdate {
	if v != nil {
		_u.SetAdmin(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdate) SetUpdatedAt(v time.Time) *UserUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAPIKey sets the "api_key" field.
func (_u *UserUpdate) SetAPIKey(v string) *UserUpdate {
	_u.mutation.SetAPIKey(v)
	return _u
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (_u *UserUpdate) SetNillableAPIKey(v *string) *UserUpdate {
	if v != nil {
		_u.SetAPIKey(*v)
	}
	return _u
}

// SetMustChangePassword sets the "must_change_password" field.
func (_u *UserUpdate) SetMustChangePassword(v bool) *UserUpdate {
	_u.mutation.SetMustChangePassword(v)
	return _u
}

// SetNillableMustChangePassword sets the "must_change_password" field if the given value is not nil.
func (_u *UserUpdate) SetNillableMustChangePassword(v *bool) *UserUpdate {
	if v != nil {
		_u.SetMustChangePassword(*v)
	}
	return _u
}

// SetIsSSO sets the "is_sso" field.
func (_u *UserUpdate) SetIsSSO(v bool) *UserUpdate {
	_u.mutation.SetIsSSO(v)
	return _u
}

// SetNillableIsSSO sets the "is_sso" field if the given value is not nil.
func (_u *UserUpdate) SetNillableIsSSO(v *bool) *UserUpdate {
	if v != nil {
		_u.SetIsSSO(*v)
	}
	return _u
}

// AddProjectUserIDs adds the "projectUsers" edge to the ProjectUser entity by IDs.
func (_u *UserUpdate) AddProjectUserIDs(ids ...int) *UserUpdate {
	_u.mutation.AddProjectUserIDs(ids...)
	return _u
}

// AddProjectUsers adds the "projectUsers" edges to the ProjectUser entity.
func (_u *UserUpdate) AddProjectUsers(v ...*ProjectUser) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdate) Mutation() *UserMutation {
	return _u.mutation
}

// ClearProjectUsers clears all "projectUsers" edges to the ProjectUser entity.
func (_u *UserUpdate) ClearProjectUsers() *UserUpdate {
	_u.mutation.ClearProjectUsers()
	return _u
}

// RemoveProjectUserIDs removes the "projectUsers" edge to ProjectUser entities by IDs.
func (_u *UserUpdate) RemoveProjectUserIDs(ids ...int) *UserUpdate {
	_u.mutation.RemoveProjectUserIDs(ids...)
	return _u
}

// RemoveProjectUsers removes "projectUsers" edges to ProjectUser entities.
func (_u *UserUpdate) RemoveProjectUsers(v ...*ProjectUser) *UserUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *UserUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *UserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.EncryptedPassword(); ok {
		_spec.SetField(user.FieldEncryptedPassword, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.APIKey(); ok {
		_spec.SetField(user.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.MustChangePassword(); ok {
		_spec.SetField(user.FieldMustChangePassword, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsSSO(); ok {
		_spec.SetField(user.FieldIsSSO, field.TypeBool, value)
	}
	if _u.mutation.ProjectUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProjectUsersTable,
			Columns: []string{user.ProjectUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectUsersIDs(); len(nodes) > 0 && !_u.mutation.ProjectUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProjectUsersTable,
			Columns: []string{user.ProjectUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProjectUsersTable,
			Columns: []string{user.ProjectUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// UserUpdateOne is the builder for updating a single User entity.
type UserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *UserMutation
}

// SetEmail sets the "email" field.
func (_u *UserUpdateOne) SetEmail(v string) *UserUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableEmail(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// SetEncryptedPassword sets the "encrypted_password" field.
func (_u *UserUpdateOne) SetEncryptedPassword(v []byte) *UserUpdateOne {
	_u.mutation.SetEncryptedPassword(v)
	return _u
}

// SetAdmin sets the "admin" field.
func (_u *UserUpdateOne) SetAdmin(v bool) *UserUpdateOne {
	_u.mutation.SetAdmin(v)
	return _u
}

// SetNillableAdmin sets the "admin" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAdmin(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetAdmin(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *UserUpdateOne) SetUpdatedAt(v time.Time) *UserUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetAPIKey sets the "api_key" field.
func (_u *UserUpdateOne) SetAPIKey(v string) *UserUpdateOne {
	_u.mutation.SetAPIKey(v)
	return _u
}

// SetNillableAPIKey sets the "api_key" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableAPIKey(v *string) *UserUpdateOne {
	if v != nil {
		_u.SetAPIKey(*v)
	}
	return _u
}

// SetMustChangePassword sets the "must_change_password" field.
func (_u *UserUpdateOne) SetMustChangePassword(v bool) *UserUpdateOne {
	_u.mutation.SetMustChangePassword(v)
	return _u
}

// SetNillableMustChangePassword sets the "must_change_password" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableMustChangePassword(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetMustChangePassword(*v)
	}
	return _u
}

// SetIsSSO sets the "is_sso" field.
func (_u *UserUpdateOne) SetIsSSO(v bool) *UserUpdateOne {
	_u.mutation.SetIsSSO(v)
	return _u
}

// SetNillableIsSSO sets the "is_sso" field if the given value is not nil.
func (_u *UserUpdateOne) SetNillableIsSSO(v *bool) *UserUpdateOne {
	if v != nil {
		_u.SetIsSSO(*v)
	}
	return _u
}

// AddProjectUserIDs adds the "projectUsers" edge to the ProjectUser entity by IDs.
func (_u *UserUpdateOne) AddProjectUserIDs(ids ...int) *UserUpdateOne {
	_u.mutation.AddProjectUserIDs(ids...)
	return _u
}

// AddProjectUsers adds the "projectUsers" edges to the ProjectUser entity.
func (_u *UserUpdateOne) AddProjectUsers(v ...*ProjectUser) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddProjectUserIDs(ids...)
}

// Mutation returns the UserMutation object of the builder.
func (_u *UserUpdateOne) Mutation() *UserMutation {
	return _u.mutation
}

// ClearProjectUsers clears all "projectUsers" edges to the ProjectUser entity.
func (_u *UserUpdateOne) ClearProjectUsers() *UserUpdateOne {
	_u.mutation.ClearProjectUsers()
	return _u
}

// RemoveProjectUserIDs removes the "projectUsers" edge to ProjectUser entities by IDs.
func (_u *UserUpdateOne) RemoveProjectUserIDs(ids ...int) *UserUpdateOne {
	_u.mutation.RemoveProjectUserIDs(ids...)
	return _u
}

// RemoveProjectUsers removes "projectUsers" edges to ProjectUser entities.
func (_u *UserUpdateOne) RemoveProjectUsers(v ...*ProjectUser) *UserUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveProjectUserIDs(ids...)
}

// Where appends a list predicates to the UserUpdate builder.
func (_u *UserUpdateOne) Where(ps ...predicate.User) *UserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *UserUpdateOne) Select(field string, fields ...string) *UserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated User entity.
func (_u *UserUpdateOne) Save(ctx context.Context) (*User, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *UserUpdateOne) SaveX(ctx context.Context) *User {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *UserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *UserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *UserUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := user.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

func (_u *UserUpdateOne) sqlSave(ctx context.Context) (_node *User, err error) {
	_spec := sqlgraph.NewUpdateSpec(user.Table, user.Columns, sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "User.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, user.FieldID)
		for _, f := range fields {
			if !user.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != user.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(user.FieldEmail, field.TypeString, value)
	}
	if value, ok := _u.mutation.EncryptedPassword(); ok {
		_spec.SetField(user.FieldEncryptedPassword, field.TypeBytes, value)
	}
	if value, ok := _u.mutation.Admin(); ok {
		_spec.SetField(user.FieldAdmin, field.TypeBool, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(user.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.APIKey(); ok {
		_spec.SetField(user.FieldAPIKey, field.TypeString, value)
	}
	if value, ok := _u.mutation.MustChangePassword(); ok {
		_spec.SetField(user.FieldMustChangePassword, field.TypeBool, value)
	}
	if value, ok := _u.mutation.IsSSO(); ok {
		_spec.SetField(user.FieldIsSSO, field.TypeBool, value)
	}
	if _u.mutation.ProjectUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProjectUsersTable,
			Columns: []string{user.ProjectUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedProjectUsersIDs(); len(nodes) > 0 && !_u.mutation.ProjectUsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProjectUsersTable,
			Columns: []string{user.ProjectUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectUsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   user.ProjectUsersTable,
			Columns: []string{user.ProjectUsersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &User{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{user.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
