// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/smtpconfig"
)

// SMTPConfigUpdate is the builder for updating SMTPConfig entities.
type SMTPConfigUpdate struct {
	config
	hooks    []Hook
	mutation *SMTPConfigMutation
}

// Where appends a list predicates to the SMTPConfigUpdate builder.
func (_u *SMTPConfigUpdate) Where(ps ...predicate.SMTPConfig) *SMTPConfigUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetSMTPServer sets the "smtp_server" field.
func (_u *SMTPConfigUpdate) SetSMTPServer(v string) *SMTPConfigUpdate {
	_u.mutation.SetSMTPServer(v)
	return _u
}

// SetNillableSMTPServer sets the "smtp_server" field if the given value is not nil.
func (_u *SMTPConfigUpdate) SetNillableSMTPServer(v *string) *SMTPConfigUpdate {
	if v != nil {
		_u.SetSMTPServer(*v)
	}
	return _u
}

// SetSMTPPort sets the "smtp_port" field.
func (_u *SMTPConfigUpdate) SetSMTPPort(v int) *SMTPConfigUpdate {
	_u.mutation.ResetSMTPPort()
	_u.mutation.SetSMTPPort(v)
	return _u
}

// SetNillableSMTPPort sets the "smtp_port" field if the given value is not nil.
func (_u *SMTPConfigUpdate) SetNillableSMTPPort(v *int) *SMTPConfigUpdate {
	if v != nil {
		_u.SetSMTPPort(*v)
	}
	return _u
}

// AddSMTPPort adds value to the "smtp_port" field.
func (_u *SMTPConfigUpdate) AddSMTPPort(v int) *SMTPConfigUpdate {
	_u.mutation.AddSMTPPort(v)
	return _u
}

// SetSMTPUsername sets the "smtp_username" field.
func (_u *SMTPConfigUpdate) SetSMTPUsername(v string) *SMTPConfigUpdate {
	_u.mutation.SetSMTPUsername(v)
	return _u
}

// SetNillableSMTPUsername sets the "smtp_username" field if the given value is not nil.
func (_u *SMTPConfigUpdate) SetNillableSMTPUsername(v *string) *SMTPConfigUpdate {
	if v != nil {
		_u.SetSMTPUsername(*v)
	}
	return _u
}

// SetSMTPPassword sets the "smtp_password" field.
func (_u *SMTPConfigUpdate) SetSMTPPassword(v string) *SMTPConfigUpdate {
	_u.mutation.SetSMTPPassword(v)
	return _u
}

// SetNillableSMTPPassword sets the "smtp_password" field if the given value is not nil.
func (_u *SMTPConfigUpdate) SetNillableSMTPPassword(v *string) *SMTPConfigUpdate {
	if v != nil {
		_u.SetSMTPPassword(*v)
	}
	return _u
}

// SetSMTPSender sets the "smtp_sender" field.
func (_u *SMTPConfigUpdate) SetSMTPSender(v string) *SMTPConfigUpdate {
	_u.mutation.SetSMTPSender(v)
	return _u
}

// SetNillableSMTPSender sets the "smtp_sender" field if the given value is not nil.
func (_u *SMTPConfigUpdate) SetNillableSMTPSender(v *string) *SMTPConfigUpdate {
	if v != nil {
		_u.SetSMTPSender(*v)
	}
	return _u
}

// SetSMTPTLS sets the "smtp_tls" field.
func (_u *SMTPConfigUpdate) SetSMTPTLS(v bool) *SMTPConfigUpdate {
	_u.mutation.SetSMTPTLS(v)
	return _u
}

// SetNillableSMTPTLS sets the "smtp_tls" field if the given value is not nil.
func (_u *SMTPConfigUpdate) SetNillableSMTPTLS(v *bool) *SMTPConfigUpdate {
	if v != nil {
		_u.SetSMTPTLS(*v)
	}
	return _u
}

// Mutation returns the SMTPConfigMutation object of the builder.
func (_u *SMTPConfigUpdate) Mutation() *SMTPConfigMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *SMTPConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SMTPConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *SMTPConfigUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SMTPConfigUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SMTPConfigUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(smtpconfig.Table, smtpconfig.Columns, sqlgraph.NewFieldSpec(smtpconfig.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SMTPServer(); ok {
		_spec.SetField(smtpconfig.FieldSMTPServer, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPPort(); ok {
		_spec.SetField(smtpconfig.FieldSMTPPort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSMTPPort(); ok {
		_spec.AddField(smtpconfig.FieldSMTPPort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.SMTPUsername(); ok {
		_spec.SetField(smtpconfig.FieldSMTPUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPPassword(); ok {
		_spec.SetField(smtpconfig.FieldSMTPPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPSender(); ok {
		_spec.SetField(smtpconfig.FieldSMTPSender, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPTLS(); ok {
		_spec.SetField(smtpconfig.FieldSMTPTLS, field.TypeBool, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smtpconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// SMTPConfigUpdateOne is the builder for updating a single SMTPConfig entity.
type SMTPConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SMTPConfigMutation
}

// SetSMTPServer sets the "smtp_server" field.
func (_u *SMTPConfigUpdateOne) SetSMTPServer(v string) *SMTPConfigUpdateOne {
	_u.mutation.SetSMTPServer(v)
	return _u
}

// SetNillableSMTPServer sets the "smtp_server" field if the given value is not nil.
func (_u *SMTPConfigUpdateOne) SetNillableSMTPServer(v *string) *SMTPConfigUpdateOne {
	if v != nil {
		_u.SetSMTPServer(*v)
	}
	return _u
}

// SetSMTPPort sets the "smtp_port" field.
func (_u *SMTPConfigUpdateOne) SetSMTPPort(v int) *SMTPConfigUpdateOne {
	_u.mutation.ResetSMTPPort()
	_u.mutation.SetSMTPPort(v)
	return _u
}

// SetNillableSMTPPort sets the "smtp_port" field if the given value is not nil.
func (_u *SMTPConfigUpdateOne) SetNillableSMTPPort(v *int) *SMTPConfigUpdateOne {
	if v != nil {
		_u.SetSMTPPort(*v)
	}
	return _u
}

// AddSMTPPort adds value to the "smtp_port" field.
func (_u *SMTPConfigUpdateOne) AddSMTPPort(v int) *SMTPConfigUpdateOne {
	_u.mutation.AddSMTPPort(v)
	return _u
}

// SetSMTPUsername sets the "smtp_username" field.
func (_u *SMTPConfigUpdateOne) SetSMTPUsername(v string) *SMTPConfigUpdateOne {
	_u.mutation.SetSMTPUsername(v)
	return _u
}

// SetNillableSMTPUsername sets the "smtp_username" field if the given value is not nil.
func (_u *SMTPConfigUpdateOne) SetNillableSMTPUsername(v *string) *SMTPConfigUpdateOne {
	if v != nil {
		_u.SetSMTPUsername(*v)
	}
	return _u
}

// SetSMTPPassword sets the "smtp_password" field.
func (_u *SMTPConfigUpdateOne) SetSMTPPassword(v string) *SMTPConfigUpdateOne {
	_u.mutation.SetSMTPPassword(v)
	return _u
}

// SetNillableSMTPPassword sets the "smtp_password" field if the given value is not nil.
func (_u *SMTPConfigUpdateOne) SetNillableSMTPPassword(v *string) *SMTPConfigUpdateOne {
	if v != nil {
		_u.SetSMTPPassword(*v)
	}
	return _u
}

// SetSMTPSender sets the "smtp_sender" field.
func (_u *SMTPConfigUpdateOne) SetSMTPSender(v string) *SMTPConfigUpdateOne {
	_u.mutation.SetSMTPSender(v)
	return _u
}

// SetNillableSMTPSender sets the "smtp_sender" field if the given value is not nil.
func (_u *SMTPConfigUpdateOne) SetNillableSMTPSender(v *string) *SMTPConfigUpdateOne {
	if v != nil {
		_u.SetSMTPSender(*v)
	}
	return _u
}

// SetSMTPTLS sets the "smtp_tls" field.
func (_u *SMTPConfigUpdateOne) SetSMTPTLS(v bool) *SMTPConfigUpdateOne {
	_u.mutation.SetSMTPTLS(v)
	return _u
}

// SetNillableSMTPTLS sets the "smtp_tls" field if the given value is not nil.
func (_u *SMTPConfigUpdateOne) SetNillableSMTPTLS(v *bool) *SMTPConfigUpdateOne {
	if v != nil {
		_u.SetSMTPTLS(*v)
	}
	return _u
}

// Mutation returns the SMTPConfigMutation object of the builder.
func (_u *SMTPConfigUpdateOne) Mutation() *SMTPConfigMutation {
	return _u.mutation
}

// Where appends a list predicates to the SMTPConfigUpdate builder.
func (_u *SMTPConfigUpdateOne) Where(ps ...predicate.SMTPConfig) *SMTPConfigUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *SMTPConfigUpdateOne) Select(field string, fields ...string) *SMTPConfigUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated SMTPConfig entity.
func (_u *SMTPConfigUpdateOne) Save(ctx context.Context) (*SMTPConfig, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *SMTPConfigUpdateOne) SaveX(ctx context.Context) *SMTPConfig {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *SMTPConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *SMTPConfigUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *SMTPConfigUpdateOne) sqlSave(ctx context.Context) (_node *SMTPConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(smtpconfig.Table, smtpconfig.Columns, sqlgraph.NewFieldSpec(smtpconfig.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SMTPConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, smtpconfig.FieldID)
		for _, f := range fields {
			if !smtpconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != smtpconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.SMTPServer(); ok {
		_spec.SetField(smtpconfig.FieldSMTPServer, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPPort(); ok {
		_spec.SetField(smtpconfig.FieldSMTPPort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedSMTPPort(); ok {
		_spec.AddField(smtpconfig.FieldSMTPPort, field.TypeInt, value)
	}
	if value, ok := _u.mutation.SMTPUsername(); ok {
		_spec.SetField(smtpconfig.FieldSMTPUsername, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPPassword(); ok {
		_spec.SetField(smtpconfig.FieldSMTPPassword, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPSender(); ok {
		_spec.SetField(smtpconfig.FieldSMTPSender, field.TypeString, value)
	}
	if value, ok := _u.mutation.SMTPTLS(); ok {
		_spec.SetField(smtpconfig.FieldSMTPTLS, field.TypeBool, value)
	}
	_node = &SMTPConfig{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{smtpconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
