// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/schema"
)

// JobVersionCreate is the builder for creating a JobVersion entity.
type JobVersionCreate struct {
	config
	mutation *JobVersionMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (jvc *JobVersionCreate) SetCreatedAt(t time.Time) *JobVersionCreate {
	jvc.mutation.SetCreatedAt(t)
	return jvc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (jvc *JobVersionCreate) SetNillableCreatedAt(t *time.Time) *JobVersionCreate {
	if t != nil {
		jvc.SetCreatedAt(*t)
	}
	return jvc
}

// SetName sets the "name" field.
func (jvc *JobVersionCreate) SetName(s string) *JobVersionCreate {
	jvc.mutation.SetName(s)
	return jvc
}

// SetDescription sets the "description" field.
func (jvc *JobVersionCreate) SetDescription(s string) *JobVersionCreate {
	jvc.mutation.SetDescription(s)
	return jvc
}

// SetScript sets the "script" field.
func (jvc *JobVersionCreate) SetScript(s string) *JobVersionCreate {
	jvc.mutation.SetScript(s)
	return jvc
}

// SetCronSchedule sets the "cron_schedule" field.
func (jvc *JobVersionCreate) SetCronSchedule(s string) *JobVersionCreate {
	jvc.mutation.SetCronSchedule(s)
	return jvc
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (jvc *JobVersionCreate) SetNillableCronSchedule(s *string) *JobVersionCreate {
	if s != nil {
		jvc.SetCronSchedule(*s)
	}
	return jvc
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (jvc *JobVersionCreate) SetScheduleEnabled(b bool) *JobVersionCreate {
	jvc.mutation.SetScheduleEnabled(b)
	return jvc
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (jvc *JobVersionCreate) SetAllowConcurrentRuns(b bool) *JobVersionCreate {
	jvc.mutation.SetAllowConcurrentRuns(b)
	return jvc
}

// SetArguments sets the "arguments" field.
func (jvc *JobVersionCreate) SetArguments(sa []schema.JobArgument) *JobVersionCreate {
	jvc.mutation.SetArguments(sa)
	return jvc
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (jvc *JobVersionCreate) SetRequiresFileUpload(b bool) *JobVersionCreate {
	jvc.mutation.SetRequiresFileUpload(b)
	return jvc
}

// SetChangedByEmail sets the "changed_by_email" field.
func (jvc *JobVersionCreate) SetChangedByEmail(s string) *JobVersionCreate {
	jvc.mutation.SetChangedByEmail(s)
	return jvc
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (jvc *JobVersionCreate) SetJobID(id int) *JobVersionCreate {
	jvc.mutation.SetJobID(id)
	return jvc
}

// SetJob sets the "job" edge to the Job entity.
func (jvc *JobVersionCreate) SetJob(j *Job) *JobVersionCreate {
	return jvc.SetJobID(j.ID)
}

// Mutation returns the JobVersionMutation object of the builder.
func (jvc *JobVersionCreate) Mutation() *JobVersionMutation {
	return jvc.mutation
}

// Save creates the JobVersion in the database.
func (jvc *JobVersionCreate) Save(ctx context.Context) (*JobVersion, error) {
	jvc.defaults()
	return withHooks(ctx, jvc.sqlSave, jvc.mutation, jvc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (jvc *JobVersionCreate) SaveX(ctx context.Context) *JobVersion {
	v, err := jvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jvc *JobVersionCreate) Exec(ctx context.Context) error {
	_, err := jvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jvc *JobVersionCreate) ExecX(ctx context.Context) {
	if err := jvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (jvc *JobVersionCreate) defaults() {
	if _, ok := jvc.mutation.CreatedAt(); !ok {
		v := jobversion.DefaultCreatedAt()
		jvc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (jvc *JobVersionCreate) check() error {
	if _, ok := jvc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "JobVersion.created_at"`)}
	}
	if _, ok := jvc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "JobVersion.name"`)}
	}
	if _, ok := jvc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "JobVersion.description"`)}
	}
	if _, ok := jvc.mutation.Script(); !ok {
		return &ValidationError{Name: "script", err: errors.New(`ent: missing required field "JobVersion.script"`)}
	}
	if _, ok := jvc.mutation.ScheduleEnabled(); !ok {
		return &ValidationError{Name: "schedule_enabled", err: errors.New(`ent: missing required field "JobVersion.schedule_enabled"`)}
	}
	if _, ok := jvc.mutation.AllowConcurrentRuns(); !ok {
		return &ValidationError{Name: "allow_concurrent_runs", err: errors.New(`ent: missing required field "JobVersion.allow_concurrent_runs"`)}
	}
	if _, ok := jvc.mutation.Arguments(); !ok {
		return &ValidationError{Name: "arguments", err: errors.New(`ent: missing required field "JobVersion.arguments"`)}
	}
	if _, ok := jvc.mutation.RequiresFileUpload(); !ok {
		return &ValidationError{Name: "requires_file_upload", err: errors.New(`ent: missing required field "JobVersion.requires_file_upload"`)}
	}
	if _, ok := jvc.mutation.ChangedByEmail(); !ok {
		return &ValidationError{Name: "changed_by_email", err: errors.New(`ent: missing required field "JobVersion.changed_by_email"`)}
	}
	if len(jvc.mutation.JobIDs()) == 0 {
		return &ValidationError{Name: "job", err: errors.New(`ent: missing required edge "JobVersion.job"`)}
	}
	return nil
}

func (jvc *JobVersionCreate) sqlSave(ctx context.Context) (*JobVersion, error) {
	if err := jvc.check(); err != nil {
		return nil, err
	}
	_node, _spec := jvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, jvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	jvc.mutation.id = &_node.ID
	jvc.mutation.done = true
	return _node, nil
}

func (jvc *JobVersionCreate) createSpec() (*JobVersion, *sqlgraph.CreateSpec) {
	var (
		_node = &JobVersion{config: jvc.config}
		_spec = sqlgraph.NewCreateSpec(jobversion.Table, sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt))
	)
	if value, ok := jvc.mutation.CreatedAt(); ok {
		_spec.SetField(jobversion.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := jvc.mutation.Name(); ok {
		_spec.SetField(jobversion.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := jvc.mutation.Description(); ok {
		_spec.SetField(jobversion.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := jvc.mutation.Script(); ok {
		_spec.SetField(jobversion.FieldScript, field.TypeString, value)
		_node.Script = value
	}
	if value, ok := jvc.mutation.CronSchedule(); ok {
		_spec.SetField(jobversion.FieldCronSchedule, field.TypeString, value)
		_node.CronSchedule = value
	}
	if value, ok := jvc.mutation.ScheduleEnabled(); ok {
		_spec.SetField(jobversion.FieldScheduleEnabled, field.TypeBool, value)
		_node.ScheduleEnabled = value
	}
	if value, ok := jvc.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(jobversion.FieldAllowConcurrentRuns, field.TypeBool, value)
		_node.AllowConcurrentRuns = value
	}
	if value, ok := jvc.mutation.Arguments(); ok {
		_spec.SetField(jobversion.FieldArguments, field.TypeJSON, value)
		_node.Arguments = value
	}
	if value, ok := jvc.mutation.RequiresFileUpload(); ok {
		_spec.SetField(jobversion.FieldRequiresFileUpload, field.TypeBool, value)
		_node.RequiresFileUpload = value
	}
	if value, ok := jvc.mutation.ChangedByEmail(); ok {
		_spec.SetField(jobversion.FieldChangedByEmail, field.TypeString, value)
		_node.ChangedByEmail = value
	}
	if nodes := jvc.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobversion.JobTable,
			Columns: []string{jobversion.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.job_versions = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// JobVersionCreateBulk is the builder for creating many JobVersion entities in bulk.
type JobVersionCreateBulk struct {
	config
	err      error
	builders []*JobVersionCreate
}

// Save creates the JobVersion entities in the database.
func (jvcb *JobVersionCreateBulk) Save(ctx context.Context) ([]*JobVersion, error) {
	if jvcb.err != nil {
		return nil, jvcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(jvcb.builders))
	nodes := make([]*JobVersion, len(jvcb.builders))
	mutators := make([]Mutator, len(jvcb.builders))
	for i := range jvcb.builders {
		func(i int, root context.Context) {
			builder := jvcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*JobVersionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, jvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, jvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, jvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (jvcb *JobVersionCreateBulk) SaveX(ctx context.Context) []*JobVersion {
	v, err := jvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (jvcb *JobVersionCreateBulk) Exec(ctx context.Context) error {
	_, err := jvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (jvcb *JobVersionCreateBulk) ExecX(ctx context.Context) {
	if err := jvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
