// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/authconfig"
)

// AuthConfigCreate is the builder for creating a AuthConfig entity.
type AuthConfigCreate struct {
	config
	mutation *AuthConfigMutation
	hooks    []Hook
}

// SetEnableSSO sets the "enable_sso" field.
func (_c *AuthConfigCreate) SetEnableSSO(v bool) *AuthConfigCreate {
	_c.mutation.SetEnableSSO(v)
	return _c
}

// SetNillableEnableSSO sets the "enable_sso" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableEnableSSO(v *bool) *AuthConfigCreate {
	if v != nil {
		_c.SetEnableSSO(*v)
	}
	return _c
}

// SetDisablePasswordLogin sets the "disable_password_login" field.
func (_c *AuthConfigCreate) SetDisablePasswordLogin(v bool) *AuthConfigCreate {
	_c.mutation.SetDisablePasswordLogin(v)
	return _c
}

// SetNillableDisablePasswordLogin sets the "disable_password_login" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableDisablePasswordLogin(v *bool) *AuthConfigCreate {
	if v != nil {
		_c.SetDisablePasswordLogin(*v)
	}
	return _c
}

// SetSSOProvider sets the "sso_provider" field.
func (_c *AuthConfigCreate) SetSSOProvider(v string) *AuthConfigCreate {
	_c.mutation.SetSSOProvider(v)
	return _c
}

// SetNillableSSOProvider sets the "sso_provider" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSOProvider(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSOProvider(*v)
	}
	return _c
}

// SetSSOClientID sets the "sso_client_id" field.
func (_c *AuthConfigCreate) SetSSOClientID(v string) *AuthConfigCreate {
	_c.mutation.SetSSOClientID(v)
	return _c
}

// SetNillableSSOClientID sets the "sso_client_id" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSOClientID(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSOClientID(*v)
	}
	return _c
}

// SetSSOClientSecret sets the "sso_client_secret" field.
func (_c *AuthConfigCreate) SetSSOClientSecret(v string) *AuthConfigCreate {
	_c.mutation.SetSSOClientSecret(v)
	return _c
}

// SetNillableSSOClientSecret sets the "sso_client_secret" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSOClientSecret(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSOClientSecret(*v)
	}
	return _c
}

// SetSSORedirectURI sets the "sso_redirect_uri" field.
func (_c *AuthConfigCreate) SetSSORedirectURI(v string) *AuthConfigCreate {
	_c.mutation.SetSSORedirectURI(v)
	return _c
}

// SetNillableSSORedirectURI sets the "sso_redirect_uri" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSORedirectURI(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSORedirectURI(*v)
	}
	return _c
}

// SetSSOAuthorizationURL sets the "sso_authorization_url" field.
func (_c *AuthConfigCreate) SetSSOAuthorizationURL(v string) *AuthConfigCreate {
	_c.mutation.SetSSOAuthorizationURL(v)
	return _c
}

// SetNillableSSOAuthorizationURL sets the "sso_authorization_url" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSOAuthorizationURL(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSOAuthorizationURL(*v)
	}
	return _c
}

// SetSSOTokenURL sets the "sso_token_url" field.
func (_c *AuthConfigCreate) SetSSOTokenURL(v string) *AuthConfigCreate {
	_c.mutation.SetSSOTokenURL(v)
	return _c
}

// SetNillableSSOTokenURL sets the "sso_token_url" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSOTokenURL(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSOTokenURL(*v)
	}
	return _c
}

// SetSSOUserInfoURL sets the "sso_user_info_url" field.
func (_c *AuthConfigCreate) SetSSOUserInfoURL(v string) *AuthConfigCreate {
	_c.mutation.SetSSOUserInfoURL(v)
	return _c
}

// SetNillableSSOUserInfoURL sets the "sso_user_info_url" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableSSOUserInfoURL(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetSSOUserInfoURL(*v)
	}
	return _c
}

// SetEntraTenantID sets the "entra_tenant_id" field.
func (_c *AuthConfigCreate) SetEntraTenantID(v string) *AuthConfigCreate {
	_c.mutation.SetEntraTenantID(v)
	return _c
}

// SetNillableEntraTenantID sets the "entra_tenant_id" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableEntraTenantID(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetEntraTenantID(*v)
	}
	return _c
}

// SetGoogleAllowedDomains sets the "google_allowed_domains" field.
func (_c *AuthConfigCreate) SetGoogleAllowedDomains(v string) *AuthConfigCreate {
	_c.mutation.SetGoogleAllowedDomains(v)
	return _c
}

// SetNillableGoogleAllowedDomains sets the "google_allowed_domains" field if the given value is not nil.
func (_c *AuthConfigCreate) SetNillableGoogleAllowedDomains(v *string) *AuthConfigCreate {
	if v != nil {
		_c.SetGoogleAllowedDomains(*v)
	}
	return _c
}

// SetSessionKey sets the "session_key" field.
func (_c *AuthConfigCreate) SetSessionKey(v []byte) *AuthConfigCreate {
	_c.mutation.SetSessionKey(v)
	return _c
}

// Mutation returns the AuthConfigMutation object of the builder.
func (_c *AuthConfigCreate) Mutation() *AuthConfigMutation {
	return _c.mutation
}

// Save creates the AuthConfig in the database.
func (_c *AuthConfigCreate) Save(ctx context.Context) (*AuthConfig, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *AuthConfigCreate) SaveX(ctx context.Context) *AuthConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuthConfigCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuthConfigCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *AuthConfigCreate) defaults() {
	if _, ok := _c.mutation.EnableSSO(); !ok {
		v := authconfig.DefaultEnableSSO
		_c.mutation.SetEnableSSO(v)
	}
	if _, ok := _c.mutation.DisablePasswordLogin(); !ok {
		v := authconfig.DefaultDisablePasswordLogin
		_c.mutation.SetDisablePasswordLogin(v)
	}
	if _, ok := _c.mutation.SSOProvider(); !ok {
		v := authconfig.DefaultSSOProvider
		_c.mutation.SetSSOProvider(v)
	}
	if _, ok := _c.mutation.SSOClientID(); !ok {
		v := authconfig.DefaultSSOClientID
		_c.mutation.SetSSOClientID(v)
	}
	if _, ok := _c.mutation.SSOClientSecret(); !ok {
		v := authconfig.DefaultSSOClientSecret
		_c.mutation.SetSSOClientSecret(v)
	}
	if _, ok := _c.mutation.SSORedirectURI(); !ok {
		v := authconfig.DefaultSSORedirectURI
		_c.mutation.SetSSORedirectURI(v)
	}
	if _, ok := _c.mutation.SSOAuthorizationURL(); !ok {
		v := authconfig.DefaultSSOAuthorizationURL
		_c.mutation.SetSSOAuthorizationURL(v)
	}
	if _, ok := _c.mutation.SSOTokenURL(); !ok {
		v := authconfig.DefaultSSOTokenURL
		_c.mutation.SetSSOTokenURL(v)
	}
	if _, ok := _c.mutation.SSOUserInfoURL(); !ok {
		v := authconfig.DefaultSSOUserInfoURL
		_c.mutation.SetSSOUserInfoURL(v)
	}
	if _, ok := _c.mutation.EntraTenantID(); !ok {
		v := authconfig.DefaultEntraTenantID
		_c.mutation.SetEntraTenantID(v)
	}
	if _, ok := _c.mutation.GoogleAllowedDomains(); !ok {
		v := authconfig.DefaultGoogleAllowedDomains
		_c.mutation.SetGoogleAllowedDomains(v)
	}
	if _, ok := _c.mutation.SessionKey(); !ok {
		v := authconfig.DefaultSessionKey
		_c.mutation.SetSessionKey(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *AuthConfigCreate) check() error {
	if _, ok := _c.mutation.EnableSSO(); !ok {
		return &ValidationError{Name: "enable_sso", err: errors.New(`ent: missing required field "AuthConfig.enable_sso"`)}
	}
	if _, ok := _c.mutation.DisablePasswordLogin(); !ok {
		return &ValidationError{Name: "disable_password_login", err: errors.New(`ent: missing required field "AuthConfig.disable_password_login"`)}
	}
	if _, ok := _c.mutation.SSOProvider(); !ok {
		return &ValidationError{Name: "sso_provider", err: errors.New(`ent: missing required field "AuthConfig.sso_provider"`)}
	}
	if _, ok := _c.mutation.SSOClientID(); !ok {
		return &ValidationError{Name: "sso_client_id", err: errors.New(`ent: missing required field "AuthConfig.sso_client_id"`)}
	}
	if _, ok := _c.mutation.SSOClientSecret(); !ok {
		return &ValidationError{Name: "sso_client_secret", err: errors.New(`ent: missing required field "AuthConfig.sso_client_secret"`)}
	}
	if _, ok := _c.mutation.SSORedirectURI(); !ok {
		return &ValidationError{Name: "sso_redirect_uri", err: errors.New(`ent: missing required field "AuthConfig.sso_redirect_uri"`)}
	}
	if _, ok := _c.mutation.SSOAuthorizationURL(); !ok {
		return &ValidationError{Name: "sso_authorization_url", err: errors.New(`ent: missing required field "AuthConfig.sso_authorization_url"`)}
	}
	if _, ok := _c.mutation.SSOTokenURL(); !ok {
		return &ValidationError{Name: "sso_token_url", err: errors.New(`ent: missing required field "AuthConfig.sso_token_url"`)}
	}
	if _, ok := _c.mutation.SSOUserInfoURL(); !ok {
		return &ValidationError{Name: "sso_user_info_url", err: errors.New(`ent: missing required field "AuthConfig.sso_user_info_url"`)}
	}
	if _, ok := _c.mutation.EntraTenantID(); !ok {
		return &ValidationError{Name: "entra_tenant_id", err: errors.New(`ent: missing required field "AuthConfig.entra_tenant_id"`)}
	}
	if _, ok := _c.mutation.GoogleAllowedDomains(); !ok {
		return &ValidationError{Name: "google_allowed_domains", err: errors.New(`ent: missing required field "AuthConfig.google_allowed_domains"`)}
	}
	if _, ok := _c.mutation.SessionKey(); !ok {
		return &ValidationError{Name: "session_key", err: errors.New(`ent: missing required field "AuthConfig.session_key"`)}
	}
	return nil
}

func (_c *AuthConfigCreate) sqlSave(ctx context.Context) (*AuthConfig, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *AuthConfigCreate) createSpec() (*AuthConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &AuthConfig{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(authconfig.Table, sqlgraph.NewFieldSpec(authconfig.FieldID, field.TypeInt))
	)
	if value, ok := _c.mutation.EnableSSO(); ok {
		_spec.SetField(authconfig.FieldEnableSSO, field.TypeBool, value)
		_node.EnableSSO = value
	}
	if value, ok := _c.mutation.DisablePasswordLogin(); ok {
		_spec.SetField(authconfig.FieldDisablePasswordLogin, field.TypeBool, value)
		_node.DisablePasswordLogin = value
	}
	if value, ok := _c.mutation.SSOProvider(); ok {
		_spec.SetField(authconfig.FieldSSOProvider, field.TypeString, value)
		_node.SSOProvider = value
	}
	if value, ok := _c.mutation.SSOClientID(); ok {
		_spec.SetField(authconfig.FieldSSOClientID, field.TypeString, value)
		_node.SSOClientID = value
	}
	if value, ok := _c.mutation.SSOClientSecret(); ok {
		_spec.SetField(authconfig.FieldSSOClientSecret, field.TypeString, value)
		_node.SSOClientSecret = value
	}
	if value, ok := _c.mutation.SSORedirectURI(); ok {
		_spec.SetField(authconfig.FieldSSORedirectURI, field.TypeString, value)
		_node.SSORedirectURI = value
	}
	if value, ok := _c.mutation.SSOAuthorizationURL(); ok {
		_spec.SetField(authconfig.FieldSSOAuthorizationURL, field.TypeString, value)
		_node.SSOAuthorizationURL = value
	}
	if value, ok := _c.mutation.SSOTokenURL(); ok {
		_spec.SetField(authconfig.FieldSSOTokenURL, field.TypeString, value)
		_node.SSOTokenURL = value
	}
	if value, ok := _c.mutation.SSOUserInfoURL(); ok {
		_spec.SetField(authconfig.FieldSSOUserInfoURL, field.TypeString, value)
		_node.SSOUserInfoURL = value
	}
	if value, ok := _c.mutation.EntraTenantID(); ok {
		_spec.SetField(authconfig.FieldEntraTenantID, field.TypeString, value)
		_node.EntraTenantID = value
	}
	if value, ok := _c.mutation.GoogleAllowedDomains(); ok {
		_spec.SetField(authconfig.FieldGoogleAllowedDomains, field.TypeString, value)
		_node.GoogleAllowedDomains = value
	}
	if value, ok := _c.mutation.SessionKey(); ok {
		_spec.SetField(authconfig.FieldSessionKey, field.TypeBytes, value)
		_node.SessionKey = value
	}
	return _node, _spec
}

// AuthConfigCreateBulk is the builder for creating many AuthConfig entities in bulk.
type AuthConfigCreateBulk struct {
	config
	err      error
	builders []*AuthConfigCreate
}

// Save creates the AuthConfig entities in the database.
func (_c *AuthConfigCreateBulk) Save(ctx context.Context) ([]*AuthConfig, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*AuthConfig, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *AuthConfigCreateBulk) SaveX(ctx context.Context) []*AuthConfig {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *AuthConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *AuthConfigCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}
