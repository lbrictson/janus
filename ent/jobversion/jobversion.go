// Code generated by ent, DO NOT EDIT.

package jobversion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the jobversion type in the database.
	Label = "job_version"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// FieldCronSchedule holds the string denoting the cron_schedule field in the database.
	FieldCronSchedule = "cron_schedule"
	// FieldScheduleEnabled holds the string denoting the schedule_enabled field in the database.
	FieldScheduleEnabled = "schedule_enabled"
	// FieldAllowConcurrentRuns holds the string denoting the allow_concurrent_runs field in the database.
	FieldAllowConcurrentRuns = "allow_concurrent_runs"
	// FieldArguments holds the string denoting the arguments field in the database.
	FieldArguments = "arguments"
	// FieldRequiresFileUpload holds the string denoting the requires_file_upload field in the database.
	FieldRequiresFileUpload = "requires_file_upload"
	// FieldChangedByEmail holds the string denoting the changed_by_email field in the database.
	FieldChangedByEmail = "changed_by_email"
	// EdgeJob holds the string denoting the job edge name in mutations.
	EdgeJob = "job"
	// Table holds the table name of the jobversion in the database.
	Table = "job_versions"
	// JobTable is the table that holds the job relation/edge.
	JobTable = "job_versions"
	// JobInverseTable is the table name for the Job entity.
	// It exists in this package in order to avoid circular dependency with the "job" package.
	JobInverseTable = "jobs"
	// JobColumn is the table column denoting the job relation/edge.
	JobColumn = "job_versions"
)

// Columns holds all SQL columns for jobversion fields.
var Columns = []string{
	FieldID,
	FieldCreatedAt,
	FieldName,
	FieldDescription,
	FieldScript,
	FieldCronSchedule,
	FieldScheduleEnabled,
	FieldAllowConcurrentRuns,
	FieldArguments,
	FieldRequiresFileUpload,
	FieldChangedByEmail,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "job_versions"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"job_versions",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// OrderOption defines the ordering options for the JobVersion queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByScript orders the results by the script field.
func ByScript(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScript, opts...).ToFunc()
}

// ByCronSchedule orders the results by the cron_schedule field.
func ByCronSchedule(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCronSchedule, opts...).ToFunc()
}

// ByScheduleEnabled orders the results by the schedule_enabled field.
func ByScheduleEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScheduleEnabled, opts...).ToFunc()
}

// ByAllowConcurrentRuns orders the results by the allow_concurrent_runs field.
func ByAllowConcurrentRuns(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAllowConcurrentRuns, opts...).ToFunc()
}

// ByRequiresFileUpload orders the results by the requires_file_upload field.
func ByRequiresFileUpload(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRequiresFileUpload, opts...).ToFunc()
}

// ByChangedByEmail orders the results by the changed_by_email field.
func ByChangedByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChangedByEmail, opts...).ToFunc()
}

// ByJobField orders the results by job field.
func ByJobField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newJobStep(), sql.OrderByField(field, opts...))
	}
}
func newJobStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(JobInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
	)
}
