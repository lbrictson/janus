// Code generated by ent, DO NOT EDIT.

package jobversion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/lbrictson/janus/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldID, id))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldName, v))
}

// Description applies equality check predicate on the "description" field. It's identical to DescriptionEQ.
func Description(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldDescription, v))
}

// Script applies equality check predicate on the "script" field. It's identical to ScriptEQ.
func Script(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldScript, v))
}

// CronSchedule applies equality check predicate on the "cron_schedule" field. It's identical to CronScheduleEQ.
func CronSchedule(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldCronSchedule, v))
}

// ScheduleEnabled applies equality check predicate on the "schedule_enabled" field. It's identical to ScheduleEnabledEQ.
func ScheduleEnabled(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldScheduleEnabled, v))
}

// AllowConcurrentRuns applies equality check predicate on the "allow_concurrent_runs" field. It's identical to AllowConcurrentRunsEQ.
func AllowConcurrentRuns(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldAllowConcurrentRuns, v))
}

// RequiresFileUpload applies equality check predicate on the "requires_file_upload" field. It's identical to RequiresFileUploadEQ.
func RequiresFileUpload(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldRequiresFileUpload, v))
}

// ChangedByEmail applies equality check predicate on the "changed_by_email" field. It's identical to ChangedByEmailEQ.
func ChangedByEmail(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldChangedByEmail, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContainsFold(FieldName, v))
}

// DescriptionEQ applies the EQ predicate on the "description" field.
func DescriptionEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldDescription, v))
}

// DescriptionNEQ applies the NEQ predicate on the "description" field.
func DescriptionNEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldDescription, v))
}

// DescriptionIn applies the In predicate on the "description" field.
func DescriptionIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldDescription, vs...))
}

// DescriptionNotIn applies the NotIn predicate on the "description" field.
func DescriptionNotIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldDescription, vs...))
}

// DescriptionGT applies the GT predicate on the "description" field.
func DescriptionGT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldDescription, v))
}

// DescriptionGTE applies the GTE predicate on the "description" field.
func DescriptionGTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldDescription, v))
}

// DescriptionLT applies the LT predicate on the "description" field.
func DescriptionLT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldDescription, v))
}

// DescriptionLTE applies the LTE predicate on the "description" field.
func DescriptionLTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldDescription, v))
}

// DescriptionContains applies the Contains predicate on the "description" field.
func DescriptionContains(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContains(FieldDescription, v))
}

// DescriptionHasPrefix applies the HasPrefix predicate on the "description" field.
func DescriptionHasPrefix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasPrefix(FieldDescription, v))
}

// DescriptionHasSuffix applies the HasSuffix predicate on the "description" field.
func DescriptionHasSuffix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasSuffix(FieldDescription, v))
}

// DescriptionEqualFold applies the EqualFold predicate on the "description" field.
func DescriptionEqualFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEqualFold(FieldDescription, v))
}

// DescriptionContainsFold applies the ContainsFold predicate on the "description" field.
func DescriptionContainsFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContainsFold(FieldDescription, v))
}

// ScriptEQ applies the EQ predicate on the "script" field.
func ScriptEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldScript, v))
}

// ScriptNEQ applies the NEQ predicate on the "script" field.
func ScriptNEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldScript, v))
}

// ScriptIn applies the In predicate on the "script" field.
func ScriptIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldScript, vs...))
}

// ScriptNotIn applies the NotIn predicate on the "script" field.
func ScriptNotIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldScript, vs...))
}

// ScriptGT applies the GT predicate on the "script" field.
func ScriptGT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldScript, v))
}

// ScriptGTE applies the GTE predicate on the "script" field.
func ScriptGTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldScript, v))
}

// ScriptLT applies the LT predicate on the "script" field.
func ScriptLT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldScript, v))
}

// ScriptLTE applies the LTE predicate on the "script" field.
func ScriptLTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldScript, v))
}

// ScriptContains applies the Contains predicate on the "script" field.
func ScriptContains(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContains(FieldScript, v))
}

// ScriptHasPrefix applies the HasPrefix predicate on the "script" field.
func ScriptHasPrefix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasPrefix(FieldScript, v))
}

// ScriptHasSuffix applies the HasSuffix predicate on the "script" field.
func ScriptHasSuffix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasSuffix(FieldScript, v))
}

// ScriptEqualFold applies the EqualFold predicate on the "script" field.
func ScriptEqualFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEqualFold(FieldScript, v))
}

// ScriptContainsFold applies the ContainsFold predicate on the "script" field.
func ScriptContainsFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContainsFold(FieldScript, v))
}

// CronScheduleEQ applies the EQ predicate on the "cron_schedule" field.
func CronScheduleEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldCronSchedule, v))
}

// CronScheduleNEQ applies the NEQ predicate on the "cron_schedule" field.
func CronScheduleNEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldCronSchedule, v))
}

// CronScheduleIn applies the In predicate on the "cron_schedule" field.
func CronScheduleIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldCronSchedule, vs...))
}

// CronScheduleNotIn applies the NotIn predicate on the "cron_schedule" field.
func CronScheduleNotIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldCronSchedule, vs...))
}

// CronScheduleGT applies the GT predicate on the "cron_schedule" field.
func CronScheduleGT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldCronSchedule, v))
}

// CronScheduleGTE applies the GTE predicate on the "cron_schedule" field.
func CronScheduleGTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldCronSchedule, v))
}

// CronScheduleLT applies the LT predicate on the "cron_schedule" field.
func CronScheduleLT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldCronSchedule, v))
}

// CronScheduleLTE applies the LTE predicate on the "cron_schedule" field.
func CronScheduleLTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldCronSchedule, v))
}

// CronScheduleContains applies the Contains predicate on the "cron_schedule" field.
func CronScheduleContains(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContains(FieldCronSchedule, v))
}

// CronScheduleHasPrefix applies the HasPrefix predicate on the "cron_schedule" field.
func CronScheduleHasPrefix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasPrefix(FieldCronSchedule, v))
}

// CronScheduleHasSuffix applies the HasSuffix predicate on the "cron_schedule" field.
func CronScheduleHasSuffix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasSuffix(FieldCronSchedule, v))
}

// CronScheduleIsNil applies the IsNil predicate on the "cron_schedule" field.
func CronScheduleIsNil() predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIsNull(FieldCronSchedule))
}

// CronScheduleNotNil applies the NotNil predicate on the "cron_schedule" field.
func CronScheduleNotNil() predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotNull(FieldCronSchedule))
}

// CronScheduleEqualFold applies the EqualFold predicate on the "cron_schedule" field.
func CronScheduleEqualFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEqualFold(FieldCronSchedule, v))
}

// CronScheduleContainsFold applies the ContainsFold predicate on the "cron_schedule" field.
func CronScheduleContainsFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContainsFold(FieldCronSchedule, v))
}

// ScheduleEnabledEQ applies the EQ predicate on the "schedule_enabled" field.
func ScheduleEnabledEQ(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldScheduleEnabled, v))
}

// ScheduleEnabledNEQ applies the NEQ predicate on the "schedule_enabled" field.
func ScheduleEnabledNEQ(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldScheduleEnabled, v))
}

// AllowConcurrentRunsEQ applies the EQ predicate on the "allow_concurrent_runs" field.
func AllowConcurrentRunsEQ(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldAllowConcurrentRuns, v))
}

// AllowConcurrentRunsNEQ applies the NEQ predicate on the "allow_concurrent_runs" field.
func AllowConcurrentRunsNEQ(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldAllowConcurrentRuns, v))
}

// RequiresFileUploadEQ applies the EQ predicate on the "requires_file_upload" field.
func RequiresFileUploadEQ(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldRequiresFileUpload, v))
}

// RequiresFileUploadNEQ applies the NEQ predicate on the "requires_file_upload" field.
func RequiresFileUploadNEQ(v bool) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldRequiresFileUpload, v))
}

// ChangedByEmailEQ applies the EQ predicate on the "changed_by_email" field.
func ChangedByEmailEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEQ(FieldChangedByEmail, v))
}

// ChangedByEmailNEQ applies the NEQ predicate on the "changed_by_email" field.
func ChangedByEmailNEQ(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNEQ(FieldChangedByEmail, v))
}

// ChangedByEmailIn applies the In predicate on the "changed_by_email" field.
func ChangedByEmailIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldIn(FieldChangedByEmail, vs...))
}

// ChangedByEmailNotIn applies the NotIn predicate on the "changed_by_email" field.
func ChangedByEmailNotIn(vs ...string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldNotIn(FieldChangedByEmail, vs...))
}

// ChangedByEmailGT applies the GT predicate on the "changed_by_email" field.
func ChangedByEmailGT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGT(FieldChangedByEmail, v))
}

// ChangedByEmailGTE applies the GTE predicate on the "changed_by_email" field.
func ChangedByEmailGTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldGTE(FieldChangedByEmail, v))
}

// ChangedByEmailLT applies the LT predicate on the "changed_by_email" field.
func ChangedByEmailLT(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLT(FieldChangedByEmail, v))
}

// ChangedByEmailLTE applies the LTE predicate on the "changed_by_email" field.
func ChangedByEmailLTE(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldLTE(FieldChangedByEmail, v))
}

// ChangedByEmailContains applies the Contains predicate on the "changed_by_email" field.
func ChangedByEmailContains(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContains(FieldChangedByEmail, v))
}

// ChangedByEmailHasPrefix applies the HasPrefix predicate on the "changed_by_email" field.
func ChangedByEmailHasPrefix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasPrefix(FieldChangedByEmail, v))
}

// ChangedByEmailHasSuffix applies the HasSuffix predicate on the "changed_by_email" field.
func ChangedByEmailHasSuffix(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldHasSuffix(FieldChangedByEmail, v))
}

// ChangedByEmailEqualFold applies the EqualFold predicate on the "changed_by_email" field.
func ChangedByEmailEqualFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldEqualFold(FieldChangedByEmail, v))
}

// ChangedByEmailContainsFold applies the ContainsFold predicate on the "changed_by_email" field.
func ChangedByEmailContainsFold(v string) predicate.JobVersion {
	return predicate.JobVersion(sql.FieldContainsFold(FieldChangedByEmail, v))
}

// HasJob applies the HasEdge predicate on the "job" edge.
func HasJob() predicate.JobVersion {
	return predicate.JobVersion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, JobTable, JobColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasJobWith applies the HasEdge predicate on the "job" edge with a given conditions (other predicates).
func HasJobWith(preds ...predicate.Job) predicate.JobVersion {
	return predicate.JobVersion(func(s *sql.Selector) {
		step := newJobStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.JobVersion) predicate.JobVersion {
	return predicate.JobVersion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.JobVersion) predicate.JobVersion {
	return predicate.JobVersion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.JobVersion) predicate.JobVersion {
	return predicate.JobVersion(sql.NotPredicates(p))
}
