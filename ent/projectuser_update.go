// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/projectuser"
	"github.com/lbrictson/janus/ent/user"
)

// ProjectUserUpdate is the builder for updating ProjectUser entities.
type ProjectUserUpdate struct {
	config
	hooks    []Hook
	mutation *ProjectUserMutation
}

// Where appends a list predicates to the ProjectUserUpdate builder.
func (_u *ProjectUserUpdate) Where(ps ...predicate.ProjectUser) *ProjectUserUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCanEdit sets the "can_edit" field.
func (_u *ProjectUserUpdate) SetCanEdit(v bool) *ProjectUserUpdate {
	_u.mutation.SetCanEdit(v)
	return _u
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (_u *ProjectUserUpdate) SetNillableCanEdit(v *bool) *ProjectUserUpdate {
	if v != nil {
		_u.SetCanEdit(*v)
	}
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *ProjectUserUpdate) SetProjectID(id int) *ProjectUserUpdate {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *ProjectUserUpdate) SetProject(v *Project) *ProjectUserUpdate {
	return _u.SetProjectID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ProjectUserUpdate) SetUserID(id int) *ProjectUserUpdate {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProjectUserUpdate) SetUser(v *User) *ProjectUserUpdate {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProjectUserMutation object of the builder.
func (_u *ProjectUserUpdate) Mutation() *ProjectUserMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *ProjectUserUpdate) ClearProject() *ProjectUserUpdate {
	_u.mutation.ClearProject()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProjectUserUpdate) ClearUser() *ProjectUserUpdate {
	_u.mutation.ClearUser()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *ProjectUserUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUserUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *ProjectUserUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUserUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUserUpdate) check() error {
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectUser.project"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectUser.user"`)
	}
	return nil
}

func (_u *ProjectUserUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectuser.Table, projectuser.Columns, sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CanEdit(); ok {
		_spec.SetField(projectuser.FieldCanEdit, field.TypeBool, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.ProjectTable,
			Columns: []string{projectuser.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.ProjectTable,
			Columns: []string{projectuser.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.UserTable,
			Columns: []string{projectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.UserTable,
			Columns: []string{projectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// ProjectUserUpdateOne is the builder for updating a single ProjectUser entity.
type ProjectUserUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProjectUserMutation
}

// SetCanEdit sets the "can_edit" field.
func (_u *ProjectUserUpdateOne) SetCanEdit(v bool) *ProjectUserUpdateOne {
	_u.mutation.SetCanEdit(v)
	return _u
}

// SetNillableCanEdit sets the "can_edit" field if the given value is not nil.
func (_u *ProjectUserUpdateOne) SetNillableCanEdit(v *bool) *ProjectUserUpdateOne {
	if v != nil {
		_u.SetCanEdit(*v)
	}
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *ProjectUserUpdateOne) SetProjectID(id int) *ProjectUserUpdateOne {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *ProjectUserUpdateOne) SetProject(v *Project) *ProjectUserUpdateOne {
	return _u.SetProjectID(v.ID)
}

// SetUserID sets the "user" edge to the User entity by ID.
func (_u *ProjectUserUpdateOne) SetUserID(id int) *ProjectUserUpdateOne {
	_u.mutation.SetUserID(id)
	return _u
}

// SetUser sets the "user" edge to the User entity.
func (_u *ProjectUserUpdateOne) SetUser(v *User) *ProjectUserUpdateOne {
	return _u.SetUserID(v.ID)
}

// Mutation returns the ProjectUserMutation object of the builder.
func (_u *ProjectUserUpdateOne) Mutation() *ProjectUserMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *ProjectUserUpdateOne) ClearProject() *ProjectUserUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// ClearUser clears the "user" edge to the User entity.
func (_u *ProjectUserUpdateOne) ClearUser() *ProjectUserUpdateOne {
	_u.mutation.ClearUser()
	return _u
}

// Where appends a list predicates to the ProjectUserUpdate builder.
func (_u *ProjectUserUpdateOne) Where(ps ...predicate.ProjectUser) *ProjectUserUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *ProjectUserUpdateOne) Select(field string, fields ...string) *ProjectUserUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated ProjectUser entity.
func (_u *ProjectUserUpdateOne) Save(ctx context.Context) (*ProjectUser, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *ProjectUserUpdateOne) SaveX(ctx context.Context) *ProjectUser {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *ProjectUserUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *ProjectUserUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *ProjectUserUpdateOne) check() error {
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectUser.project"`)
	}
	if _u.mutation.UserCleared() && len(_u.mutation.UserIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "ProjectUser.user"`)
	}
	return nil
}

func (_u *ProjectUserUpdateOne) sqlSave(ctx context.Context) (_node *ProjectUser, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(projectuser.Table, projectuser.Columns, sqlgraph.NewFieldSpec(projectuser.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProjectUser.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, projectuser.FieldID)
		for _, f := range fields {
			if !projectuser.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != projectuser.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CanEdit(); ok {
		_spec.SetField(projectuser.FieldCanEdit, field.TypeBool, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.ProjectTable,
			Columns: []string{projectuser.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.ProjectTable,
			Columns: []string{projectuser.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.UserCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.UserTable,
			Columns: []string{projectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   projectuser.UserTable,
			Columns: []string{projectuser.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &ProjectUser{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{projectuser.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
