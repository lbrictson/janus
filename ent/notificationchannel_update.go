// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/notificationchannel"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/schema"
)

// NotificationChannelUpdate is the builder for updating NotificationChannel entities.
type NotificationChannelUpdate struct {
	config
	hooks    []Hook
	mutation *NotificationChannelMutation
}

// Where appends a list predicates to the NotificationChannelUpdate builder.
func (_u *NotificationChannelUpdate) Where(ps ...predicate.NotificationChannel) *NotificationChannelUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *NotificationChannelUpdate) SetName(v string) *NotificationChannelUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableName(v *string) *NotificationChannelUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *NotificationChannelUpdate) SetDescription(v string) *NotificationChannelUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableDescription(v *string) *NotificationChannelUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *NotificationChannelUpdate) ClearDescription() *NotificationChannelUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetType sets the "type" field.
func (_u *NotificationChannelUpdate) SetType(v schema.NotificationChannelType) *NotificationChannelUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableType(v *schema.NotificationChannelType) *NotificationChannelUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *NotificationChannelUpdate) SetConfig(v schema.ChannelConfig) *NotificationChannelUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableConfig(v *schema.ChannelConfig) *NotificationChannelUpdate {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *NotificationChannelUpdate) ClearConfig() *NotificationChannelUpdate {
	_u.mutation.ClearConfig()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationChannelUpdate) SetUpdatedAt(v time.Time) *NotificationChannelUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *NotificationChannelUpdate) SetEnabled(v bool) *NotificationChannelUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableEnabled(v *bool) *NotificationChannelUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *NotificationChannelUpdate) SetRetryCount(v int) *NotificationChannelUpdate {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableRetryCount(v *int) *NotificationChannelUpdate {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *NotificationChannelUpdate) AddRetryCount(v int) *NotificationChannelUpdate {
	_u.mutation.AddRetryCount(v)
	return _u
}

// ClearRetryCount clears the value of the "retry_count" field.
func (_u *NotificationChannelUpdate) ClearRetryCount() *NotificationChannelUpdate {
	_u.mutation.ClearRetryCount()
	return _u
}

// SetLastUsed sets the "last_used" field.
func (_u *NotificationChannelUpdate) SetLastUsed(v time.Time) *NotificationChannelUpdate {
	_u.mutation.SetLastUsed(v)
	return _u
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableLastUsed(v *time.Time) *NotificationChannelUpdate {
	if v != nil {
		_u.SetLastUsed(*v)
	}
	return _u
}

// ClearLastUsed clears the value of the "last_used" field.
func (_u *NotificationChannelUpdate) ClearLastUsed() *NotificationChannelUpdate {
	_u.mutation.ClearLastUsed()
	return _u
}

// SetLastError sets the "last_error" field.
func (_u *NotificationChannelUpdate) SetLastError(v string) *NotificationChannelUpdate {
	_u.mutation.SetLastError(v)
	return _u
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (_u *NotificationChannelUpdate) SetNillableLastError(v *string) *NotificationChannelUpdate {
	if v != nil {
		_u.SetLastError(*v)
	}
	return _u
}

// ClearLastError clears the value of the "last_error" field.
func (_u *NotificationChannelUpdate) ClearLastError() *NotificationChannelUpdate {
	_u.mutation.ClearLastError()
	return _u
}

// Mutation returns the NotificationChannelMutation object of the builder.
func (_u *NotificationChannelUpdate) Mutation() *NotificationChannelMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *NotificationChannelUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationChannelUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *NotificationChannelUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationChannelUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationChannelUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationchannel.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationChannelUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationChannel.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := notificationchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "NotificationChannel.type": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationChannelUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationchannel.Table, notificationchannel.Columns, sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationchannel.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(notificationchannel.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(notificationchannel.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(notificationchannel.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(notificationchannel.FieldConfig, field.TypeJSON, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(notificationchannel.FieldConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(notificationchannel.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(notificationchannel.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(notificationchannel.FieldRetryCount, field.TypeInt, value)
	}
	if _u.mutation.RetryCountCleared() {
		_spec.ClearField(notificationchannel.FieldRetryCount, field.TypeInt)
	}
	if value, ok := _u.mutation.LastUsed(); ok {
		_spec.SetField(notificationchannel.FieldLastUsed, field.TypeTime, value)
	}
	if _u.mutation.LastUsedCleared() {
		_spec.ClearField(notificationchannel.FieldLastUsed, field.TypeTime)
	}
	if value, ok := _u.mutation.LastError(); ok {
		_spec.SetField(notificationchannel.FieldLastError, field.TypeString, value)
	}
	if _u.mutation.LastErrorCleared() {
		_spec.ClearField(notificationchannel.FieldLastError, field.TypeString)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// NotificationChannelUpdateOne is the builder for updating a single NotificationChannel entity.
type NotificationChannelUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NotificationChannelMutation
}

// SetName sets the "name" field.
func (_u *NotificationChannelUpdateOne) SetName(v string) *NotificationChannelUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableName(v *string) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *NotificationChannelUpdateOne) SetDescription(v string) *NotificationChannelUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableDescription(v *string) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *NotificationChannelUpdateOne) ClearDescription() *NotificationChannelUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetType sets the "type" field.
func (_u *NotificationChannelUpdateOne) SetType(v schema.NotificationChannelType) *NotificationChannelUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableType(v *schema.NotificationChannelType) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *NotificationChannelUpdateOne) SetConfig(v schema.ChannelConfig) *NotificationChannelUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetNillableConfig sets the "config" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableConfig(v *schema.ChannelConfig) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetConfig(*v)
	}
	return _u
}

// ClearConfig clears the value of the "config" field.
func (_u *NotificationChannelUpdateOne) ClearConfig() *NotificationChannelUpdateOne {
	_u.mutation.ClearConfig()
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *NotificationChannelUpdateOne) SetUpdatedAt(v time.Time) *NotificationChannelUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *NotificationChannelUpdateOne) SetEnabled(v bool) *NotificationChannelUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableEnabled(v *bool) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetRetryCount sets the "retry_count" field.
func (_u *NotificationChannelUpdateOne) SetRetryCount(v int) *NotificationChannelUpdateOne {
	_u.mutation.ResetRetryCount()
	_u.mutation.SetRetryCount(v)
	return _u
}

// SetNillableRetryCount sets the "retry_count" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableRetryCount(v *int) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetRetryCount(*v)
	}
	return _u
}

// AddRetryCount adds value to the "retry_count" field.
func (_u *NotificationChannelUpdateOne) AddRetryCount(v int) *NotificationChannelUpdateOne {
	_u.mutation.AddRetryCount(v)
	return _u
}

// ClearRetryCount clears the value of the "retry_count" field.
func (_u *NotificationChannelUpdateOne) ClearRetryCount() *NotificationChannelUpdateOne {
	_u.mutation.ClearRetryCount()
	return _u
}

// SetLastUsed sets the "last_used" field.
func (_u *NotificationChannelUpdateOne) SetLastUsed(v time.Time) *NotificationChannelUpdateOne {
	_u.mutation.SetLastUsed(v)
	return _u
}

// SetNillableLastUsed sets the "last_used" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableLastUsed(v *time.Time) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetLastUsed(*v)
	}
	return _u
}

// ClearLastUsed clears the value of the "last_used" field.
func (_u *NotificationChannelUpdateOne) ClearLastUsed() *NotificationChannelUpdateOne {
	_u.mutation.ClearLastUsed()
	return _u
}

// SetLastError sets the "last_error" field.
func (_u *NotificationChannelUpdateOne) SetLastError(v string) *NotificationChannelUpdateOne {
	_u.mutation.SetLastError(v)
	return _u
}

// SetNillableLastError sets the "last_error" field if the given value is not nil.
func (_u *NotificationChannelUpdateOne) SetNillableLastError(v *string) *NotificationChannelUpdateOne {
	if v != nil {
		_u.SetLastError(*v)
	}
	return _u
}

// ClearLastError clears the value of the "last_error" field.
func (_u *NotificationChannelUpdateOne) ClearLastError() *NotificationChannelUpdateOne {
	_u.mutation.ClearLastError()
	return _u
}

// Mutation returns the NotificationChannelMutation object of the builder.
func (_u *NotificationChannelUpdateOne) Mutation() *NotificationChannelMutation {
	return _u.mutation
}

// Where appends a list predicates to the NotificationChannelUpdate builder.
func (_u *NotificationChannelUpdateOne) Where(ps ...predicate.NotificationChannel) *NotificationChannelUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *NotificationChannelUpdateOne) Select(field string, fields ...string) *NotificationChannelUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated NotificationChannel entity.
func (_u *NotificationChannelUpdateOne) Save(ctx context.Context) (*NotificationChannel, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *NotificationChannelUpdateOne) SaveX(ctx context.Context) *NotificationChannel {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *NotificationChannelUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *NotificationChannelUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *NotificationChannelUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := notificationchannel.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *NotificationChannelUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := notificationchannel.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "NotificationChannel.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.GetType(); ok {
		if err := notificationchannel.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "NotificationChannel.type": %w`, err)}
		}
	}
	return nil
}

func (_u *NotificationChannelUpdateOne) sqlSave(ctx context.Context) (_node *NotificationChannel, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(notificationchannel.Table, notificationchannel.Columns, sqlgraph.NewFieldSpec(notificationchannel.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NotificationChannel.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, notificationchannel.FieldID)
		for _, f := range fields {
			if !notificationchannel.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != notificationchannel.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(notificationchannel.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(notificationchannel.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(notificationchannel.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(notificationchannel.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(notificationchannel.FieldConfig, field.TypeJSON, value)
	}
	if _u.mutation.ConfigCleared() {
		_spec.ClearField(notificationchannel.FieldConfig, field.TypeJSON)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(notificationchannel.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(notificationchannel.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.RetryCount(); ok {
		_spec.SetField(notificationchannel.FieldRetryCount, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedRetryCount(); ok {
		_spec.AddField(notificationchannel.FieldRetryCount, field.TypeInt, value)
	}
	if _u.mutation.RetryCountCleared() {
		_spec.ClearField(notificationchannel.FieldRetryCount, field.TypeInt)
	}
	if value, ok := _u.mutation.LastUsed(); ok {
		_spec.SetField(notificationchannel.FieldLastUsed, field.TypeTime, value)
	}
	if _u.mutation.LastUsedCleared() {
		_spec.ClearField(notificationchannel.FieldLastUsed, field.TypeTime)
	}
	if value, ok := _u.mutation.LastError(); ok {
		_spec.SetField(notificationchannel.FieldLastError, field.TypeString, value)
	}
	if _u.mutation.LastErrorCleared() {
		_spec.ClearField(notificationchannel.FieldLastError, field.TypeString)
	}
	_node = &NotificationChannel{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{notificationchannel.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
