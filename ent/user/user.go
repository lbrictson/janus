// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the user type in the database.
	Label = "user"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEmail holds the string denoting the email field in the database.
	FieldEmail = "email"
	// FieldEncryptedPassword holds the string denoting the encrypted_password field in the database.
	FieldEncryptedPassword = "encrypted_password"
	// FieldAdmin holds the string denoting the admin field in the database.
	FieldAdmin = "admin"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// FieldAPIKey holds the string denoting the api_key field in the database.
	FieldAPIKey = "api_key"
	// FieldMustChangePassword holds the string denoting the must_change_password field in the database.
	FieldMustChangePassword = "must_change_password"
	// FieldIsSSO holds the string denoting the is_sso field in the database.
	FieldIsSSO = "is_sso"
	// EdgeProjectUsers holds the string denoting the projectusers edge name in mutations.
	EdgeProjectUsers = "projectUsers"
	// Table holds the table name of the user in the database.
	Table = "users"
	// ProjectUsersTable is the table that holds the projectUsers relation/edge.
	ProjectUsersTable = "project_users"
	// ProjectUsersInverseTable is the table name for the ProjectUser entity.
	// It exists in this package in order to avoid circular dependency with the "projectuser" package.
	ProjectUsersInverseTable = "project_users"
	// ProjectUsersColumn is the table column denoting the projectUsers relation/edge.
	ProjectUsersColumn = "user_project_users"
)

// Columns holds all SQL columns for user fields.
var Columns = []string{
	FieldID,
	FieldEmail,
	FieldEncryptedPassword,
	FieldAdmin,
	FieldCreatedAt,
	FieldUpdatedAt,
	FieldAPIKey,
	FieldMustChangePassword,
	FieldIsSSO,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultAdmin holds the default value on creation for the "admin" field.
	DefaultAdmin bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
	// DefaultMustChangePassword holds the default value on creation for the "must_change_password" field.
	DefaultMustChangePassword bool
	// DefaultIsSSO holds the default value on creation for the "is_sso" field.
	DefaultIsSSO bool
)

// OrderOption defines the ordering options for the User queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEmail orders the results by the email field.
func ByEmail(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEmail, opts...).ToFunc()
}

// ByAdmin orders the results by the admin field.
func ByAdmin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAdmin, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// ByAPIKey orders the results by the api_key field.
func ByAPIKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIKey, opts...).ToFunc()
}

// ByMustChangePassword orders the results by the must_change_password field.
func ByMustChangePassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMustChangePassword, opts...).ToFunc()
}

// ByIsSSO orders the results by the is_sso field.
func ByIsSSO(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsSSO, opts...).ToFunc()
}

// ByProjectUsersCount orders the results by projectUsers count.
func ByProjectUsersCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newProjectUsersStep(), opts...)
	}
}

// ByProjectUsers orders the results by projectUsers terms.
func ByProjectUsers(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProjectUsersStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newProjectUsersStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProjectUsersInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, ProjectUsersTable, ProjectUsersColumn),
	)
}
