// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (_u *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *JobUpdate) SetName(v string) *JobUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *JobUpdate) SetNillableName(v *string) *JobUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobUpdate) SetDescription(v string) *JobUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobUpdate) SetNillableDescription(v *string) *JobUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *JobUpdate) ClearDescription() *JobUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetCronSchedule sets the "cron_schedule" field.
func (_u *JobUpdate) SetCronSchedule(v string) *JobUpdate {
	_u.mutation.SetCronSchedule(v)
	return _u
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (_u *JobUpdate) SetNillableCronSchedule(v *string) *JobUpdate {
	if v != nil {
		_u.SetCronSchedule(*v)
	}
	return _u
}

// ClearCronSchedule clears the value of the "cron_schedule" field.
func (_u *JobUpdate) ClearCronSchedule() *JobUpdate {
	_u.mutation.ClearCronSchedule()
	return _u
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (_u *JobUpdate) SetScheduleEnabled(v bool) *JobUpdate {
	_u.mutation.SetScheduleEnabled(v)
	return _u
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (_u *JobUpdate) SetNillableScheduleEnabled(v *bool) *JobUpdate {
	if v != nil {
		_u.SetScheduleEnabled(*v)
	}
	return _u
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (_u *JobUpdate) SetAllowConcurrentRuns(v bool) *JobUpdate {
	_u.mutation.SetAllowConcurrentRuns(v)
	return _u
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (_u *JobUpdate) SetNillableAllowConcurrentRuns(v *bool) *JobUpdate {
	if v != nil {
		_u.SetAllowConcurrentRuns(*v)
	}
	return _u
}

// SetArguments sets the "arguments" field.
func (_u *JobUpdate) SetArguments(v []schema.JobArgument) *JobUpdate {
	_u.mutation.SetArguments(v)
	return _u
}

// AppendArguments appends value to the "arguments" field.
func (_u *JobUpdate) AppendArguments(v []schema.JobArgument) *JobUpdate {
	_u.mutation.AppendArguments(v)
	return _u
}

// ClearArguments clears the value of the "arguments" field.
func (_u *JobUpdate) ClearArguments() *JobUpdate {
	_u.mutation.ClearArguments()
	return _u
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (_u *JobUpdate) SetRequiresFileUpload(v bool) *JobUpdate {
	_u.mutation.SetRequiresFileUpload(v)
	return _u
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (_u *JobUpdate) SetNillableRequiresFileUpload(v *bool) *JobUpdate {
	if v != nil {
		_u.SetRequiresFileUpload(*v)
	}
	return _u
}

// SetAverageDurationMs sets the "average_duration_ms" field.
func (_u *JobUpdate) SetAverageDurationMs(v int64) *JobUpdate {
	_u.mutation.ResetAverageDurationMs()
	_u.mutation.SetAverageDurationMs(v)
	return _u
}

// SetNillableAverageDurationMs sets the "average_duration_ms" field if the given value is not nil.
func (_u *JobUpdate) SetNillableAverageDurationMs(v *int64) *JobUpdate {
	if v != nil {
		_u.SetAverageDurationMs(*v)
	}
	return _u
}

// AddAverageDurationMs adds value to the "average_duration_ms" field.
func (_u *JobUpdate) AddAverageDurationMs(v int64) *JobUpdate {
	_u.mutation.AddAverageDurationMs(v)
	return _u
}

// ClearAverageDurationMs clears the value of the "average_duration_ms" field.
func (_u *JobUpdate) ClearAverageDurationMs() *JobUpdate {
	_u.mutation.ClearAverageDurationMs()
	return _u
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (_u *JobUpdate) SetTimeoutSeconds(v int) *JobUpdate {
	_u.mutation.ResetTimeoutSeconds()
	_u.mutation.SetTimeoutSeconds(v)
	return _u
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (_u *JobUpdate) SetNillableTimeoutSeconds(v *int) *JobUpdate {
	if v != nil {
		_u.SetTimeoutSeconds(*v)
	}
	return _u
}

// AddTimeoutSeconds adds value to the "timeout_seconds" field.
func (_u *JobUpdate) AddTimeoutSeconds(v int) *JobUpdate {
	_u.mutation.AddTimeoutSeconds(v)
	return _u
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (_u *JobUpdate) ClearTimeoutSeconds() *JobUpdate {
	_u.mutation.ClearTimeoutSeconds()
	return _u
}

// SetLastEditTime sets the "last_edit_time" field.
func (_u *JobUpdate) SetLastEditTime(v time.Time) *JobUpdate {
	_u.mutation.SetLastEditTime(v)
	return _u
}

// SetNotifyOnStartChannelIds sets the "notify_on_start_channel_ids" field.
func (_u *JobUpdate) SetNotifyOnStartChannelIds(v []int) *JobUpdate {
	_u.mutation.SetNotifyOnStartChannelIds(v)
	return _u
}

// AppendNotifyOnStartChannelIds appends value to the "notify_on_start_channel_ids" field.
func (_u *JobUpdate) AppendNotifyOnStartChannelIds(v []int) *JobUpdate {
	_u.mutation.AppendNotifyOnStartChannelIds(v)
	return _u
}

// ClearNotifyOnStartChannelIds clears the value of the "notify_on_start_channel_ids" field.
func (_u *JobUpdate) ClearNotifyOnStartChannelIds() *JobUpdate {
	_u.mutation.ClearNotifyOnStartChannelIds()
	return _u
}

// SetNotifyOnSuccessChannelIds sets the "notify_on_success_channel_ids" field.
func (_u *JobUpdate) SetNotifyOnSuccessChannelIds(v []int) *JobUpdate {
	_u.mutation.SetNotifyOnSuccessChannelIds(v)
	return _u
}

// AppendNotifyOnSuccessChannelIds appends value to the "notify_on_success_channel_ids" field.
func (_u *JobUpdate) AppendNotifyOnSuccessChannelIds(v []int) *JobUpdate {
	_u.mutation.AppendNotifyOnSuccessChannelIds(v)
	return _u
}

// ClearNotifyOnSuccessChannelIds clears the value of the "notify_on_success_channel_ids" field.
func (_u *JobUpdate) ClearNotifyOnSuccessChannelIds() *JobUpdate {
	_u.mutation.ClearNotifyOnSuccessChannelIds()
	return _u
}

// SetNotifyOnFailureChannelIds sets the "notify_on_failure_channel_ids" field.
func (_u *JobUpdate) SetNotifyOnFailureChannelIds(v []int) *JobUpdate {
	_u.mutation.SetNotifyOnFailureChannelIds(v)
	return _u
}

// AppendNotifyOnFailureChannelIds appends value to the "notify_on_failure_channel_ids" field.
func (_u *JobUpdate) AppendNotifyOnFailureChannelIds(v []int) *JobUpdate {
	_u.mutation.AppendNotifyOnFailureChannelIds(v)
	return _u
}

// ClearNotifyOnFailureChannelIds clears the value of the "notify_on_failure_channel_ids" field.
func (_u *JobUpdate) ClearNotifyOnFailureChannelIds() *JobUpdate {
	_u.mutation.ClearNotifyOnFailureChannelIds()
	return _u
}

// SetLastRunTime sets the "last_run_time" field.
func (_u *JobUpdate) SetLastRunTime(v time.Time) *JobUpdate {
	_u.mutation.SetLastRunTime(v)
	return _u
}

// SetNillableLastRunTime sets the "last_run_time" field if the given value is not nil.
func (_u *JobUpdate) SetNillableLastRunTime(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetLastRunTime(*v)
	}
	return _u
}

// SetNextCronRunTime sets the "next_cron_run_time" field.
func (_u *JobUpdate) SetNextCronRunTime(v time.Time) *JobUpdate {
	_u.mutation.SetNextCronRunTime(v)
	return _u
}

// SetNillableNextCronRunTime sets the "next_cron_run_time" field if the given value is not nil.
func (_u *JobUpdate) SetNillableNextCronRunTime(v *time.Time) *JobUpdate {
	if v != nil {
		_u.SetNextCronRunTime(*v)
	}
	return _u
}

// SetScript sets the "script" field.
func (_u *JobUpdate) SetScript(v string) *JobUpdate {
	_u.mutation.SetScript(v)
	return _u
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (_u *JobUpdate) SetNillableScript(v *string) *JobUpdate {
	if v != nil {
		_u.SetScript(*v)
	}
	return _u
}

// SetLastRunSuccess sets the "last_run_success" field.
func (_u *JobUpdate) SetLastRunSuccess(v bool) *JobUpdate {
	_u.mutation.SetLastRunSuccess(v)
	return _u
}

// SetNillableLastRunSuccess sets the "last_run_success" field if the given value is not nil.
func (_u *JobUpdate) SetNillableLastRunSuccess(v *bool) *JobUpdate {
	if v != nil {
		_u.SetLastRunSuccess(*v)
	}
	return _u
}

// SetCreatedByAPI sets the "created_by_api" field.
func (_u *JobUpdate) SetCreatedByAPI(v bool) *JobUpdate {
	_u.mutation.SetCreatedByAPI(v)
	return _u
}

// SetNillableCreatedByAPI sets the "created_by_api" field if the given value is not nil.
func (_u *JobUpdate) SetNillableCreatedByAPI(v *bool) *JobUpdate {
	if v != nil {
		_u.SetCreatedByAPI(*v)
	}
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *JobUpdate) SetProjectID(id int) *JobUpdate {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *JobUpdate) SetProject(v *Project) *JobUpdate {
	return _u.SetProjectID(v.ID)
}

// AddHistoryIDs adds the "history" edge to the JobHistory entity by IDs.
func (_u *JobUpdate) AddHistoryIDs(ids ...int) *JobUpdate {
	_u.mutation.AddHistoryIDs(ids...)
	return _u
}

// AddHistory adds the "history" edges to the JobHistory entity.
func (_u *JobUpdate) AddHistory(v ...*JobHistory) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHistoryIDs(ids...)
}

// AddVersionIDs adds the "versions" edge to the JobVersion entity by IDs.
func (_u *JobUpdate) AddVersionIDs(ids ...int) *JobUpdate {
	_u.mutation.AddVersionIDs(ids...)
	return _u
}

// AddVersions adds the "versions" edges to the JobVersion entity.
func (_u *JobUpdate) AddVersions(v ...*JobVersion) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVersionIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (_u *JobUpdate) Mutation() *JobMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *JobUpdate) ClearProject() *JobUpdate {
	_u.mutation.ClearProject()
	return _u
}

// ClearHistory clears all "history" edges to the JobHistory entity.
func (_u *JobUpdate) ClearHistory() *JobUpdate {
	_u.mutation.ClearHistory()
	return _u
}

// RemoveHistoryIDs removes the "history" edge to JobHistory entities by IDs.
func (_u *JobUpdate) RemoveHistoryIDs(ids ...int) *JobUpdate {
	_u.mutation.RemoveHistoryIDs(ids...)
	return _u
}

// RemoveHistory removes "history" edges to JobHistory entities.
func (_u *JobUpdate) RemoveHistory(v ...*JobHistory) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHistoryIDs(ids...)
}

// ClearVersions clears all "versions" edges to the JobVersion entity.
func (_u *JobUpdate) ClearVersions() *JobUpdate {
	_u.mutation.ClearVersions()
	return _u
}

// RemoveVersionIDs removes the "versions" edge to JobVersion entities by IDs.
func (_u *JobUpdate) RemoveVersionIDs(ids ...int) *JobUpdate {
	_u.mutation.RemoveVersionIDs(ids...)
	return _u
}

// RemoveVersions removes "versions" edges to JobVersion entities.
func (_u *JobUpdate) RemoveVersions(v ...*JobVersion) *JobUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobUpdate) defaults() {
	if _, ok := _u.mutation.LastEditTime(); !ok {
		v := job.UpdateDefaultLastEditTime()
		_u.mutation.SetLastEditTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Job.project"`)
	}
	return nil
}

func (_u *JobUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(job.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CronSchedule(); ok {
		_spec.SetField(job.FieldCronSchedule, field.TypeString, value)
	}
	if _u.mutation.CronScheduleCleared() {
		_spec.ClearField(job.FieldCronSchedule, field.TypeString)
	}
	if value, ok := _u.mutation.ScheduleEnabled(); ok {
		_spec.SetField(job.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(job.FieldAllowConcurrentRuns, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Arguments(); ok {
		_spec.SetField(job.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldArguments, value)
		})
	}
	if _u.mutation.ArgumentsCleared() {
		_spec.ClearField(job.FieldArguments, field.TypeJSON)
	}
	if value, ok := _u.mutation.RequiresFileUpload(); ok {
		_spec.SetField(job.FieldRequiresFileUpload, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AverageDurationMs(); ok {
		_spec.SetField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAverageDurationMs(); ok {
		_spec.AddField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if _u.mutation.AverageDurationMsCleared() {
		_spec.ClearField(job.FieldAverageDurationMs, field.TypeInt64)
	}
	if value, ok := _u.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if _u.mutation.TimeoutSecondsCleared() {
		_spec.ClearField(job.FieldTimeoutSeconds, field.TypeInt)
	}
	if value, ok := _u.mutation.LastEditTime(); ok {
		_spec.SetField(job.FieldLastEditTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NotifyOnStartChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnStartChannelIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedNotifyOnStartChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnStartChannelIds, value)
		})
	}
	if _u.mutation.NotifyOnStartChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnStartChannelIds, field.TypeJSON)
	}
	if value, ok := _u.mutation.NotifyOnSuccessChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedNotifyOnSuccessChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnSuccessChannelIds, value)
		})
	}
	if _u.mutation.NotifyOnSuccessChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON)
	}
	if value, ok := _u.mutation.NotifyOnFailureChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedNotifyOnFailureChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnFailureChannelIds, value)
		})
	}
	if _u.mutation.NotifyOnFailureChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON)
	}
	if value, ok := _u.mutation.LastRunTime(); ok {
		_spec.SetField(job.FieldLastRunTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NextCronRunTime(); ok {
		_spec.SetField(job.FieldNextCronRunTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Script(); ok {
		_spec.SetField(job.FieldScript, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastRunSuccess(); ok {
		_spec.SetField(job.FieldLastRunSuccess, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedByAPI(); ok {
		_spec.SetField(job.FieldCreatedByAPI, field.TypeBool, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !_u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !_u.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetName sets the "name" field.
func (_u *JobUpdateOne) SetName(v string) *JobUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableName(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobUpdateOne) SetDescription(v string) *JobUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableDescription(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *JobUpdateOne) ClearDescription() *JobUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetCronSchedule sets the "cron_schedule" field.
func (_u *JobUpdateOne) SetCronSchedule(v string) *JobUpdateOne {
	_u.mutation.SetCronSchedule(v)
	return _u
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableCronSchedule(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetCronSchedule(*v)
	}
	return _u
}

// ClearCronSchedule clears the value of the "cron_schedule" field.
func (_u *JobUpdateOne) ClearCronSchedule() *JobUpdateOne {
	_u.mutation.ClearCronSchedule()
	return _u
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (_u *JobUpdateOne) SetScheduleEnabled(v bool) *JobUpdateOne {
	_u.mutation.SetScheduleEnabled(v)
	return _u
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableScheduleEnabled(v *bool) *JobUpdateOne {
	if v != nil {
		_u.SetScheduleEnabled(*v)
	}
	return _u
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (_u *JobUpdateOne) SetAllowConcurrentRuns(v bool) *JobUpdateOne {
	_u.mutation.SetAllowConcurrentRuns(v)
	return _u
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableAllowConcurrentRuns(v *bool) *JobUpdateOne {
	if v != nil {
		_u.SetAllowConcurrentRuns(*v)
	}
	return _u
}

// SetArguments sets the "arguments" field.
func (_u *JobUpdateOne) SetArguments(v []schema.JobArgument) *JobUpdateOne {
	_u.mutation.SetArguments(v)
	return _u
}

// AppendArguments appends value to the "arguments" field.
func (_u *JobUpdateOne) AppendArguments(v []schema.JobArgument) *JobUpdateOne {
	_u.mutation.AppendArguments(v)
	return _u
}

// ClearArguments clears the value of the "arguments" field.
func (_u *JobUpdateOne) ClearArguments() *JobUpdateOne {
	_u.mutation.ClearArguments()
	return _u
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (_u *JobUpdateOne) SetRequiresFileUpload(v bool) *JobUpdateOne {
	_u.mutation.SetRequiresFileUpload(v)
	return _u
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableRequiresFileUpload(v *bool) *JobUpdateOne {
	if v != nil {
		_u.SetRequiresFileUpload(*v)
	}
	return _u
}

// SetAverageDurationMs sets the "average_duration_ms" field.
func (_u *JobUpdateOne) SetAverageDurationMs(v int64) *JobUpdateOne {
	_u.mutation.ResetAverageDurationMs()
	_u.mutation.SetAverageDurationMs(v)
	return _u
}

// SetNillableAverageDurationMs sets the "average_duration_ms" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableAverageDurationMs(v *int64) *JobUpdateOne {
	if v != nil {
		_u.SetAverageDurationMs(*v)
	}
	return _u
}

// AddAverageDurationMs adds value to the "average_duration_ms" field.
func (_u *JobUpdateOne) AddAverageDurationMs(v int64) *JobUpdateOne {
	_u.mutation.AddAverageDurationMs(v)
	return _u
}

// ClearAverageDurationMs clears the value of the "average_duration_ms" field.
func (_u *JobUpdateOne) ClearAverageDurationMs() *JobUpdateOne {
	_u.mutation.ClearAverageDurationMs()
	return _u
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (_u *JobUpdateOne) SetTimeoutSeconds(v int) *JobUpdateOne {
	_u.mutation.ResetTimeoutSeconds()
	_u.mutation.SetTimeoutSeconds(v)
	return _u
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableTimeoutSeconds(v *int) *JobUpdateOne {
	if v != nil {
		_u.SetTimeoutSeconds(*v)
	}
	return _u
}

// AddTimeoutSeconds adds value to the "timeout_seconds" field.
func (_u *JobUpdateOne) AddTimeoutSeconds(v int) *JobUpdateOne {
	_u.mutation.AddTimeoutSeconds(v)
	return _u
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (_u *JobUpdateOne) ClearTimeoutSeconds() *JobUpdateOne {
	_u.mutation.ClearTimeoutSeconds()
	return _u
}

// SetLastEditTime sets the "last_edit_time" field.
func (_u *JobUpdateOne) SetLastEditTime(v time.Time) *JobUpdateOne {
	_u.mutation.SetLastEditTime(v)
	return _u
}

// SetNotifyOnStartChannelIds sets the "notify_on_start_channel_ids" field.
func (_u *JobUpdateOne) SetNotifyOnStartChannelIds(v []int) *JobUpdateOne {
	_u.mutation.SetNotifyOnStartChannelIds(v)
	return _u
}

// AppendNotifyOnStartChannelIds appends value to the "notify_on_start_channel_ids" field.
func (_u *JobUpdateOne) AppendNotifyOnStartChannelIds(v []int) *JobUpdateOne {
	_u.mutation.AppendNotifyOnStartChannelIds(v)
	return _u
}

// ClearNotifyOnStartChannelIds clears the value of the "notify_on_start_channel_ids" field.
func (_u *JobUpdateOne) ClearNotifyOnStartChannelIds() *JobUpdateOne {
	_u.mutation.ClearNotifyOnStartChannelIds()
	return _u
}

// SetNotifyOnSuccessChannelIds sets the "notify_on_success_channel_ids" field.
func (_u *JobUpdateOne) SetNotifyOnSuccessChannelIds(v []int) *JobUpdateOne {
	_u.mutation.SetNotifyOnSuccessChannelIds(v)
	return _u
}

// AppendNotifyOnSuccessChannelIds appends value to the "notify_on_success_channel_ids" field.
func (_u *JobUpdateOne) AppendNotifyOnSuccessChannelIds(v []int) *JobUpdateOne {
	_u.mutation.AppendNotifyOnSuccessChannelIds(v)
	return _u
}

// ClearNotifyOnSuccessChannelIds clears the value of the "notify_on_success_channel_ids" field.
func (_u *JobUpdateOne) ClearNotifyOnSuccessChannelIds() *JobUpdateOne {
	_u.mutation.ClearNotifyOnSuccessChannelIds()
	return _u
}

// SetNotifyOnFailureChannelIds sets the "notify_on_failure_channel_ids" field.
func (_u *JobUpdateOne) SetNotifyOnFailureChannelIds(v []int) *JobUpdateOne {
	_u.mutation.SetNotifyOnFailureChannelIds(v)
	return _u
}

// AppendNotifyOnFailureChannelIds appends value to the "notify_on_failure_channel_ids" field.
func (_u *JobUpdateOne) AppendNotifyOnFailureChannelIds(v []int) *JobUpdateOne {
	_u.mutation.AppendNotifyOnFailureChannelIds(v)
	return _u
}

// ClearNotifyOnFailureChannelIds clears the value of the "notify_on_failure_channel_ids" field.
func (_u *JobUpdateOne) ClearNotifyOnFailureChannelIds() *JobUpdateOne {
	_u.mutation.ClearNotifyOnFailureChannelIds()
	return _u
}

// SetLastRunTime sets the "last_run_time" field.
func (_u *JobUpdateOne) SetLastRunTime(v time.Time) *JobUpdateOne {
	_u.mutation.SetLastRunTime(v)
	return _u
}

// SetNillableLastRunTime sets the "last_run_time" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableLastRunTime(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetLastRunTime(*v)
	}
	return _u
}

// SetNextCronRunTime sets the "next_cron_run_time" field.
func (_u *JobUpdateOne) SetNextCronRunTime(v time.Time) *JobUpdateOne {
	_u.mutation.SetNextCronRunTime(v)
	return _u
}

// SetNillableNextCronRunTime sets the "next_cron_run_time" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableNextCronRunTime(v *time.Time) *JobUpdateOne {
	if v != nil {
		_u.SetNextCronRunTime(*v)
	}
	return _u
}

// SetScript sets the "script" field.
func (_u *JobUpdateOne) SetScript(v string) *JobUpdateOne {
	_u.mutation.SetScript(v)
	return _u
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableScript(v *string) *JobUpdateOne {
	if v != nil {
		_u.SetScript(*v)
	}
	return _u
}

// SetLastRunSuccess sets the "last_run_success" field.
func (_u *JobUpdateOne) SetLastRunSuccess(v bool) *JobUpdateOne {
	_u.mutation.SetLastRunSuccess(v)
	return _u
}

// SetNillableLastRunSuccess sets the "last_run_success" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableLastRunSuccess(v *bool) *JobUpdateOne {
	if v != nil {
		_u.SetLastRunSuccess(*v)
	}
	return _u
}

// SetCreatedByAPI sets the "created_by_api" field.
func (_u *JobUpdateOne) SetCreatedByAPI(v bool) *JobUpdateOne {
	_u.mutation.SetCreatedByAPI(v)
	return _u
}

// SetNillableCreatedByAPI sets the "created_by_api" field if the given value is not nil.
func (_u *JobUpdateOne) SetNillableCreatedByAPI(v *bool) *JobUpdateOne {
	if v != nil {
		_u.SetCreatedByAPI(*v)
	}
	return _u
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (_u *JobUpdateOne) SetProjectID(id int) *JobUpdateOne {
	_u.mutation.SetProjectID(id)
	return _u
}

// SetProject sets the "project" edge to the Project entity.
func (_u *JobUpdateOne) SetProject(v *Project) *JobUpdateOne {
	return _u.SetProjectID(v.ID)
}

// AddHistoryIDs adds the "history" edge to the JobHistory entity by IDs.
func (_u *JobUpdateOne) AddHistoryIDs(ids ...int) *JobUpdateOne {
	_u.mutation.AddHistoryIDs(ids...)
	return _u
}

// AddHistory adds the "history" edges to the JobHistory entity.
func (_u *JobUpdateOne) AddHistory(v ...*JobHistory) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddHistoryIDs(ids...)
}

// AddVersionIDs adds the "versions" edge to the JobVersion entity by IDs.
func (_u *JobUpdateOne) AddVersionIDs(ids ...int) *JobUpdateOne {
	_u.mutation.AddVersionIDs(ids...)
	return _u
}

// AddVersions adds the "versions" edges to the JobVersion entity.
func (_u *JobUpdateOne) AddVersions(v ...*JobVersion) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddVersionIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (_u *JobUpdateOne) Mutation() *JobMutation {
	return _u.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (_u *JobUpdateOne) ClearProject() *JobUpdateOne {
	_u.mutation.ClearProject()
	return _u
}

// ClearHistory clears all "history" edges to the JobHistory entity.
func (_u *JobUpdateOne) ClearHistory() *JobUpdateOne {
	_u.mutation.ClearHistory()
	return _u
}

// RemoveHistoryIDs removes the "history" edge to JobHistory entities by IDs.
func (_u *JobUpdateOne) RemoveHistoryIDs(ids ...int) *JobUpdateOne {
	_u.mutation.RemoveHistoryIDs(ids...)
	return _u
}

// RemoveHistory removes "history" edges to JobHistory entities.
func (_u *JobUpdateOne) RemoveHistory(v ...*JobHistory) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveHistoryIDs(ids...)
}

// ClearVersions clears all "versions" edges to the JobVersion entity.
func (_u *JobUpdateOne) ClearVersions() *JobUpdateOne {
	_u.mutation.ClearVersions()
	return _u
}

// RemoveVersionIDs removes the "versions" edge to JobVersion entities by IDs.
func (_u *JobUpdateOne) RemoveVersionIDs(ids ...int) *JobUpdateOne {
	_u.mutation.RemoveVersionIDs(ids...)
	return _u
}

// RemoveVersions removes "versions" edges to JobVersion entities.
func (_u *JobUpdateOne) RemoveVersions(v ...*JobVersion) *JobUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveVersionIDs(ids...)
}

// Where appends a list predicates to the JobUpdate builder.
func (_u *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Job entity.
func (_u *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *JobUpdateOne) defaults() {
	if _, ok := _u.mutation.LastEditTime(); !ok {
		v := job.UpdateDefaultLastEditTime()
		_u.mutation.SetLastEditTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if _u.mutation.ProjectCleared() && len(_u.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Job.project"`)
	}
	return nil
}

func (_u *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(job.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.CronSchedule(); ok {
		_spec.SetField(job.FieldCronSchedule, field.TypeString, value)
	}
	if _u.mutation.CronScheduleCleared() {
		_spec.ClearField(job.FieldCronSchedule, field.TypeString)
	}
	if value, ok := _u.mutation.ScheduleEnabled(); ok {
		_spec.SetField(job.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(job.FieldAllowConcurrentRuns, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Arguments(); ok {
		_spec.SetField(job.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldArguments, value)
		})
	}
	if _u.mutation.ArgumentsCleared() {
		_spec.ClearField(job.FieldArguments, field.TypeJSON)
	}
	if value, ok := _u.mutation.RequiresFileUpload(); ok {
		_spec.SetField(job.FieldRequiresFileUpload, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AverageDurationMs(); ok {
		_spec.SetField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if value, ok := _u.mutation.AddedAverageDurationMs(); ok {
		_spec.AddField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if _u.mutation.AverageDurationMsCleared() {
		_spec.ClearField(job.FieldAverageDurationMs, field.TypeInt64)
	}
	if value, ok := _u.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := _u.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if _u.mutation.TimeoutSecondsCleared() {
		_spec.ClearField(job.FieldTimeoutSeconds, field.TypeInt)
	}
	if value, ok := _u.mutation.LastEditTime(); ok {
		_spec.SetField(job.FieldLastEditTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NotifyOnStartChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnStartChannelIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedNotifyOnStartChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnStartChannelIds, value)
		})
	}
	if _u.mutation.NotifyOnStartChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnStartChannelIds, field.TypeJSON)
	}
	if value, ok := _u.mutation.NotifyOnSuccessChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedNotifyOnSuccessChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnSuccessChannelIds, value)
		})
	}
	if _u.mutation.NotifyOnSuccessChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON)
	}
	if value, ok := _u.mutation.NotifyOnFailureChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedNotifyOnFailureChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnFailureChannelIds, value)
		})
	}
	if _u.mutation.NotifyOnFailureChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON)
	}
	if value, ok := _u.mutation.LastRunTime(); ok {
		_spec.SetField(job.FieldLastRunTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.NextCronRunTime(); ok {
		_spec.SetField(job.FieldNextCronRunTime, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Script(); ok {
		_spec.SetField(job.FieldScript, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastRunSuccess(); ok {
		_spec.SetField(job.FieldLastRunSuccess, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedByAPI(); ok {
		_spec.SetField(job.FieldCreatedByAPI, field.TypeBool, value)
	}
	if _u.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !_u.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _u.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !_u.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
