// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobhistory"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/project"
	"github.com/lbrictson/janus/ent/schema"
)

// JobUpdate is the builder for updating Job entities.
type JobUpdate struct {
	config
	hooks    []Hook
	mutation *JobMutation
}

// Where appends a list predicates to the JobUpdate builder.
func (ju *JobUpdate) Where(ps ...predicate.Job) *JobUpdate {
	ju.mutation.Where(ps...)
	return ju
}

// SetName sets the "name" field.
func (ju *JobUpdate) SetName(s string) *JobUpdate {
	ju.mutation.SetName(s)
	return ju
}

// SetNillableName sets the "name" field if the given value is not nil.
func (ju *JobUpdate) SetNillableName(s *string) *JobUpdate {
	if s != nil {
		ju.SetName(*s)
	}
	return ju
}

// SetDescription sets the "description" field.
func (ju *JobUpdate) SetDescription(s string) *JobUpdate {
	ju.mutation.SetDescription(s)
	return ju
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (ju *JobUpdate) SetNillableDescription(s *string) *JobUpdate {
	if s != nil {
		ju.SetDescription(*s)
	}
	return ju
}

// ClearDescription clears the value of the "description" field.
func (ju *JobUpdate) ClearDescription() *JobUpdate {
	ju.mutation.ClearDescription()
	return ju
}

// SetCronSchedule sets the "cron_schedule" field.
func (ju *JobUpdate) SetCronSchedule(s string) *JobUpdate {
	ju.mutation.SetCronSchedule(s)
	return ju
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCronSchedule(s *string) *JobUpdate {
	if s != nil {
		ju.SetCronSchedule(*s)
	}
	return ju
}

// ClearCronSchedule clears the value of the "cron_schedule" field.
func (ju *JobUpdate) ClearCronSchedule() *JobUpdate {
	ju.mutation.ClearCronSchedule()
	return ju
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (ju *JobUpdate) SetScheduleEnabled(b bool) *JobUpdate {
	ju.mutation.SetScheduleEnabled(b)
	return ju
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (ju *JobUpdate) SetNillableScheduleEnabled(b *bool) *JobUpdate {
	if b != nil {
		ju.SetScheduleEnabled(*b)
	}
	return ju
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (ju *JobUpdate) SetAllowConcurrentRuns(b bool) *JobUpdate {
	ju.mutation.SetAllowConcurrentRuns(b)
	return ju
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (ju *JobUpdate) SetNillableAllowConcurrentRuns(b *bool) *JobUpdate {
	if b != nil {
		ju.SetAllowConcurrentRuns(*b)
	}
	return ju
}

// SetArguments sets the "arguments" field.
func (ju *JobUpdate) SetArguments(sa []schema.JobArgument) *JobUpdate {
	ju.mutation.SetArguments(sa)
	return ju
}

// AppendArguments appends sa to the "arguments" field.
func (ju *JobUpdate) AppendArguments(sa []schema.JobArgument) *JobUpdate {
	ju.mutation.AppendArguments(sa)
	return ju
}

// ClearArguments clears the value of the "arguments" field.
func (ju *JobUpdate) ClearArguments() *JobUpdate {
	ju.mutation.ClearArguments()
	return ju
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (ju *JobUpdate) SetRequiresFileUpload(b bool) *JobUpdate {
	ju.mutation.SetRequiresFileUpload(b)
	return ju
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (ju *JobUpdate) SetNillableRequiresFileUpload(b *bool) *JobUpdate {
	if b != nil {
		ju.SetRequiresFileUpload(*b)
	}
	return ju
}

// SetAverageDurationMs sets the "average_duration_ms" field.
func (ju *JobUpdate) SetAverageDurationMs(i int64) *JobUpdate {
	ju.mutation.ResetAverageDurationMs()
	ju.mutation.SetAverageDurationMs(i)
	return ju
}

// SetNillableAverageDurationMs sets the "average_duration_ms" field if the given value is not nil.
func (ju *JobUpdate) SetNillableAverageDurationMs(i *int64) *JobUpdate {
	if i != nil {
		ju.SetAverageDurationMs(*i)
	}
	return ju
}

// AddAverageDurationMs adds i to the "average_duration_ms" field.
func (ju *JobUpdate) AddAverageDurationMs(i int64) *JobUpdate {
	ju.mutation.AddAverageDurationMs(i)
	return ju
}

// ClearAverageDurationMs clears the value of the "average_duration_ms" field.
func (ju *JobUpdate) ClearAverageDurationMs() *JobUpdate {
	ju.mutation.ClearAverageDurationMs()
	return ju
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (ju *JobUpdate) SetTimeoutSeconds(i int) *JobUpdate {
	ju.mutation.ResetTimeoutSeconds()
	ju.mutation.SetTimeoutSeconds(i)
	return ju
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (ju *JobUpdate) SetNillableTimeoutSeconds(i *int) *JobUpdate {
	if i != nil {
		ju.SetTimeoutSeconds(*i)
	}
	return ju
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (ju *JobUpdate) AddTimeoutSeconds(i int) *JobUpdate {
	ju.mutation.AddTimeoutSeconds(i)
	return ju
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (ju *JobUpdate) ClearTimeoutSeconds() *JobUpdate {
	ju.mutation.ClearTimeoutSeconds()
	return ju
}

// SetLastEditTime sets the "last_edit_time" field.
func (ju *JobUpdate) SetLastEditTime(t time.Time) *JobUpdate {
	ju.mutation.SetLastEditTime(t)
	return ju
}

// SetNotifyOnStartChannelIds sets the "notify_on_start_channel_ids" field.
func (ju *JobUpdate) SetNotifyOnStartChannelIds(i []int) *JobUpdate {
	ju.mutation.SetNotifyOnStartChannelIds(i)
	return ju
}

// AppendNotifyOnStartChannelIds appends i to the "notify_on_start_channel_ids" field.
func (ju *JobUpdate) AppendNotifyOnStartChannelIds(i []int) *JobUpdate {
	ju.mutation.AppendNotifyOnStartChannelIds(i)
	return ju
}

// ClearNotifyOnStartChannelIds clears the value of the "notify_on_start_channel_ids" field.
func (ju *JobUpdate) ClearNotifyOnStartChannelIds() *JobUpdate {
	ju.mutation.ClearNotifyOnStartChannelIds()
	return ju
}

// SetNotifyOnSuccessChannelIds sets the "notify_on_success_channel_ids" field.
func (ju *JobUpdate) SetNotifyOnSuccessChannelIds(i []int) *JobUpdate {
	ju.mutation.SetNotifyOnSuccessChannelIds(i)
	return ju
}

// AppendNotifyOnSuccessChannelIds appends i to the "notify_on_success_channel_ids" field.
func (ju *JobUpdate) AppendNotifyOnSuccessChannelIds(i []int) *JobUpdate {
	ju.mutation.AppendNotifyOnSuccessChannelIds(i)
	return ju
}

// ClearNotifyOnSuccessChannelIds clears the value of the "notify_on_success_channel_ids" field.
func (ju *JobUpdate) ClearNotifyOnSuccessChannelIds() *JobUpdate {
	ju.mutation.ClearNotifyOnSuccessChannelIds()
	return ju
}

// SetNotifyOnFailureChannelIds sets the "notify_on_failure_channel_ids" field.
func (ju *JobUpdate) SetNotifyOnFailureChannelIds(i []int) *JobUpdate {
	ju.mutation.SetNotifyOnFailureChannelIds(i)
	return ju
}

// AppendNotifyOnFailureChannelIds appends i to the "notify_on_failure_channel_ids" field.
func (ju *JobUpdate) AppendNotifyOnFailureChannelIds(i []int) *JobUpdate {
	ju.mutation.AppendNotifyOnFailureChannelIds(i)
	return ju
}

// ClearNotifyOnFailureChannelIds clears the value of the "notify_on_failure_channel_ids" field.
func (ju *JobUpdate) ClearNotifyOnFailureChannelIds() *JobUpdate {
	ju.mutation.ClearNotifyOnFailureChannelIds()
	return ju
}

// SetLastRunTime sets the "last_run_time" field.
func (ju *JobUpdate) SetLastRunTime(t time.Time) *JobUpdate {
	ju.mutation.SetLastRunTime(t)
	return ju
}

// SetNillableLastRunTime sets the "last_run_time" field if the given value is not nil.
func (ju *JobUpdate) SetNillableLastRunTime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetLastRunTime(*t)
	}
	return ju
}

// SetNextCronRunTime sets the "next_cron_run_time" field.
func (ju *JobUpdate) SetNextCronRunTime(t time.Time) *JobUpdate {
	ju.mutation.SetNextCronRunTime(t)
	return ju
}

// SetNillableNextCronRunTime sets the "next_cron_run_time" field if the given value is not nil.
func (ju *JobUpdate) SetNillableNextCronRunTime(t *time.Time) *JobUpdate {
	if t != nil {
		ju.SetNextCronRunTime(*t)
	}
	return ju
}

// SetScript sets the "script" field.
func (ju *JobUpdate) SetScript(s string) *JobUpdate {
	ju.mutation.SetScript(s)
	return ju
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (ju *JobUpdate) SetNillableScript(s *string) *JobUpdate {
	if s != nil {
		ju.SetScript(*s)
	}
	return ju
}

// SetLastRunSuccess sets the "last_run_success" field.
func (ju *JobUpdate) SetLastRunSuccess(b bool) *JobUpdate {
	ju.mutation.SetLastRunSuccess(b)
	return ju
}

// SetNillableLastRunSuccess sets the "last_run_success" field if the given value is not nil.
func (ju *JobUpdate) SetNillableLastRunSuccess(b *bool) *JobUpdate {
	if b != nil {
		ju.SetLastRunSuccess(*b)
	}
	return ju
}

// SetCreatedByAPI sets the "created_by_api" field.
func (ju *JobUpdate) SetCreatedByAPI(b bool) *JobUpdate {
	ju.mutation.SetCreatedByAPI(b)
	return ju
}

// SetNillableCreatedByAPI sets the "created_by_api" field if the given value is not nil.
func (ju *JobUpdate) SetNillableCreatedByAPI(b *bool) *JobUpdate {
	if b != nil {
		ju.SetCreatedByAPI(*b)
	}
	return ju
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (ju *JobUpdate) SetProjectID(id int) *JobUpdate {
	ju.mutation.SetProjectID(id)
	return ju
}

// SetProject sets the "project" edge to the Project entity.
func (ju *JobUpdate) SetProject(p *Project) *JobUpdate {
	return ju.SetProjectID(p.ID)
}

// AddHistoryIDs adds the "history" edge to the JobHistory entity by IDs.
func (ju *JobUpdate) AddHistoryIDs(ids ...int) *JobUpdate {
	ju.mutation.AddHistoryIDs(ids...)
	return ju
}

// AddHistory adds the "history" edges to the JobHistory entity.
func (ju *JobUpdate) AddHistory(j ...*JobHistory) *JobUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddHistoryIDs(ids...)
}

// AddVersionIDs adds the "versions" edge to the JobVersion entity by IDs.
func (ju *JobUpdate) AddVersionIDs(ids ...int) *JobUpdate {
	ju.mutation.AddVersionIDs(ids...)
	return ju
}

// AddVersions adds the "versions" edges to the JobVersion entity.
func (ju *JobUpdate) AddVersions(j ...*JobVersion) *JobUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.AddVersionIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (ju *JobUpdate) Mutation() *JobMutation {
	return ju.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (ju *JobUpdate) ClearProject() *JobUpdate {
	ju.mutation.ClearProject()
	return ju
}

// ClearHistory clears all "history" edges to the JobHistory entity.
func (ju *JobUpdate) ClearHistory() *JobUpdate {
	ju.mutation.ClearHistory()
	return ju
}

// RemoveHistoryIDs removes the "history" edge to JobHistory entities by IDs.
func (ju *JobUpdate) RemoveHistoryIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveHistoryIDs(ids...)
	return ju
}

// RemoveHistory removes "history" edges to JobHistory entities.
func (ju *JobUpdate) RemoveHistory(j ...*JobHistory) *JobUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveHistoryIDs(ids...)
}

// ClearVersions clears all "versions" edges to the JobVersion entity.
func (ju *JobUpdate) ClearVersions() *JobUpdate {
	ju.mutation.ClearVersions()
	return ju
}

// RemoveVersionIDs removes the "versions" edge to JobVersion entities by IDs.
func (ju *JobUpdate) RemoveVersionIDs(ids ...int) *JobUpdate {
	ju.mutation.RemoveVersionIDs(ids...)
	return ju
}

// RemoveVersions removes "versions" edges to JobVersion entities.
func (ju *JobUpdate) RemoveVersions(j ...*JobVersion) *JobUpdate {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return ju.RemoveVersionIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ju *JobUpdate) Save(ctx context.Context) (int, error) {
	ju.defaults()
	return withHooks(ctx, ju.sqlSave, ju.mutation, ju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ju *JobUpdate) SaveX(ctx context.Context) int {
	affected, err := ju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ju *JobUpdate) Exec(ctx context.Context) error {
	_, err := ju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ju *JobUpdate) ExecX(ctx context.Context) {
	if err := ju.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ju *JobUpdate) defaults() {
	if _, ok := ju.mutation.LastEditTime(); !ok {
		v := job.UpdateDefaultLastEditTime()
		ju.mutation.SetLastEditTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ju *JobUpdate) check() error {
	if v, ok := ju.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if ju.mutation.ProjectCleared() && len(ju.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Job.project"`)
	}
	return nil
}

func (ju *JobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := ju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	if ps := ju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ju.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := ju.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if ju.mutation.DescriptionCleared() {
		_spec.ClearField(job.FieldDescription, field.TypeString)
	}
	if value, ok := ju.mutation.CronSchedule(); ok {
		_spec.SetField(job.FieldCronSchedule, field.TypeString, value)
	}
	if ju.mutation.CronScheduleCleared() {
		_spec.ClearField(job.FieldCronSchedule, field.TypeString)
	}
	if value, ok := ju.mutation.ScheduleEnabled(); ok {
		_spec.SetField(job.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := ju.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(job.FieldAllowConcurrentRuns, field.TypeBool, value)
	}
	if value, ok := ju.mutation.Arguments(); ok {
		_spec.SetField(job.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldArguments, value)
		})
	}
	if ju.mutation.ArgumentsCleared() {
		_spec.ClearField(job.FieldArguments, field.TypeJSON)
	}
	if value, ok := ju.mutation.RequiresFileUpload(); ok {
		_spec.SetField(job.FieldRequiresFileUpload, field.TypeBool, value)
	}
	if value, ok := ju.mutation.AverageDurationMs(); ok {
		_spec.SetField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if value, ok := ju.mutation.AddedAverageDurationMs(); ok {
		_spec.AddField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if ju.mutation.AverageDurationMsCleared() {
		_spec.ClearField(job.FieldAverageDurationMs, field.TypeInt64)
	}
	if value, ok := ju.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := ju.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if ju.mutation.TimeoutSecondsCleared() {
		_spec.ClearField(job.FieldTimeoutSeconds, field.TypeInt)
	}
	if value, ok := ju.mutation.LastEditTime(); ok {
		_spec.SetField(job.FieldLastEditTime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.NotifyOnStartChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnStartChannelIds, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.AppendedNotifyOnStartChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnStartChannelIds, value)
		})
	}
	if ju.mutation.NotifyOnStartChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnStartChannelIds, field.TypeJSON)
	}
	if value, ok := ju.mutation.NotifyOnSuccessChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.AppendedNotifyOnSuccessChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnSuccessChannelIds, value)
		})
	}
	if ju.mutation.NotifyOnSuccessChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON)
	}
	if value, ok := ju.mutation.NotifyOnFailureChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON, value)
	}
	if value, ok := ju.mutation.AppendedNotifyOnFailureChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnFailureChannelIds, value)
		})
	}
	if ju.mutation.NotifyOnFailureChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON)
	}
	if value, ok := ju.mutation.LastRunTime(); ok {
		_spec.SetField(job.FieldLastRunTime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.NextCronRunTime(); ok {
		_spec.SetField(job.FieldNextCronRunTime, field.TypeTime, value)
	}
	if value, ok := ju.mutation.Script(); ok {
		_spec.SetField(job.FieldScript, field.TypeString, value)
	}
	if value, ok := ju.mutation.LastRunSuccess(); ok {
		_spec.SetField(job.FieldLastRunSuccess, field.TypeBool, value)
	}
	if value, ok := ju.mutation.CreatedByAPI(); ok {
		_spec.SetField(job.FieldCreatedByAPI, field.TypeBool, value)
	}
	if ju.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !ju.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if ju.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !ju.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ju.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ju.mutation.done = true
	return n, nil
}

// JobUpdateOne is the builder for updating a single Job entity.
type JobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobMutation
}

// SetName sets the "name" field.
func (juo *JobUpdateOne) SetName(s string) *JobUpdateOne {
	juo.mutation.SetName(s)
	return juo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableName(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetName(*s)
	}
	return juo
}

// SetDescription sets the "description" field.
func (juo *JobUpdateOne) SetDescription(s string) *JobUpdateOne {
	juo.mutation.SetDescription(s)
	return juo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableDescription(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetDescription(*s)
	}
	return juo
}

// ClearDescription clears the value of the "description" field.
func (juo *JobUpdateOne) ClearDescription() *JobUpdateOne {
	juo.mutation.ClearDescription()
	return juo
}

// SetCronSchedule sets the "cron_schedule" field.
func (juo *JobUpdateOne) SetCronSchedule(s string) *JobUpdateOne {
	juo.mutation.SetCronSchedule(s)
	return juo
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCronSchedule(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetCronSchedule(*s)
	}
	return juo
}

// ClearCronSchedule clears the value of the "cron_schedule" field.
func (juo *JobUpdateOne) ClearCronSchedule() *JobUpdateOne {
	juo.mutation.ClearCronSchedule()
	return juo
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (juo *JobUpdateOne) SetScheduleEnabled(b bool) *JobUpdateOne {
	juo.mutation.SetScheduleEnabled(b)
	return juo
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableScheduleEnabled(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetScheduleEnabled(*b)
	}
	return juo
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (juo *JobUpdateOne) SetAllowConcurrentRuns(b bool) *JobUpdateOne {
	juo.mutation.SetAllowConcurrentRuns(b)
	return juo
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableAllowConcurrentRuns(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetAllowConcurrentRuns(*b)
	}
	return juo
}

// SetArguments sets the "arguments" field.
func (juo *JobUpdateOne) SetArguments(sa []schema.JobArgument) *JobUpdateOne {
	juo.mutation.SetArguments(sa)
	return juo
}

// AppendArguments appends sa to the "arguments" field.
func (juo *JobUpdateOne) AppendArguments(sa []schema.JobArgument) *JobUpdateOne {
	juo.mutation.AppendArguments(sa)
	return juo
}

// ClearArguments clears the value of the "arguments" field.
func (juo *JobUpdateOne) ClearArguments() *JobUpdateOne {
	juo.mutation.ClearArguments()
	return juo
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (juo *JobUpdateOne) SetRequiresFileUpload(b bool) *JobUpdateOne {
	juo.mutation.SetRequiresFileUpload(b)
	return juo
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableRequiresFileUpload(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetRequiresFileUpload(*b)
	}
	return juo
}

// SetAverageDurationMs sets the "average_duration_ms" field.
func (juo *JobUpdateOne) SetAverageDurationMs(i int64) *JobUpdateOne {
	juo.mutation.ResetAverageDurationMs()
	juo.mutation.SetAverageDurationMs(i)
	return juo
}

// SetNillableAverageDurationMs sets the "average_duration_ms" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableAverageDurationMs(i *int64) *JobUpdateOne {
	if i != nil {
		juo.SetAverageDurationMs(*i)
	}
	return juo
}

// AddAverageDurationMs adds i to the "average_duration_ms" field.
func (juo *JobUpdateOne) AddAverageDurationMs(i int64) *JobUpdateOne {
	juo.mutation.AddAverageDurationMs(i)
	return juo
}

// ClearAverageDurationMs clears the value of the "average_duration_ms" field.
func (juo *JobUpdateOne) ClearAverageDurationMs() *JobUpdateOne {
	juo.mutation.ClearAverageDurationMs()
	return juo
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (juo *JobUpdateOne) SetTimeoutSeconds(i int) *JobUpdateOne {
	juo.mutation.ResetTimeoutSeconds()
	juo.mutation.SetTimeoutSeconds(i)
	return juo
}

// SetNillableTimeoutSeconds sets the "timeout_seconds" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableTimeoutSeconds(i *int) *JobUpdateOne {
	if i != nil {
		juo.SetTimeoutSeconds(*i)
	}
	return juo
}

// AddTimeoutSeconds adds i to the "timeout_seconds" field.
func (juo *JobUpdateOne) AddTimeoutSeconds(i int) *JobUpdateOne {
	juo.mutation.AddTimeoutSeconds(i)
	return juo
}

// ClearTimeoutSeconds clears the value of the "timeout_seconds" field.
func (juo *JobUpdateOne) ClearTimeoutSeconds() *JobUpdateOne {
	juo.mutation.ClearTimeoutSeconds()
	return juo
}

// SetLastEditTime sets the "last_edit_time" field.
func (juo *JobUpdateOne) SetLastEditTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetLastEditTime(t)
	return juo
}

// SetNotifyOnStartChannelIds sets the "notify_on_start_channel_ids" field.
func (juo *JobUpdateOne) SetNotifyOnStartChannelIds(i []int) *JobUpdateOne {
	juo.mutation.SetNotifyOnStartChannelIds(i)
	return juo
}

// AppendNotifyOnStartChannelIds appends i to the "notify_on_start_channel_ids" field.
func (juo *JobUpdateOne) AppendNotifyOnStartChannelIds(i []int) *JobUpdateOne {
	juo.mutation.AppendNotifyOnStartChannelIds(i)
	return juo
}

// ClearNotifyOnStartChannelIds clears the value of the "notify_on_start_channel_ids" field.
func (juo *JobUpdateOne) ClearNotifyOnStartChannelIds() *JobUpdateOne {
	juo.mutation.ClearNotifyOnStartChannelIds()
	return juo
}

// SetNotifyOnSuccessChannelIds sets the "notify_on_success_channel_ids" field.
func (juo *JobUpdateOne) SetNotifyOnSuccessChannelIds(i []int) *JobUpdateOne {
	juo.mutation.SetNotifyOnSuccessChannelIds(i)
	return juo
}

// AppendNotifyOnSuccessChannelIds appends i to the "notify_on_success_channel_ids" field.
func (juo *JobUpdateOne) AppendNotifyOnSuccessChannelIds(i []int) *JobUpdateOne {
	juo.mutation.AppendNotifyOnSuccessChannelIds(i)
	return juo
}

// ClearNotifyOnSuccessChannelIds clears the value of the "notify_on_success_channel_ids" field.
func (juo *JobUpdateOne) ClearNotifyOnSuccessChannelIds() *JobUpdateOne {
	juo.mutation.ClearNotifyOnSuccessChannelIds()
	return juo
}

// SetNotifyOnFailureChannelIds sets the "notify_on_failure_channel_ids" field.
func (juo *JobUpdateOne) SetNotifyOnFailureChannelIds(i []int) *JobUpdateOne {
	juo.mutation.SetNotifyOnFailureChannelIds(i)
	return juo
}

// AppendNotifyOnFailureChannelIds appends i to the "notify_on_failure_channel_ids" field.
func (juo *JobUpdateOne) AppendNotifyOnFailureChannelIds(i []int) *JobUpdateOne {
	juo.mutation.AppendNotifyOnFailureChannelIds(i)
	return juo
}

// ClearNotifyOnFailureChannelIds clears the value of the "notify_on_failure_channel_ids" field.
func (juo *JobUpdateOne) ClearNotifyOnFailureChannelIds() *JobUpdateOne {
	juo.mutation.ClearNotifyOnFailureChannelIds()
	return juo
}

// SetLastRunTime sets the "last_run_time" field.
func (juo *JobUpdateOne) SetLastRunTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetLastRunTime(t)
	return juo
}

// SetNillableLastRunTime sets the "last_run_time" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableLastRunTime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetLastRunTime(*t)
	}
	return juo
}

// SetNextCronRunTime sets the "next_cron_run_time" field.
func (juo *JobUpdateOne) SetNextCronRunTime(t time.Time) *JobUpdateOne {
	juo.mutation.SetNextCronRunTime(t)
	return juo
}

// SetNillableNextCronRunTime sets the "next_cron_run_time" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableNextCronRunTime(t *time.Time) *JobUpdateOne {
	if t != nil {
		juo.SetNextCronRunTime(*t)
	}
	return juo
}

// SetScript sets the "script" field.
func (juo *JobUpdateOne) SetScript(s string) *JobUpdateOne {
	juo.mutation.SetScript(s)
	return juo
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableScript(s *string) *JobUpdateOne {
	if s != nil {
		juo.SetScript(*s)
	}
	return juo
}

// SetLastRunSuccess sets the "last_run_success" field.
func (juo *JobUpdateOne) SetLastRunSuccess(b bool) *JobUpdateOne {
	juo.mutation.SetLastRunSuccess(b)
	return juo
}

// SetNillableLastRunSuccess sets the "last_run_success" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableLastRunSuccess(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetLastRunSuccess(*b)
	}
	return juo
}

// SetCreatedByAPI sets the "created_by_api" field.
func (juo *JobUpdateOne) SetCreatedByAPI(b bool) *JobUpdateOne {
	juo.mutation.SetCreatedByAPI(b)
	return juo
}

// SetNillableCreatedByAPI sets the "created_by_api" field if the given value is not nil.
func (juo *JobUpdateOne) SetNillableCreatedByAPI(b *bool) *JobUpdateOne {
	if b != nil {
		juo.SetCreatedByAPI(*b)
	}
	return juo
}

// SetProjectID sets the "project" edge to the Project entity by ID.
func (juo *JobUpdateOne) SetProjectID(id int) *JobUpdateOne {
	juo.mutation.SetProjectID(id)
	return juo
}

// SetProject sets the "project" edge to the Project entity.
func (juo *JobUpdateOne) SetProject(p *Project) *JobUpdateOne {
	return juo.SetProjectID(p.ID)
}

// AddHistoryIDs adds the "history" edge to the JobHistory entity by IDs.
func (juo *JobUpdateOne) AddHistoryIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddHistoryIDs(ids...)
	return juo
}

// AddHistory adds the "history" edges to the JobHistory entity.
func (juo *JobUpdateOne) AddHistory(j ...*JobHistory) *JobUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddHistoryIDs(ids...)
}

// AddVersionIDs adds the "versions" edge to the JobVersion entity by IDs.
func (juo *JobUpdateOne) AddVersionIDs(ids ...int) *JobUpdateOne {
	juo.mutation.AddVersionIDs(ids...)
	return juo
}

// AddVersions adds the "versions" edges to the JobVersion entity.
func (juo *JobUpdateOne) AddVersions(j ...*JobVersion) *JobUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.AddVersionIDs(ids...)
}

// Mutation returns the JobMutation object of the builder.
func (juo *JobUpdateOne) Mutation() *JobMutation {
	return juo.mutation
}

// ClearProject clears the "project" edge to the Project entity.
func (juo *JobUpdateOne) ClearProject() *JobUpdateOne {
	juo.mutation.ClearProject()
	return juo
}

// ClearHistory clears all "history" edges to the JobHistory entity.
func (juo *JobUpdateOne) ClearHistory() *JobUpdateOne {
	juo.mutation.ClearHistory()
	return juo
}

// RemoveHistoryIDs removes the "history" edge to JobHistory entities by IDs.
func (juo *JobUpdateOne) RemoveHistoryIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveHistoryIDs(ids...)
	return juo
}

// RemoveHistory removes "history" edges to JobHistory entities.
func (juo *JobUpdateOne) RemoveHistory(j ...*JobHistory) *JobUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveHistoryIDs(ids...)
}

// ClearVersions clears all "versions" edges to the JobVersion entity.
func (juo *JobUpdateOne) ClearVersions() *JobUpdateOne {
	juo.mutation.ClearVersions()
	return juo
}

// RemoveVersionIDs removes the "versions" edge to JobVersion entities by IDs.
func (juo *JobUpdateOne) RemoveVersionIDs(ids ...int) *JobUpdateOne {
	juo.mutation.RemoveVersionIDs(ids...)
	return juo
}

// RemoveVersions removes "versions" edges to JobVersion entities.
func (juo *JobUpdateOne) RemoveVersions(j ...*JobVersion) *JobUpdateOne {
	ids := make([]int, len(j))
	for i := range j {
		ids[i] = j[i].ID
	}
	return juo.RemoveVersionIDs(ids...)
}

// Where appends a list predicates to the JobUpdate builder.
func (juo *JobUpdateOne) Where(ps ...predicate.Job) *JobUpdateOne {
	juo.mutation.Where(ps...)
	return juo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (juo *JobUpdateOne) Select(field string, fields ...string) *JobUpdateOne {
	juo.fields = append([]string{field}, fields...)
	return juo
}

// Save executes the query and returns the updated Job entity.
func (juo *JobUpdateOne) Save(ctx context.Context) (*Job, error) {
	juo.defaults()
	return withHooks(ctx, juo.sqlSave, juo.mutation, juo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (juo *JobUpdateOne) SaveX(ctx context.Context) *Job {
	node, err := juo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (juo *JobUpdateOne) Exec(ctx context.Context) error {
	_, err := juo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (juo *JobUpdateOne) ExecX(ctx context.Context) {
	if err := juo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (juo *JobUpdateOne) defaults() {
	if _, ok := juo.mutation.LastEditTime(); !ok {
		v := job.UpdateDefaultLastEditTime()
		juo.mutation.SetLastEditTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (juo *JobUpdateOne) check() error {
	if v, ok := juo.mutation.Name(); ok {
		if err := job.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Job.name": %w`, err)}
		}
	}
	if juo.mutation.ProjectCleared() && len(juo.mutation.ProjectIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Job.project"`)
	}
	return nil
}

func (juo *JobUpdateOne) sqlSave(ctx context.Context) (_node *Job, err error) {
	if err := juo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(job.Table, job.Columns, sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt))
	id, ok := juo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Job.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := juo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, job.FieldID)
		for _, f := range fields {
			if !job.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != job.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := juo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := juo.mutation.Name(); ok {
		_spec.SetField(job.FieldName, field.TypeString, value)
	}
	if value, ok := juo.mutation.Description(); ok {
		_spec.SetField(job.FieldDescription, field.TypeString, value)
	}
	if juo.mutation.DescriptionCleared() {
		_spec.ClearField(job.FieldDescription, field.TypeString)
	}
	if value, ok := juo.mutation.CronSchedule(); ok {
		_spec.SetField(job.FieldCronSchedule, field.TypeString, value)
	}
	if juo.mutation.CronScheduleCleared() {
		_spec.ClearField(job.FieldCronSchedule, field.TypeString)
	}
	if value, ok := juo.mutation.ScheduleEnabled(); ok {
		_spec.SetField(job.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := juo.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(job.FieldAllowConcurrentRuns, field.TypeBool, value)
	}
	if value, ok := juo.mutation.Arguments(); ok {
		_spec.SetField(job.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldArguments, value)
		})
	}
	if juo.mutation.ArgumentsCleared() {
		_spec.ClearField(job.FieldArguments, field.TypeJSON)
	}
	if value, ok := juo.mutation.RequiresFileUpload(); ok {
		_spec.SetField(job.FieldRequiresFileUpload, field.TypeBool, value)
	}
	if value, ok := juo.mutation.AverageDurationMs(); ok {
		_spec.SetField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if value, ok := juo.mutation.AddedAverageDurationMs(); ok {
		_spec.AddField(job.FieldAverageDurationMs, field.TypeInt64, value)
	}
	if juo.mutation.AverageDurationMsCleared() {
		_spec.ClearField(job.FieldAverageDurationMs, field.TypeInt64)
	}
	if value, ok := juo.mutation.TimeoutSeconds(); ok {
		_spec.SetField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if value, ok := juo.mutation.AddedTimeoutSeconds(); ok {
		_spec.AddField(job.FieldTimeoutSeconds, field.TypeInt, value)
	}
	if juo.mutation.TimeoutSecondsCleared() {
		_spec.ClearField(job.FieldTimeoutSeconds, field.TypeInt)
	}
	if value, ok := juo.mutation.LastEditTime(); ok {
		_spec.SetField(job.FieldLastEditTime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.NotifyOnStartChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnStartChannelIds, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.AppendedNotifyOnStartChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnStartChannelIds, value)
		})
	}
	if juo.mutation.NotifyOnStartChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnStartChannelIds, field.TypeJSON)
	}
	if value, ok := juo.mutation.NotifyOnSuccessChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.AppendedNotifyOnSuccessChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnSuccessChannelIds, value)
		})
	}
	if juo.mutation.NotifyOnSuccessChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnSuccessChannelIds, field.TypeJSON)
	}
	if value, ok := juo.mutation.NotifyOnFailureChannelIds(); ok {
		_spec.SetField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON, value)
	}
	if value, ok := juo.mutation.AppendedNotifyOnFailureChannelIds(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, job.FieldNotifyOnFailureChannelIds, value)
		})
	}
	if juo.mutation.NotifyOnFailureChannelIdsCleared() {
		_spec.ClearField(job.FieldNotifyOnFailureChannelIds, field.TypeJSON)
	}
	if value, ok := juo.mutation.LastRunTime(); ok {
		_spec.SetField(job.FieldLastRunTime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.NextCronRunTime(); ok {
		_spec.SetField(job.FieldNextCronRunTime, field.TypeTime, value)
	}
	if value, ok := juo.mutation.Script(); ok {
		_spec.SetField(job.FieldScript, field.TypeString, value)
	}
	if value, ok := juo.mutation.LastRunSuccess(); ok {
		_spec.SetField(job.FieldLastRunSuccess, field.TypeBool, value)
	}
	if value, ok := juo.mutation.CreatedByAPI(); ok {
		_spec.SetField(job.FieldCreatedByAPI, field.TypeBool, value)
	}
	if juo.mutation.ProjectCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.ProjectIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   job.ProjectTable,
			Columns: []string{job.ProjectColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(project.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedHistoryIDs(); len(nodes) > 0 && !juo.mutation.HistoryCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.HistoryIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.HistoryTable,
			Columns: []string{job.HistoryColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobhistory.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if juo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.RemovedVersionsIDs(); len(nodes) > 0 && !juo.mutation.VersionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := juo.mutation.VersionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   job.VersionsTable,
			Columns: []string{job.VersionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Job{config: juo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, juo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{job.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	juo.mutation.done = true
	return _node, nil
}
