// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
	"github.com/lbrictson/janus/ent/job"
	"github.com/lbrictson/janus/ent/jobversion"
	"github.com/lbrictson/janus/ent/predicate"
	"github.com/lbrictson/janus/ent/schema"
)

// JobVersionUpdate is the builder for updating JobVersion entities.
type JobVersionUpdate struct {
	config
	hooks    []Hook
	mutation *JobVersionMutation
}

// Where appends a list predicates to the JobVersionUpdate builder.
func (_u *JobVersionUpdate) Where(ps ...predicate.JobVersion) *JobVersionUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *JobVersionUpdate) SetCreatedAt(v time.Time) *JobVersionUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableCreatedAt(v *time.Time) *JobVersionUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *JobVersionUpdate) SetName(v string) *JobVersionUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableName(v *string) *JobVersionUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobVersionUpdate) SetDescription(v string) *JobVersionUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableDescription(v *string) *JobVersionUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetScript sets the "script" field.
func (_u *JobVersionUpdate) SetScript(v string) *JobVersionUpdate {
	_u.mutation.SetScript(v)
	return _u
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableScript(v *string) *JobVersionUpdate {
	if v != nil {
		_u.SetScript(*v)
	}
	return _u
}

// SetCronSchedule sets the "cron_schedule" field.
func (_u *JobVersionUpdate) SetCronSchedule(v string) *JobVersionUpdate {
	_u.mutation.SetCronSchedule(v)
	return _u
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableCronSchedule(v *string) *JobVersionUpdate {
	if v != nil {
		_u.SetCronSchedule(*v)
	}
	return _u
}

// ClearCronSchedule clears the value of the "cron_schedule" field.
func (_u *JobVersionUpdate) ClearCronSchedule() *JobVersionUpdate {
	_u.mutation.ClearCronSchedule()
	return _u
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (_u *JobVersionUpdate) SetScheduleEnabled(v bool) *JobVersionUpdate {
	_u.mutation.SetScheduleEnabled(v)
	return _u
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableScheduleEnabled(v *bool) *JobVersionUpdate {
	if v != nil {
		_u.SetScheduleEnabled(*v)
	}
	return _u
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (_u *JobVersionUpdate) SetAllowConcurrentRuns(v bool) *JobVersionUpdate {
	_u.mutation.SetAllowConcurrentRuns(v)
	return _u
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableAllowConcurrentRuns(v *bool) *JobVersionUpdate {
	if v != nil {
		_u.SetAllowConcurrentRuns(*v)
	}
	return _u
}

// SetArguments sets the "arguments" field.
func (_u *JobVersionUpdate) SetArguments(v []schema.JobArgument) *JobVersionUpdate {
	_u.mutation.SetArguments(v)
	return _u
}

// AppendArguments appends value to the "arguments" field.
func (_u *JobVersionUpdate) AppendArguments(v []schema.JobArgument) *JobVersionUpdate {
	_u.mutation.AppendArguments(v)
	return _u
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (_u *JobVersionUpdate) SetRequiresFileUpload(v bool) *JobVersionUpdate {
	_u.mutation.SetRequiresFileUpload(v)
	return _u
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableRequiresFileUpload(v *bool) *JobVersionUpdate {
	if v != nil {
		_u.SetRequiresFileUpload(*v)
	}
	return _u
}

// SetChangedByEmail sets the "changed_by_email" field.
func (_u *JobVersionUpdate) SetChangedByEmail(v string) *JobVersionUpdate {
	_u.mutation.SetChangedByEmail(v)
	return _u
}

// SetNillableChangedByEmail sets the "changed_by_email" field if the given value is not nil.
func (_u *JobVersionUpdate) SetNillableChangedByEmail(v *string) *JobVersionUpdate {
	if v != nil {
		_u.SetChangedByEmail(*v)
	}
	return _u
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_u *JobVersionUpdate) SetJobID(id int) *JobVersionUpdate {
	_u.mutation.SetJobID(id)
	return _u
}

// SetJob sets the "job" edge to the Job entity.
func (_u *JobVersionUpdate) SetJob(v *Job) *JobVersionUpdate {
	return _u.SetJobID(v.ID)
}

// Mutation returns the JobVersionMutation object of the builder.
func (_u *JobVersionUpdate) Mutation() *JobVersionMutation {
	return _u.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (_u *JobVersionUpdate) ClearJob() *JobVersionUpdate {
	_u.mutation.ClearJob()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *JobVersionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobVersionUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *JobVersionUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobVersionUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobVersionUpdate) check() error {
	if _u.mutation.JobCleared() && len(_u.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobVersion.job"`)
	}
	return nil
}

func (_u *JobVersionUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobversion.Table, jobversion.Columns, sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(jobversion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(jobversion.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(jobversion.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Script(); ok {
		_spec.SetField(jobversion.FieldScript, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronSchedule(); ok {
		_spec.SetField(jobversion.FieldCronSchedule, field.TypeString, value)
	}
	if _u.mutation.CronScheduleCleared() {
		_spec.ClearField(jobversion.FieldCronSchedule, field.TypeString)
	}
	if value, ok := _u.mutation.ScheduleEnabled(); ok {
		_spec.SetField(jobversion.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(jobversion.FieldAllowConcurrentRuns, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Arguments(); ok {
		_spec.SetField(jobversion.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobversion.FieldArguments, value)
		})
	}
	if value, ok := _u.mutation.RequiresFileUpload(); ok {
		_spec.SetField(jobversion.FieldRequiresFileUpload, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ChangedByEmail(); ok {
		_spec.SetField(jobversion.FieldChangedByEmail, field.TypeString, value)
	}
	if _u.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobversion.JobTable,
			Columns: []string{jobversion.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobversion.JobTable,
			Columns: []string{jobversion.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// JobVersionUpdateOne is the builder for updating a single JobVersion entity.
type JobVersionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *JobVersionMutation
}

// SetCreatedAt sets the "created_at" field.
func (_u *JobVersionUpdateOne) SetCreatedAt(v time.Time) *JobVersionUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableCreatedAt(v *time.Time) *JobVersionUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetName sets the "name" field.
func (_u *JobVersionUpdateOne) SetName(v string) *JobVersionUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableName(v *string) *JobVersionUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *JobVersionUpdateOne) SetDescription(v string) *JobVersionUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableDescription(v *string) *JobVersionUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetScript sets the "script" field.
func (_u *JobVersionUpdateOne) SetScript(v string) *JobVersionUpdateOne {
	_u.mutation.SetScript(v)
	return _u
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableScript(v *string) *JobVersionUpdateOne {
	if v != nil {
		_u.SetScript(*v)
	}
	return _u
}

// SetCronSchedule sets the "cron_schedule" field.
func (_u *JobVersionUpdateOne) SetCronSchedule(v string) *JobVersionUpdateOne {
	_u.mutation.SetCronSchedule(v)
	return _u
}

// SetNillableCronSchedule sets the "cron_schedule" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableCronSchedule(v *string) *JobVersionUpdateOne {
	if v != nil {
		_u.SetCronSchedule(*v)
	}
	return _u
}

// ClearCronSchedule clears the value of the "cron_schedule" field.
func (_u *JobVersionUpdateOne) ClearCronSchedule() *JobVersionUpdateOne {
	_u.mutation.ClearCronSchedule()
	return _u
}

// SetScheduleEnabled sets the "schedule_enabled" field.
func (_u *JobVersionUpdateOne) SetScheduleEnabled(v bool) *JobVersionUpdateOne {
	_u.mutation.SetScheduleEnabled(v)
	return _u
}

// SetNillableScheduleEnabled sets the "schedule_enabled" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableScheduleEnabled(v *bool) *JobVersionUpdateOne {
	if v != nil {
		_u.SetScheduleEnabled(*v)
	}
	return _u
}

// SetAllowConcurrentRuns sets the "allow_concurrent_runs" field.
func (_u *JobVersionUpdateOne) SetAllowConcurrentRuns(v bool) *JobVersionUpdateOne {
	_u.mutation.SetAllowConcurrentRuns(v)
	return _u
}

// SetNillableAllowConcurrentRuns sets the "allow_concurrent_runs" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableAllowConcurrentRuns(v *bool) *JobVersionUpdateOne {
	if v != nil {
		_u.SetAllowConcurrentRuns(*v)
	}
	return _u
}

// SetArguments sets the "arguments" field.
func (_u *JobVersionUpdateOne) SetArguments(v []schema.JobArgument) *JobVersionUpdateOne {
	_u.mutation.SetArguments(v)
	return _u
}

// AppendArguments appends value to the "arguments" field.
func (_u *JobVersionUpdateOne) AppendArguments(v []schema.JobArgument) *JobVersionUpdateOne {
	_u.mutation.AppendArguments(v)
	return _u
}

// SetRequiresFileUpload sets the "requires_file_upload" field.
func (_u *JobVersionUpdateOne) SetRequiresFileUpload(v bool) *JobVersionUpdateOne {
	_u.mutation.SetRequiresFileUpload(v)
	return _u
}

// SetNillableRequiresFileUpload sets the "requires_file_upload" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableRequiresFileUpload(v *bool) *JobVersionUpdateOne {
	if v != nil {
		_u.SetRequiresFileUpload(*v)
	}
	return _u
}

// SetChangedByEmail sets the "changed_by_email" field.
func (_u *JobVersionUpdateOne) SetChangedByEmail(v string) *JobVersionUpdateOne {
	_u.mutation.SetChangedByEmail(v)
	return _u
}

// SetNillableChangedByEmail sets the "changed_by_email" field if the given value is not nil.
func (_u *JobVersionUpdateOne) SetNillableChangedByEmail(v *string) *JobVersionUpdateOne {
	if v != nil {
		_u.SetChangedByEmail(*v)
	}
	return _u
}

// SetJobID sets the "job" edge to the Job entity by ID.
func (_u *JobVersionUpdateOne) SetJobID(id int) *JobVersionUpdateOne {
	_u.mutation.SetJobID(id)
	return _u
}

// SetJob sets the "job" edge to the Job entity.
func (_u *JobVersionUpdateOne) SetJob(v *Job) *JobVersionUpdateOne {
	return _u.SetJobID(v.ID)
}

// Mutation returns the JobVersionMutation object of the builder.
func (_u *JobVersionUpdateOne) Mutation() *JobVersionMutation {
	return _u.mutation
}

// ClearJob clears the "job" edge to the Job entity.
func (_u *JobVersionUpdateOne) ClearJob() *JobVersionUpdateOne {
	_u.mutation.ClearJob()
	return _u
}

// Where appends a list predicates to the JobVersionUpdate builder.
func (_u *JobVersionUpdateOne) Where(ps ...predicate.JobVersion) *JobVersionUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *JobVersionUpdateOne) Select(field string, fields ...string) *JobVersionUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated JobVersion entity.
func (_u *JobVersionUpdateOne) Save(ctx context.Context) (*JobVersion, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *JobVersionUpdateOne) SaveX(ctx context.Context) *JobVersion {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *JobVersionUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *JobVersionUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *JobVersionUpdateOne) check() error {
	if _u.mutation.JobCleared() && len(_u.mutation.JobIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "JobVersion.job"`)
	}
	return nil
}

func (_u *JobVersionUpdateOne) sqlSave(ctx context.Context) (_node *JobVersion, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(jobversion.Table, jobversion.Columns, sqlgraph.NewFieldSpec(jobversion.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "JobVersion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, jobversion.FieldID)
		for _, f := range fields {
			if !jobversion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != jobversion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(jobversion.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(jobversion.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(jobversion.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.Script(); ok {
		_spec.SetField(jobversion.FieldScript, field.TypeString, value)
	}
	if value, ok := _u.mutation.CronSchedule(); ok {
		_spec.SetField(jobversion.FieldCronSchedule, field.TypeString, value)
	}
	if _u.mutation.CronScheduleCleared() {
		_spec.ClearField(jobversion.FieldCronSchedule, field.TypeString)
	}
	if value, ok := _u.mutation.ScheduleEnabled(); ok {
		_spec.SetField(jobversion.FieldScheduleEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.AllowConcurrentRuns(); ok {
		_spec.SetField(jobversion.FieldAllowConcurrentRuns, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Arguments(); ok {
		_spec.SetField(jobversion.FieldArguments, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.AppendedArguments(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, jobversion.FieldArguments, value)
		})
	}
	if value, ok := _u.mutation.RequiresFileUpload(); ok {
		_spec.SetField(jobversion.FieldRequiresFileUpload, field.TypeBool, value)
	}
	if value, ok := _u.mutation.ChangedByEmail(); ok {
		_spec.SetField(jobversion.FieldChangedByEmail, field.TypeString, value)
	}
	if _u.mutation.JobCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobversion.JobTable,
			Columns: []string{jobversion.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.JobIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   jobversion.JobTable,
			Columns: []string{jobversion.JobColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(job.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &JobVersion{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{jobversion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
