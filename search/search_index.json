{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Janus","text":"<p>Janus is a simple script execution program contained in a single binary. It is designed as a portal to allow non-technical users to run scripts authored by more technical users.  Both adhoc and scheduled job execution is supported.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Simple: single binary that can be run on any system with no dependencies.</li> <li>Job Notifications: receive notifications when jobs start, run and complete.  Supported channels<ul> <li>Email</li> <li>Slack</li> <li>Discord</li> <li>Webhook</li> <li>SMS (via Twilio)</li> <li>PagerDuty</li> <li>AWS SNS</li> <li>AWS EventBridge</li> </ul> </li> <li>Job Scheduling: schedule jobs to run at specific times or intervals using cron syntax.</li> <li>Job Parameters: pass parameters to jobs at runtime.</li> <li>Job Output: view job output in the UI.</li> <li>Job History: view job history in the UI.</li> <li>Job versioning: version jobs to allow for changes over time.</li> <li>Permissions: group jobs into projects and set project permissions on a per user basis</li> <li>REST API: interact with Janus via a REST API</li> <li>Webhooks: trigger jobs via webhooks</li> <li>Secrets: store secrets in Janus and reference them in jobs</li> <li>Storage: supports both sqlite and postgres databases</li> </ul>"},{"location":"faq/","title":"Frequently Asked Questions","text":""},{"location":"faq/#does-janus-support-a-high-availability-configuration","title":"Does Janus support a high availability configuration?","text":"<p>Not currently, if you attempt to run more than one Janus server scheduled jobs will run on all servers. Tailing logs of  running jobs will have unexpected results as well.</p>"},{"location":"faq/#what-databases-does-janus-support","title":"What databases does Janus support?","text":"<p>Janus currently supports SQLite and PostgreSQL.  SQLite is the default and is recommended for small installations.  PostgreSQL is recommended for larger installations or where protecting a flat file database is not trivial.</p>"},{"location":"faq/#can-i-run-janus-in-a-container","title":"Can I run Janus in a container?","text":"<p>Yes, Janus can be run in a container.  The container is available on Docker Hub as <code>lbrictson/janus</code>.  The container is configured to use SQLite by default, but can be configured to use PostgreSQL as well.</p> <p>The Janus container comes in both a regular version and a <code>slim</code> version.  The slim version only contains bash and the Janus program itself. The regular version contains many helper tools that admins might find useful.</p> <p>If you want to build your own Janus container that is customized with your own tools you should start from the <code>slim</code> version.</p>"},{"location":"faq/#what-tools-come-preconfigured-in-the-docker-container","title":"What tools come preconfigured in the docker container?","text":"<p>The regular version of the Janus container comes with the following tools preinstalled: - Bash - Curl - Wget - Git - Ansible - Python3 - AWSCLI - pip - pipx - ssh - sshpass - pipenv</p> <p>The slim version only contains bash.</p>"},{"location":"faq/#can-i-run-janus-on-windows-or-osx","title":"Can I run Janus on Windows or OSX?","text":"<p>You can compile Janus to run on those OS's, however it is only tested on Linux.</p>"},{"location":"faq/#what-license-is-janus-released-under","title":"What license is Janus released under?","text":"<p>Janus is released under the MIT license.  You can find the full text of the license in the repository.</p>"},{"location":"faq/#do-you-have-a-helm-chart-for-janus","title":"Do you have a helm chart for Janus?","text":"<p>Not yet, soon though.</p>"},{"location":"configuration/admin-config/","title":"Admin Config","text":""},{"location":"configuration/admin-config/#general-notes-on-admin-config","title":"General Notes on Admin Config","text":"<p>Modifying the admin configuration is a real time operation that directly effects the operation of your Janus server. Be careful when changing settings, especially the security ones.</p>"},{"location":"configuration/admin-config/#security","title":"Security","text":"<p>Janus supports both a built-in authentication mechanism based on email and password as well as single sign on via OAuth2.  The built-in authentication mechanism is enabled by default.</p> <p>It is highly recommended that you leave the built-in authentication enabled until you have thoroughly tested your SSO config, disabling the built-in authentication could lock you out of the system if your SSO config is not correct.  To help with this Janus supports running both configs at the same time.</p> <p>Admin configs are managed at: <code>http://&lt;janus-host&gt;/admin</code> and requires the global admin permission.</p> Config Item Explanation Disable Password Login Removes the ability to authenticate on the login page with email/password Enable SSO Adds the SSO login option to the login screen SSO Provider Your SSO provider, either entra (azuread), google or generic OIDC SSO Client ID Client ID from your identity provider SSO Client Secret Client secrets from your identity provider Entra Tenant ID Only needed for entra, your azure tenant ID Discovery URL Only neede for generic OIDC, discovery URL"},{"location":"configuration/admin-config/#smtp","title":"SMTP","text":"<p>Janus notification channels share a common configuration for SMTP.  This configuration is used to send email notifications on job status updates.</p> Config Item Explanation SMTP Server The SMTP server to use for sending email SMTP Port The port on the SMTP server to use SMTP User The username to use for SMTP authentication SMTP Pass The password to use for SMTP authentication SMTP From The email address to use as the from address for emails"},{"location":"configuration/admin-config/#job-settings","title":"Job Settings","text":"<p>Job settings covers general job settings that impact all jobs.</p> Config Item Explanation Default Timeout (Seconds) When a user creates a new job this is the default value set unless they change it Max Concurrent Jobs The max number of jobs that can be running on the Janus server, any job started over this limit will fail"},{"location":"configuration/admin-config/#data-retention","title":"Data Retention","text":"<p>Data retention settings control how long Janus keeps job history and job output.</p> Config Item Explanation Job History Days The number of days to keep job history in the database, older history will be automatically deleted"},{"location":"configuration/runtime-config/","title":"Runtime Config","text":"<p>Janus is designed to be simple to get started with so there are no config files and the list of configuration options are limited.  All configuration items are set by environment variables.  Settings these can vary based on your environment.</p> Variable Explanation Default Value JANUS_PORT Port Janus runs on 8080 JANUS_DB_TYPE Database type (sqlite or postgres) sqlite JANUS_DB_PATH Path to sqlite DB file, only used when DB_TYPE is sqlite janus.db JANUS_DB_HOSTNAME Postgres database hostname localhost JANUS_DB_PORT Postgres database port 5432 JANUS_DB_NAME Postgres database name postgres JANUS_DB_USER Postgres database username postgres JANUS_DB_PASSWORD Postgres database password postgres JANUS_DB_SSL_MODE Postgres SSL connection mode disable JANUS_URL URL to access janus on, should be set to your domain http://localhost:8080 JANUS_DISABLE_METRICS Disable prometheus metric listener false JANUS_METRICS_PORT Port for prometheus metrics 8081 JANUS_SESSION_NAME Name of the cookie for authentication tracking janus JANUS_BRAND_NAME Controls the site name and brand name Janus"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#docker-install","title":"Docker Install","text":"<p>Running Janus with Docker is the easiest way to get up and running.</p> <pre><code>cd ~/some-directory-where-you-want-to-store-data/\ndocker run -it -v $PWD:/data/ -e JANUS_URL=https://yourdomain.com -p 8080:8080 -p 8081:8081 lbrictson/janus:latest-slim\n# Access at http://localhost:8080/\n# Username: admin@localhost\n# Password: ChangeMeBeforeUse1234!\n# Replace https://yourdomain.com with the domain your plan to host janus at\n</code></pre> <p>Note that when using docker the sqlite database is stored in <code>/data/janus.db</code>.  To persist this data between restarts, you need to either save it to a mapped folder like the example above or to a volume.</p>"},{"location":"getting-started/installation/#docker-compose-install","title":"Docker Compose Install","text":"<pre><code>services:\n  janus:\n    platform: linux/x86_64\n    volumes:\n      - janusdb:/data\n    ports:\n      - \"8080:8080\"\n      - \"8081:8081\"\n    image: lbrictson/janus:latest-slim\n    environment:\n      # JANUS_URL should be the URL where you plan to host Janus\n      - JANUS_URL=https://yourdomain.com\nvolumes:\n  janusdb:\n</code></pre>"},{"location":"getting-started/installation/#binary-install","title":"Binary Install","text":"<ol> <li>Download the latest release at: https://github.com/lbrictson/janus/releases</li> <li>Decompress the executable: <code>tar -xvf janus_Linux_arm64.tar.gz</code></li> <li>Run Janus, make sure to set the URL to where you plan to access it.</li> </ol> <pre><code> JANUS_URL=https://mydomain.com ./janus\n</code></pre> <p>Once you have Janus running you can access the web UI at http://localhost:8080/</p> <p>The default username and password are</p> <pre><code>Username: admin@localhost\nPassword: ChangeMeBeforeUse1234!\n</code></pre> <p>You should change the password after logging in.</p>"},{"location":"notifications/aws-eventbridge/","title":"AWS Event Bridge","text":"<p>Janus is capable of putting events onto the default or custom AWS EventBridge buses.  This allows you to trigger AWS services based on Janus job events.</p> <p>Create a new AWS EventBridge channel at <code>/notifications</code></p>"},{"location":"notifications/aws-eventbridge/#configuration","title":"Configuration","text":"Config Item Explanation Event Bus Name Name of the event bus Event Source Source of the event Detail Type Detail type for this custom event AWS Region AWS Region for this event bridge Access Key ID AWS Access key ID Secret Access Key AWS Secret access key"},{"location":"notifications/aws-eventbridge/#event-source","title":"Event Source","text":"<p>Event source is a great way to filter events in AWS EventBridge.  Configuring a unique name for your environment will allow you to easily filter for Janus events.</p> <p>Read more here:  https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_EventSource.html</p>"},{"location":"notifications/aws-eventbridge/#detail-type","title":"Detail Type","text":"<p>Detail type is a way to filter events in AWS EventBridge.  Configuring a unique name for your environment will allow you to easily filter</p> <p>Read more here:  https://docs.aws.amazon.com/eventbridge/latest/APIReference/API_PutEvents.html</p>"},{"location":"notifications/aws-eventbridge/#permissions","title":"Permissions","text":"<p>The AWS Access Key ID and Secret Access Key should be for an IAM user with the following permissions:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"events:PutEvents\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n</code></pre>"},{"location":"notifications/aws-sns/","title":"AWS SNS","text":"<p>Janus is capable of sending notifications to AWS SNS topics.  This allows you to trigger AWS services based on Janus job events or receive notifications via email, sms and other channels.</p> <p>Create a new AWS SNS channel at <code>/notifications</code></p>"},{"location":"notifications/aws-sns/#configuration","title":"Configuration","text":"Config Item Explanation Topic ARN ARN of the SNS topic AWS Region AWS Region for this SNS topic Access Key ID AWS Access key ID Secret Access Key AWS Secret access key"},{"location":"notifications/aws-sns/#permissions","title":"Permissions","text":"<p>The AWS Access Key ID and Secret Access Key should be for an IAM user with the following permissions:</p> <pre><code>{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sns:Publish\"\n            ],\n            \"Resource\": \"$yourArnGoesHere\"\n        }\n    ]\n}\n</code></pre>"},{"location":"notifications/aws-sns/#notes","title":"Notes","text":"<p>The topic must already exist, Janus does not attempt to create the topic if it is missing.</p>"},{"location":"notifications/discord/","title":"Discord","text":"<p>Janus can send notifications to Discord channels.  To enable Discord notifications, you will need to create a Discord webhook and configure Janus to use it.</p> <p>Create a new Discord channel at <code>/notifications</code></p>"},{"location":"notifications/discord/#configuration","title":"Configuration","text":"Config Item Explanation Webhook URL The URL of the Discord webhook"},{"location":"notifications/discord/#notes","title":"Notes","text":"<p>You can learn more about Discord webhooks here.</p>"},{"location":"notifications/email/","title":"Email","text":"<p>Janus sends email notifications using the SMTP protocol.  To enable email notifications, you will need to configure Janus with your SMTP server settings in the admin configuration. Changing the SMTP settings requires the global admin permission.</p> <p>Create a new PagerDuty channel at <code>/notifications</code></p>"},{"location":"notifications/email/#configuration","title":"Configuration","text":"Config Item Explanation From Address The address to place in the from field To Addresses One or more email addresses to send notifications to.  A new line per address"},{"location":"notifications/email/#notes","title":"Notes","text":"<p>Ensure your SMTP server is configured for DKIM and SPF to prevent emails from being marked as spam.</p>"},{"location":"notifications/pagerduty/","title":"PagerDuty","text":"<p>Janus can integrate with PagerDuty to send notifications when jobs fail.  You create a PagerDuty notification channel per service you wish to trigger in Pagerduty</p> <p>Create a new PagerDuty channel at <code>/notifications</code></p>"},{"location":"notifications/pagerduty/#configuration","title":"Configuration","text":"Config Item Explanation Integration Key The integration key from PagerDuty for a particular service"},{"location":"notifications/pagerduty/#notes","title":"Notes","text":"<p>You can learn more about PagerDuty integration keys here.</p> <p>You must have the Events API V2 integration enabled for your service to use this feature.</p>"},{"location":"notifications/slack/","title":"Slack","text":"<p>Janus can post notifications to Slack channels.  To enable Slack notifications, you will need to create a Slack webhook and configure Janus to use it.</p> <p>Create a new Slack channel at <code>/notifications</code></p>"},{"location":"notifications/slack/#configuration","title":"Configuration","text":"Config Item Explanation Webhook URL The URL of the Slack webhook"},{"location":"notifications/slack/#notes","title":"Notes","text":"<p>You can learn more about Slack webhooks here.</p>"},{"location":"notifications/twilio/","title":"Twilio (SMS)","text":"<p>Twilio is a service that allows you to send and receive SMS messages. It is a paid service that is generally pay as you go. You should budget for the cost of sending SMS messages when using this service.</p> <p>Create a new Slack channel at <code>/notifications</code></p>"},{"location":"notifications/twilio/#configuration","title":"Configuration","text":"Config Item Explanation Account SID The Twilio Account SID Auth Token The Twilio Auth Token From Number The Twilio phone number to send messages from To Numbers One or more phone numbers to send messages to.  A new line per number"},{"location":"notifications/twilio/#notes","title":"Notes","text":"<p>If you are in the United States you need to fully register your Twilio phone number to be able to send SMS messages, otherwise  they will fail.</p> <p>You can learn more about Twilio here. ```</p>"},{"location":"notifications/webhooks/","title":"Webhooks (Outbound Notifications)","text":"<p>Janus supports sending notifications as webhooks to external targets when jobs start, succeed, or fail. The webhook is JSON formatted and sent as a POST request.</p>"},{"location":"notifications/webhooks/#configuration","title":"Configuration","text":"Config Item Explanation Webhook URL The URL of the webhook Headers A list of headers to send with the request.  Headers are defined in JSON as pairs like: <code>{\"x-api-key\": \"my api key\", \"user\": \"my-user\"}</code>"},{"location":"notifications/webhooks/#schema","title":"Schema","text":"<pre><code>{\n  \"JobName\": \"TEST\",\n  \"JobID\": 0,\n  \"ProjectName\": \"TEST\",\n  \"JobStatus\": \"Testing\",\n  \"JobDurationMS\": \"0ms\",\n  \"HistoryLink\": \"http://localhost:8080\"\n}\n</code></pre>"},{"location":"notifications/webhooks/#notes","title":"Notes","text":"<p>If your target URL has HTTPS Janus will fail to send the webhook if the certificate is not valid.</p>"},{"location":"understanding-jobs/advanced-settings/","title":"Advanced Settings","text":"<p>There are some settings available that are fine on their defaults but can be changed as needed.</p>"},{"location":"understanding-jobs/advanced-settings/#timeout-seconds","title":"Timeout (seconds)","text":"<p>The timeout setting is the maximum amount of time a job can run before it is killed.  The default is 3600 seconds (1 hour).  If you have a job that you know will take longer than an hour, you can increase this setting.</p>"},{"location":"understanding-jobs/advanced-settings/#require-file-upload","title":"Require File Upload","text":"<p>When enabled, this setting will require that a file be uploaded to the job before it can be run.  This is useful for jobs that require a file to be present before they can run.</p> <p>The file is always saved into the jobs working directory as \"file\".  It is up to your script to rename it to the file type  or parse it as is.  Allowing users to upload files can be a security risk, so be sure to validate the file before using it.</p>"},{"location":"understanding-jobs/advanced-settings/#allow-concurrent-runs","title":"Allow Concurrent Runs","text":"<p>When enabled, this setting will allow the job to run multiple times concurrently.  This is useful for jobs that can be run in parallel.</p> <p>This also applies to scheduled runs and webhook triggers.  If a job is running and another run is triggered, the new run will start immediately.</p>"},{"location":"understanding-jobs/arguments/","title":"Arguments","text":"<p>Arguments are how you can accept user input, provide default values and restrict the values that can be passed to a job. Janus supports multiple input types to make data entry easier and more accurate.</p>"},{"location":"understanding-jobs/arguments/#input-types","title":"Input Types","text":"<p>Janus supports different input types for arguments to provide better user experience and data validation:</p> Type Description UI Element Example Use Case <code>string</code> Text input (default) Text field Names, descriptions, paths <code>number</code> Numeric values only Number input Port numbers, counts, thresholds <code>date</code> Date selection Date picker Report dates, cutoff dates <code>datetime</code> Date and time selection DateTime picker Scheduled events, timestamps <p>The input type affects how the argument is presented in the UI but all values are passed to your script as strings.</p>"},{"location":"understanding-jobs/arguments/#example-using-different-input-types","title":"Example: Using Different Input Types","text":"<pre><code>#!/bin/bash\n# Arguments with different types\necho \"Name: $JANUS_ARG_NAME\"           # string type\necho \"Port: $JANUS_ARG_PORT\"           # number type  \necho \"Report Date: $JANUS_ARG_DATE\"    # date type (format: YYYY-MM-DD)\necho \"Start Time: $JANUS_ARG_START\"    # datetime type (format: YYYY-MM-DDTHH:MM:SS)\n</code></pre>"},{"location":"understanding-jobs/arguments/#general-behavior","title":"General Behavior","text":"<p>Arguments are always uppercased and prefixed with <code>JANUS_ARG_</code>.  They can be interpolated into the script using the double curly brace syntax.</p> <p>All arguments are also present in the environment as well, so you can use them in the script like you would any other environment variable.</p> <p>Assume you have a variable called <code>NAME</code>, this is how you would access it within your script.</p> <pre><code>#!/bin/bash\necho \"Hello, $JANUS_ARG_NAME!\"\necho \"Hello, {{JANUS_ARG_NAME}}!\"\n</code></pre>"},{"location":"understanding-jobs/arguments/#default-values","title":"Default Values","text":"<p>Arguments can have default values.  If the argument is not provided by the user, the default value will be used.  When starting the job from the UI the default value will be pre-filled if one was provided when creating the job.</p>"},{"location":"understanding-jobs/arguments/#allowed-values","title":"Allowed Values","text":"<p>Arguments can have allowed values.  If the user provides a value that is not in the allowed list, the job will fail to start. When using allowed values the default value must be one of the allowed values.</p>"},{"location":"understanding-jobs/arguments/#sensitive","title":"Sensitive","text":"<p>When checking the \"Sensitive\" box, the argument will be hidden from the logs and the UI when viewing history.</p> <p>This is a great use case for passwords and API keys.</p>"},{"location":"understanding-jobs/arguments/#special-cases","title":"Special Cases","text":""},{"location":"understanding-jobs/arguments/#scheduled-jobs","title":"Scheduled Jobs","text":"<p>Scheduled jobs cannot have arguments without default values as there is no human to provide the value at runtime.</p>"},{"location":"understanding-jobs/arguments/#webhooks","title":"Webhooks","text":"<p>Webhooks act in the same manner - all arguments must have default values. However, webhooks can pass data via POST request body which becomes available as <code>$JANUS_ARG_WEBHOOK_PAYLOAD</code>. See the Webhooks documentation for more details.</p>"},{"location":"understanding-jobs/arguments/#input-type-considerations","title":"Input Type Considerations","text":"<ul> <li>Date/DateTime arguments: Always passed to scripts in ISO 8601 format</li> <li>Number arguments: Validated in the UI but passed as strings to maintain compatibility</li> <li>Dropdown with allowed values: Works with any input type</li> </ul>"},{"location":"understanding-jobs/creating-your-first-job/","title":"Creating Your First Job","text":"<p>Jobs in Janus are the core of the system.  Jobs can be designed to run as one-shot tasks or as scheduled recurring tasks.</p>"},{"location":"understanding-jobs/creating-your-first-job/#creating-a-job","title":"Creating a Job","text":"<p>Creating a job requires a project, create one on the dashboard if need be first.</p> <ol> <li>Navigate to the project you want to create a job in.</li> <li>Click the <code>Create Job</code> button.</li> </ol>"},{"location":"understanding-jobs/creating-your-first-job/#job-configuration","title":"Job Configuration","text":"<p>For your first job we will create a simple job runs a simple command called Say Hello.</p> <p>Name your job \"Say Hello\" and give it a fun description.</p> <p>Add an argument to the job called \"NAME\" and leave the default value blank.</p> <p>Add another argument to the job called \"MESSAGE\" and set the default value to \"Hello\", under allowed values add \"Hello\", \"Goodbye\", \"Howdy\".</p> <p>For the script Enter something that looks like this</p> <pre><code>#!/bin/bash\necho \"{{JANUS_ARG_MESSAGE}}, {{JANUS_ARG_NAME}}!\"\nsleep 5\necho \"Goodbye, $JANUS_ARG_NAME\"\n</code></pre> <p>This script is quite simple, but it gives a good introduction to how to interact with arguments in Janus.</p> <p>Arguments will always be uppercased and prefixed with <code>JANUS_ARG_</code>.  They can be interpolated into the script using the double curly brace syntax.</p> <p>All arguments are also present in the environment as well, so you can use them in the script like you would any other environment variable.</p> <p>The script above demonstrates using both the environment variable and the interpolated syntax.</p> <p>When checking the \"Sensitive\" box, the argument will be hidden from the logs and the UI.</p> <p>Save your job and run it to see the output.</p>"},{"location":"understanding-jobs/environment-variables/","title":"Environment Variables","text":""},{"location":"understanding-jobs/environment-variables/#general-behavior","title":"General Behavior","text":"<p>Any Janus job that has arguments will have those arguments available as environment variables.  This allows you to use the arguments in your scripts as you would any other environment variable.</p> <p>The variables are alaways uppercased and prefixed with <code>JANUS_ARG_</code>.</p> <p>Example:  If you have an argument called <code>NAME</code>, you can access it in your script as <code>$JANUS_ARG_NAME</code>.</p> <pre><code>#!/bin/bash\necho \"Hello, $JANUS_ARG_NAME!\"\n</code></pre>"},{"location":"understanding-jobs/environment-variables/#special-cases","title":"Special Cases","text":""},{"location":"understanding-jobs/environment-variables/#webhook-payloads","title":"Webhook Payloads","text":"<p>When a job is triggered via an inbound webhook with a POST request, the request body is automatically made available as an environment variable:</p> <ul> <li>Variable Name: <code>JANUS_ARG_WEBHOOK_PAYLOAD</code></li> <li>Content: The raw body of the POST request</li> <li>Common Format: Usually JSON, but can be any text format</li> </ul> <p>This allows your job scripts to process data sent from external systems like GitHub, GitLab, CI/CD pipelines, or custom applications.</p> <p>Example usage in a script:</p> <pre><code>#!/bin/bash\n# Access the webhook payload\necho \"Received payload: $JANUS_ARG_WEBHOOK_PAYLOAD\"\n\n# Parse JSON payload (requires jq)\nEVENT_TYPE=$(echo \"$JANUS_ARG_WEBHOOK_PAYLOAD\" | jq -r '.event_type')\necho \"Event type: $EVENT_TYPE\"\n</code></pre> <p>For more details on setting up and using webhooks, see the Webhooks documentation.</p>"},{"location":"understanding-jobs/notifications/","title":"Notifications","text":"<p>Job notifications are a great way to keep users informed without needing to visit Janus itself.  </p> <p>Janus sends notifications optionally at three points in the lifecycle of a job:</p> <ol> <li>When a job starts</li> <li>When a job completes successfully</li> <li>When a job fails</li> </ol> <p>Each notification case above can have as many notification channels attached to it as you like.</p>"},{"location":"understanding-jobs/notifications/#notes","title":"Notes","text":"<p>Failure notifications are sent for the following reasons:</p> <ol> <li>The job script exits with a non-zero status code.</li> <li>The job script times out.</li> <li>Max concurrent runs is reached.</li> <li>Job doesn't allow concurrent runs and another run is triggered while the job is already running.</li> </ol>"},{"location":"understanding-jobs/scheduling/","title":"Scheduling","text":"<p>Janus allows jobs to be scheduled to run on a fixed schedule.  Schedules are always defined in cron syntax.</p> <p>Read more about cron syntax here.</p>"},{"location":"understanding-jobs/scheduling/#creating-a-schedule","title":"Creating a Schedule","text":"<p>When editing or creating a job set a valid cron expression in the \"Cron Schedule\" field and flip the \"Schedule Enabled\" slider to the on position.</p> <p>Jobs will fail to save if the schedule is invalid.</p>"},{"location":"understanding-jobs/scheduling/#editing-behavior","title":"Editing Behavior","text":"<p>The following cases have these outcomes:</p> <ul> <li>Job has schedule enabled and you change it to not:  The job will no longer run on the schedule.</li> <li>Job has schedule disabled and you enable it:  The job will run on the schedule.</li> <li>Job has schedule enabled and you change the schedule:  The job will run on the new schedule.</li> </ul>"},{"location":"understanding-jobs/secrets/","title":"Secrets","text":"<p>Secrets are always scoped to the project level, you cannot share secrets across projects.</p>"},{"location":"understanding-jobs/secrets/#creatingediting-a-secret","title":"Creating/Editing a Secret","text":"<p>Inside the project there is a \"Secrets\" button along the top table border.  Secrets have a name and value.</p>"},{"location":"understanding-jobs/secrets/#using-a-secret","title":"Using a Secret","text":"<p>Secrets are available to jobs as environment variables.  They are prefixed with <code>JANUS_SECRET_</code> and are always uppercased.</p> <p>Example:  If you have a secret called <code>API_KEY</code>, you can access it in your script as <code>$JANUS_SECRET_API_KEY</code>.</p> <pre><code>#!/bin/bash\necho \"Hello, $JANUS_SECRET_API_KEY!\"\n# Interpolated syntax is also available\necho \"Hello, {{JANUS_SECRET_API_KEY}}!\"\n</code></pre> <p>Secrets are always masked when being output into logs and the history UI.</p>"},{"location":"understanding-jobs/versioning/","title":"Versioning","text":"<p>When a job is edited a new version of that job is created.  Janus tracks an unlimited number of versions of a job.  This allows you to revert to a previous version of a job if you make a mistake.</p>"},{"location":"understanding-jobs/versioning/#behavior","title":"Behavior","text":"<p>When a job is edited a new version is created.  The new version is a copy of the previous version with the changes you made.  The previous version is not modified.</p>"},{"location":"understanding-jobs/versioning/#viewing-versions","title":"Viewing Versions","text":"<p>To view the versions of a job, click the \"Versions\" tab on the job detail page.  From there you can view an old version and when viewing it optionally hit \"Restore Version\" to revert the job to this previous version.</p>"},{"location":"understanding-jobs/webhooks/","title":"Webhooks (Inbound Triggers)","text":"<p>Webhooks provide a way to trigger Janus jobs from external systems via HTTP requests. Each webhook has a unique URL that can be called to execute a specific job.</p>"},{"location":"understanding-jobs/webhooks/#creating-a-webhook","title":"Creating a Webhook","text":"<p>To create an inbound webhook: 1. Navigate to the Webhooks section in the Janus UI 2. Select the job you want to trigger 3. Optionally enable API key authentication 4. Save the webhook to get your unique webhook URL</p>"},{"location":"understanding-jobs/webhooks/#webhook-url-format","title":"Webhook URL Format","text":"<p>Once created, your webhook will have a URL in the following format:</p> <pre><code>https://your-janus-instance/webhook/execute/{unique-key}\n</code></pre>"},{"location":"understanding-jobs/webhooks/#authentication","title":"Authentication","text":"<p>Webhooks support optional API key authentication for added security.</p>"},{"location":"understanding-jobs/webhooks/#without-authentication","title":"Without Authentication","text":"<p>If API key authentication is disabled, anyone with the webhook URL can trigger the job.</p>"},{"location":"understanding-jobs/webhooks/#with-api-key-authentication","title":"With API Key Authentication","text":"<p>When API key authentication is enabled: 1. An API key will be generated when you create the webhook 2. Include the API key in the request header: <code>X-API-KEY: your-api-key</code> 3. Requests without the correct API key will receive a 401 Unauthorized response</p> <p>Example curl command with authentication:</p> <pre><code>curl -X POST https://your-janus-instance/webhook/execute/abc123 \\\n  -H \"X-API-KEY: your-api-key\" \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\"message\": \"Hello from webhook\"}'\n</code></pre>"},{"location":"understanding-jobs/webhooks/#post-request-payloads","title":"POST Request Payloads","text":"<p>When triggering a webhook with a POST request, the request body will be available to your job as an environment variable:</p> <ul> <li>Variable Name: <code>$JANUS_ARG_WEBHOOK_PAYLOAD</code></li> <li>Content: The raw body of the POST request (typically JSON)</li> </ul>"},{"location":"understanding-jobs/webhooks/#example-processing-webhook-data","title":"Example: Processing Webhook Data","text":"<pre><code>#!/bin/bash\n# Your job script can access the webhook payload\necho \"Received webhook payload:\"\necho \"$JANUS_ARG_WEBHOOK_PAYLOAD\"\n\n# Parse JSON payload (requires jq)\necho \"$JANUS_ARG_WEBHOOK_PAYLOAD\" | jq '.message'\n</code></pre>"},{"location":"understanding-jobs/webhooks/#example-github-webhook-handler","title":"Example: GitHub Webhook Handler","text":"<pre><code>#!/bin/bash\n# Handle GitHub webhook events\nEVENT_TYPE=$(echo \"$JANUS_ARG_WEBHOOK_PAYLOAD\" | jq -r '.action')\nREPO_NAME=$(echo \"$JANUS_ARG_WEBHOOK_PAYLOAD\" | jq -r '.repository.name')\n\necho \"GitHub event: $EVENT_TYPE on repository: $REPO_NAME\"\n\ncase $EVENT_TYPE in\n  \"opened\")\n    echo \"New PR opened\"\n    # Add your PR handling logic here\n    ;;\n  \"closed\")\n    echo \"PR closed\"\n    # Add your cleanup logic here\n    ;;\nesac\n</code></pre>"},{"location":"understanding-jobs/webhooks/#limitations","title":"Limitations","text":"<ul> <li>File Uploads: Jobs that require file uploads cannot be triggered via webhooks</li> <li>Arguments: All job arguments must have default values, as webhooks cannot provide runtime argument values (except for the webhook payload itself)</li> <li>Scheduled Jobs: Jobs triggered by webhooks will not affect the job's regular schedule if one exists</li> </ul>"},{"location":"understanding-jobs/webhooks/#get-vs-post-requests","title":"GET vs POST Requests","text":"<ul> <li>GET Requests: Trigger the job with default argument values only</li> <li>POST Requests: Trigger the job with default argument values plus access to the request body via <code>$JANUS_ARG_WEBHOOK_PAYLOAD</code></li> </ul>"},{"location":"understanding-jobs/webhooks/#response-codes","title":"Response Codes","text":"Code Description 200 Job triggered successfully 401 Invalid or missing API key (when authentication is enabled) 500 Job failed to start (check job requirements)"},{"location":"understanding-jobs/webhooks/#best-practices","title":"Best Practices","text":"<ol> <li>Use API Keys: Always enable API key authentication for production webhooks</li> <li>Validate Payloads: Add validation in your job scripts to handle unexpected payload formats</li> <li>Error Handling: Include error handling in your scripts for malformed webhook data</li> <li>Logging: Log webhook payloads for debugging and audit purposes</li> <li>Timeout Settings: Configure appropriate timeout values for jobs triggered by webhooks</li> </ol>"},{"location":"user-management/user-permissions/","title":"User Permissions","text":"<p>User permissions are what grant users access to a particular project.  Users can only access projects that they have an assigned permission to.  </p> <p>There are three levels of user permissions in Janus.  Editor, User, No Access.</p>"},{"location":"user-management/user-permissions/#editor","title":"Editor","text":"<p>Editors have full access to the project.  They can create and edit jobs, view logs, rename the project, add/remove/view secrets and delete jobs.</p>"},{"location":"user-management/user-permissions/#user","title":"User","text":"<p>Users can run a job but not view or edit it. They can view the logs of jobs as they execute as well as historical runs.  Users cannot edit projects, secrets, or jobs.</p>"},{"location":"user-management/user-permissions/#no-access","title":"No Access","text":"<p>Users with no access cannot access the project at all.</p>"},{"location":"user-management/user-roles/","title":"User Roles","text":"<p>Users in Janus can have one of two roles.  Admin and User.</p>"},{"location":"user-management/user-roles/#admin","title":"Admin","text":"<p>Admins have full access to every feature and config item in Janus.  The role does not give default access to all projects, however it does give permission to edit project permissions and therefore the admin can grant themselves access.</p>"},{"location":"user-management/user-roles/#user","title":"User","text":"<p>Users have access to the projects they are assigned to.  They can view the project, create and edit jobs, and view logs.  They cannot edit project permissions, create new projects or access any configuration/admin items.</p>"},{"location":"user-management/user-roles/#notes","title":"Notes","text":"<p>When changing a users role the effect is immediate, no need to log out and back in.</p>"}]}